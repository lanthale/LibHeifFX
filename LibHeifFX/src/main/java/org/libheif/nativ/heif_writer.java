// Generated by jextract

package org.libheif.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_writer {
 *     int writer_api_version;
 *     struct heif_error (*write)(struct heif_context *, const void *, size_t, void *);
 * }
 * }
 */
public class heif_writer {

    heif_writer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_INT.withName("writer_api_version"),
        MemoryLayout.paddingLayout(4),
        heif_h.C_POINTER.withName("write")
    ).withName("heif_writer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt writer_api_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("writer_api_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int writer_api_version
     * }
     */
    public static final OfInt writer_api_version$layout() {
        return writer_api_version$LAYOUT;
    }

    private static final long writer_api_version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int writer_api_version
     * }
     */
    public static final long writer_api_version$offset() {
        return writer_api_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int writer_api_version
     * }
     */
    public static int writer_api_version(MemorySegment struct) {
        return struct.get(writer_api_version$LAYOUT, writer_api_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int writer_api_version
     * }
     */
    public static void writer_api_version(MemorySegment struct, int fieldValue) {
        struct.set(writer_api_version$LAYOUT, writer_api_version$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct heif_error (*write)(struct heif_context *, const void *, size_t, void *)
     * }
     */
    public static class write {

        write() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = heif_h.upcallHandle(write.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(write.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, SegmentAllocator alloc,MemorySegment _x0, MemorySegment _x1, long _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, alloc, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout write$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("write"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct heif_error (*write)(struct heif_context *, const void *, size_t, void *)
     * }
     */
    public static final AddressLayout write$layout() {
        return write$LAYOUT;
    }

    private static final long write$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct heif_error (*write)(struct heif_context *, const void *, size_t, void *)
     * }
     */
    public static final long write$offset() {
        return write$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct heif_error (*write)(struct heif_context *, const void *, size_t, void *)
     * }
     */
    public static MemorySegment write(MemorySegment struct) {
        return struct.get(write$LAYOUT, write$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct heif_error (*write)(struct heif_context *, const void *, size_t, void *)
     * }
     */
    public static void write(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(write$LAYOUT, write$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

