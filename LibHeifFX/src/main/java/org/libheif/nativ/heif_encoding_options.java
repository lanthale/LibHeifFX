// Generated by jextract

package org.libheif.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_encoding_options {
 *     uint8_t version;
 *     uint8_t save_alpha_channel;
 *     uint8_t macOS_compatibility_workaround;
 *     uint8_t save_two_colr_boxes_when_ICC_and_nclx_available;
 *     struct heif_color_profile_nclx *output_nclx_profile;
 *     uint8_t macOS_compatibility_workaround_no_nclx_profile;
 * }
 * }
 */
public class heif_encoding_options {

    heif_encoding_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_CHAR.withName("version"),
        heif_h.C_CHAR.withName("save_alpha_channel"),
        heif_h.C_CHAR.withName("macOS_compatibility_workaround"),
        heif_h.C_CHAR.withName("save_two_colr_boxes_when_ICC_and_nclx_available"),
        MemoryLayout.paddingLayout(4),
        heif_h.C_POINTER.withName("output_nclx_profile"),
        heif_h.C_CHAR.withName("macOS_compatibility_workaround_no_nclx_profile"),
        MemoryLayout.paddingLayout(7)
    ).withName("heif_encoding_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte version$LAYOUT = (OfByte)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final OfByte version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static byte version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static void version(MemorySegment struct, byte fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfByte save_alpha_channel$LAYOUT = (OfByte)$LAYOUT.select(groupElement("save_alpha_channel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t save_alpha_channel
     * }
     */
    public static final OfByte save_alpha_channel$layout() {
        return save_alpha_channel$LAYOUT;
    }

    private static final long save_alpha_channel$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t save_alpha_channel
     * }
     */
    public static final long save_alpha_channel$offset() {
        return save_alpha_channel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t save_alpha_channel
     * }
     */
    public static byte save_alpha_channel(MemorySegment struct) {
        return struct.get(save_alpha_channel$LAYOUT, save_alpha_channel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t save_alpha_channel
     * }
     */
    public static void save_alpha_channel(MemorySegment struct, byte fieldValue) {
        struct.set(save_alpha_channel$LAYOUT, save_alpha_channel$OFFSET, fieldValue);
    }

    private static final OfByte macOS_compatibility_workaround$LAYOUT = (OfByte)$LAYOUT.select(groupElement("macOS_compatibility_workaround"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround
     * }
     */
    public static final OfByte macOS_compatibility_workaround$layout() {
        return macOS_compatibility_workaround$LAYOUT;
    }

    private static final long macOS_compatibility_workaround$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround
     * }
     */
    public static final long macOS_compatibility_workaround$offset() {
        return macOS_compatibility_workaround$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround
     * }
     */
    public static byte macOS_compatibility_workaround(MemorySegment struct) {
        return struct.get(macOS_compatibility_workaround$LAYOUT, macOS_compatibility_workaround$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround
     * }
     */
    public static void macOS_compatibility_workaround(MemorySegment struct, byte fieldValue) {
        struct.set(macOS_compatibility_workaround$LAYOUT, macOS_compatibility_workaround$OFFSET, fieldValue);
    }

    private static final OfByte save_two_colr_boxes_when_ICC_and_nclx_available$LAYOUT = (OfByte)$LAYOUT.select(groupElement("save_two_colr_boxes_when_ICC_and_nclx_available"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t save_two_colr_boxes_when_ICC_and_nclx_available
     * }
     */
    public static final OfByte save_two_colr_boxes_when_ICC_and_nclx_available$layout() {
        return save_two_colr_boxes_when_ICC_and_nclx_available$LAYOUT;
    }

    private static final long save_two_colr_boxes_when_ICC_and_nclx_available$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t save_two_colr_boxes_when_ICC_and_nclx_available
     * }
     */
    public static final long save_two_colr_boxes_when_ICC_and_nclx_available$offset() {
        return save_two_colr_boxes_when_ICC_and_nclx_available$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t save_two_colr_boxes_when_ICC_and_nclx_available
     * }
     */
    public static byte save_two_colr_boxes_when_ICC_and_nclx_available(MemorySegment struct) {
        return struct.get(save_two_colr_boxes_when_ICC_and_nclx_available$LAYOUT, save_two_colr_boxes_when_ICC_and_nclx_available$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t save_two_colr_boxes_when_ICC_and_nclx_available
     * }
     */
    public static void save_two_colr_boxes_when_ICC_and_nclx_available(MemorySegment struct, byte fieldValue) {
        struct.set(save_two_colr_boxes_when_ICC_and_nclx_available$LAYOUT, save_two_colr_boxes_when_ICC_and_nclx_available$OFFSET, fieldValue);
    }

    private static final AddressLayout output_nclx_profile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("output_nclx_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct heif_color_profile_nclx *output_nclx_profile
     * }
     */
    public static final AddressLayout output_nclx_profile$layout() {
        return output_nclx_profile$LAYOUT;
    }

    private static final long output_nclx_profile$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct heif_color_profile_nclx *output_nclx_profile
     * }
     */
    public static final long output_nclx_profile$offset() {
        return output_nclx_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct heif_color_profile_nclx *output_nclx_profile
     * }
     */
    public static MemorySegment output_nclx_profile(MemorySegment struct) {
        return struct.get(output_nclx_profile$LAYOUT, output_nclx_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct heif_color_profile_nclx *output_nclx_profile
     * }
     */
    public static void output_nclx_profile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(output_nclx_profile$LAYOUT, output_nclx_profile$OFFSET, fieldValue);
    }

    private static final OfByte macOS_compatibility_workaround_no_nclx_profile$LAYOUT = (OfByte)$LAYOUT.select(groupElement("macOS_compatibility_workaround_no_nclx_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround_no_nclx_profile
     * }
     */
    public static final OfByte macOS_compatibility_workaround_no_nclx_profile$layout() {
        return macOS_compatibility_workaround_no_nclx_profile$LAYOUT;
    }

    private static final long macOS_compatibility_workaround_no_nclx_profile$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround_no_nclx_profile
     * }
     */
    public static final long macOS_compatibility_workaround_no_nclx_profile$offset() {
        return macOS_compatibility_workaround_no_nclx_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround_no_nclx_profile
     * }
     */
    public static byte macOS_compatibility_workaround_no_nclx_profile(MemorySegment struct) {
        return struct.get(macOS_compatibility_workaround_no_nclx_profile$LAYOUT, macOS_compatibility_workaround_no_nclx_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t macOS_compatibility_workaround_no_nclx_profile
     * }
     */
    public static void macOS_compatibility_workaround_no_nclx_profile(MemorySegment struct, byte fieldValue) {
        struct.set(macOS_compatibility_workaround_no_nclx_profile$LAYOUT, macOS_compatibility_workaround_no_nclx_profile$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

