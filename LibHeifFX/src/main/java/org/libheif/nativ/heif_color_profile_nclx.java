// Generated by jextract

package org.libheif.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_color_profile_nclx {
 *     uint8_t version;
 *     enum heif_color_primaries color_primaries;
 *     enum heif_transfer_characteristics transfer_characteristics;
 *     enum heif_matrix_coefficients matrix_coefficients;
 *     uint8_t full_range_flag;
 *     float color_primary_red_x;
 *     float color_primary_red_y;
 *     float color_primary_green_x;
 *     float color_primary_green_y;
 *     float color_primary_blue_x;
 *     float color_primary_blue_y;
 *     float color_primary_white_x;
 *     float color_primary_white_y;
 * }
 * }
 */
public class heif_color_profile_nclx {

    heif_color_profile_nclx() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_CHAR.withName("version"),
        MemoryLayout.paddingLayout(3),
        heif_h.C_INT.withName("color_primaries"),
        heif_h.C_INT.withName("transfer_characteristics"),
        heif_h.C_INT.withName("matrix_coefficients"),
        heif_h.C_CHAR.withName("full_range_flag"),
        MemoryLayout.paddingLayout(3),
        heif_h.C_FLOAT.withName("color_primary_red_x"),
        heif_h.C_FLOAT.withName("color_primary_red_y"),
        heif_h.C_FLOAT.withName("color_primary_green_x"),
        heif_h.C_FLOAT.withName("color_primary_green_y"),
        heif_h.C_FLOAT.withName("color_primary_blue_x"),
        heif_h.C_FLOAT.withName("color_primary_blue_y"),
        heif_h.C_FLOAT.withName("color_primary_white_x"),
        heif_h.C_FLOAT.withName("color_primary_white_y")
    ).withName("heif_color_profile_nclx");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte version$LAYOUT = (OfByte)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final OfByte version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static byte version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static void version(MemorySegment struct, byte fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt color_primaries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("color_primaries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_color_primaries color_primaries
     * }
     */
    public static final OfInt color_primaries$layout() {
        return color_primaries$LAYOUT;
    }

    private static final long color_primaries$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_color_primaries color_primaries
     * }
     */
    public static final long color_primaries$offset() {
        return color_primaries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_color_primaries color_primaries
     * }
     */
    public static int color_primaries(MemorySegment struct) {
        return struct.get(color_primaries$LAYOUT, color_primaries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_color_primaries color_primaries
     * }
     */
    public static void color_primaries(MemorySegment struct, int fieldValue) {
        struct.set(color_primaries$LAYOUT, color_primaries$OFFSET, fieldValue);
    }

    private static final OfInt transfer_characteristics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transfer_characteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_transfer_characteristics transfer_characteristics
     * }
     */
    public static final OfInt transfer_characteristics$layout() {
        return transfer_characteristics$LAYOUT;
    }

    private static final long transfer_characteristics$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_transfer_characteristics transfer_characteristics
     * }
     */
    public static final long transfer_characteristics$offset() {
        return transfer_characteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_transfer_characteristics transfer_characteristics
     * }
     */
    public static int transfer_characteristics(MemorySegment struct) {
        return struct.get(transfer_characteristics$LAYOUT, transfer_characteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_transfer_characteristics transfer_characteristics
     * }
     */
    public static void transfer_characteristics(MemorySegment struct, int fieldValue) {
        struct.set(transfer_characteristics$LAYOUT, transfer_characteristics$OFFSET, fieldValue);
    }

    private static final OfInt matrix_coefficients$LAYOUT = (OfInt)$LAYOUT.select(groupElement("matrix_coefficients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_matrix_coefficients matrix_coefficients
     * }
     */
    public static final OfInt matrix_coefficients$layout() {
        return matrix_coefficients$LAYOUT;
    }

    private static final long matrix_coefficients$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_matrix_coefficients matrix_coefficients
     * }
     */
    public static final long matrix_coefficients$offset() {
        return matrix_coefficients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_matrix_coefficients matrix_coefficients
     * }
     */
    public static int matrix_coefficients(MemorySegment struct) {
        return struct.get(matrix_coefficients$LAYOUT, matrix_coefficients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_matrix_coefficients matrix_coefficients
     * }
     */
    public static void matrix_coefficients(MemorySegment struct, int fieldValue) {
        struct.set(matrix_coefficients$LAYOUT, matrix_coefficients$OFFSET, fieldValue);
    }

    private static final OfByte full_range_flag$LAYOUT = (OfByte)$LAYOUT.select(groupElement("full_range_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t full_range_flag
     * }
     */
    public static final OfByte full_range_flag$layout() {
        return full_range_flag$LAYOUT;
    }

    private static final long full_range_flag$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t full_range_flag
     * }
     */
    public static final long full_range_flag$offset() {
        return full_range_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t full_range_flag
     * }
     */
    public static byte full_range_flag(MemorySegment struct) {
        return struct.get(full_range_flag$LAYOUT, full_range_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t full_range_flag
     * }
     */
    public static void full_range_flag(MemorySegment struct, byte fieldValue) {
        struct.set(full_range_flag$LAYOUT, full_range_flag$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_red_x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_red_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_red_x
     * }
     */
    public static final OfFloat color_primary_red_x$layout() {
        return color_primary_red_x$LAYOUT;
    }

    private static final long color_primary_red_x$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_red_x
     * }
     */
    public static final long color_primary_red_x$offset() {
        return color_primary_red_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_red_x
     * }
     */
    public static float color_primary_red_x(MemorySegment struct) {
        return struct.get(color_primary_red_x$LAYOUT, color_primary_red_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_red_x
     * }
     */
    public static void color_primary_red_x(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_red_x$LAYOUT, color_primary_red_x$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_red_y$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_red_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_red_y
     * }
     */
    public static final OfFloat color_primary_red_y$layout() {
        return color_primary_red_y$LAYOUT;
    }

    private static final long color_primary_red_y$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_red_y
     * }
     */
    public static final long color_primary_red_y$offset() {
        return color_primary_red_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_red_y
     * }
     */
    public static float color_primary_red_y(MemorySegment struct) {
        return struct.get(color_primary_red_y$LAYOUT, color_primary_red_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_red_y
     * }
     */
    public static void color_primary_red_y(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_red_y$LAYOUT, color_primary_red_y$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_green_x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_green_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_green_x
     * }
     */
    public static final OfFloat color_primary_green_x$layout() {
        return color_primary_green_x$LAYOUT;
    }

    private static final long color_primary_green_x$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_green_x
     * }
     */
    public static final long color_primary_green_x$offset() {
        return color_primary_green_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_green_x
     * }
     */
    public static float color_primary_green_x(MemorySegment struct) {
        return struct.get(color_primary_green_x$LAYOUT, color_primary_green_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_green_x
     * }
     */
    public static void color_primary_green_x(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_green_x$LAYOUT, color_primary_green_x$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_green_y$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_green_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_green_y
     * }
     */
    public static final OfFloat color_primary_green_y$layout() {
        return color_primary_green_y$LAYOUT;
    }

    private static final long color_primary_green_y$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_green_y
     * }
     */
    public static final long color_primary_green_y$offset() {
        return color_primary_green_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_green_y
     * }
     */
    public static float color_primary_green_y(MemorySegment struct) {
        return struct.get(color_primary_green_y$LAYOUT, color_primary_green_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_green_y
     * }
     */
    public static void color_primary_green_y(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_green_y$LAYOUT, color_primary_green_y$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_blue_x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_blue_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_blue_x
     * }
     */
    public static final OfFloat color_primary_blue_x$layout() {
        return color_primary_blue_x$LAYOUT;
    }

    private static final long color_primary_blue_x$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_blue_x
     * }
     */
    public static final long color_primary_blue_x$offset() {
        return color_primary_blue_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_blue_x
     * }
     */
    public static float color_primary_blue_x(MemorySegment struct) {
        return struct.get(color_primary_blue_x$LAYOUT, color_primary_blue_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_blue_x
     * }
     */
    public static void color_primary_blue_x(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_blue_x$LAYOUT, color_primary_blue_x$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_blue_y$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_blue_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_blue_y
     * }
     */
    public static final OfFloat color_primary_blue_y$layout() {
        return color_primary_blue_y$LAYOUT;
    }

    private static final long color_primary_blue_y$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_blue_y
     * }
     */
    public static final long color_primary_blue_y$offset() {
        return color_primary_blue_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_blue_y
     * }
     */
    public static float color_primary_blue_y(MemorySegment struct) {
        return struct.get(color_primary_blue_y$LAYOUT, color_primary_blue_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_blue_y
     * }
     */
    public static void color_primary_blue_y(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_blue_y$LAYOUT, color_primary_blue_y$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_white_x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_white_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_white_x
     * }
     */
    public static final OfFloat color_primary_white_x$layout() {
        return color_primary_white_x$LAYOUT;
    }

    private static final long color_primary_white_x$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_white_x
     * }
     */
    public static final long color_primary_white_x$offset() {
        return color_primary_white_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_white_x
     * }
     */
    public static float color_primary_white_x(MemorySegment struct) {
        return struct.get(color_primary_white_x$LAYOUT, color_primary_white_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_white_x
     * }
     */
    public static void color_primary_white_x(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_white_x$LAYOUT, color_primary_white_x$OFFSET, fieldValue);
    }

    private static final OfFloat color_primary_white_y$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("color_primary_white_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float color_primary_white_y
     * }
     */
    public static final OfFloat color_primary_white_y$layout() {
        return color_primary_white_y$LAYOUT;
    }

    private static final long color_primary_white_y$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float color_primary_white_y
     * }
     */
    public static final long color_primary_white_y$offset() {
        return color_primary_white_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float color_primary_white_y
     * }
     */
    public static float color_primary_white_y(MemorySegment struct) {
        return struct.get(color_primary_white_y$LAYOUT, color_primary_white_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float color_primary_white_y
     * }
     */
    public static void color_primary_white_y(MemorySegment struct, float fieldValue) {
        struct.set(color_primary_white_y$LAYOUT, color_primary_white_y$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

