// Generated by jextract

package org.libheif.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_depth_representation_info {
 *     uint8_t version;
 *     uint8_t has_z_near;
 *     uint8_t has_z_far;
 *     uint8_t has_d_min;
 *     uint8_t has_d_max;
 *     double z_near;
 *     double z_far;
 *     double d_min;
 *     double d_max;
 *     enum heif_depth_representation_type depth_representation_type;
 *     uint32_t disparity_reference_view;
 *     uint32_t depth_nonlinear_representation_model_size;
 *     uint8_t *depth_nonlinear_representation_model;
 * }
 * }
 */
public class heif_depth_representation_info {

    heif_depth_representation_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_CHAR.withName("version"),
        heif_h.C_CHAR.withName("has_z_near"),
        heif_h.C_CHAR.withName("has_z_far"),
        heif_h.C_CHAR.withName("has_d_min"),
        heif_h.C_CHAR.withName("has_d_max"),
        MemoryLayout.paddingLayout(3),
        heif_h.C_DOUBLE.withName("z_near"),
        heif_h.C_DOUBLE.withName("z_far"),
        heif_h.C_DOUBLE.withName("d_min"),
        heif_h.C_DOUBLE.withName("d_max"),
        heif_h.C_INT.withName("depth_representation_type"),
        heif_h.C_INT.withName("disparity_reference_view"),
        heif_h.C_INT.withName("depth_nonlinear_representation_model_size"),
        MemoryLayout.paddingLayout(4),
        heif_h.C_POINTER.withName("depth_nonlinear_representation_model")
    ).withName("heif_depth_representation_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte version$LAYOUT = (OfByte)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final OfByte version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static byte version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static void version(MemorySegment struct, byte fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfByte has_z_near$LAYOUT = (OfByte)$LAYOUT.select(groupElement("has_z_near"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t has_z_near
     * }
     */
    public static final OfByte has_z_near$layout() {
        return has_z_near$LAYOUT;
    }

    private static final long has_z_near$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t has_z_near
     * }
     */
    public static final long has_z_near$offset() {
        return has_z_near$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t has_z_near
     * }
     */
    public static byte has_z_near(MemorySegment struct) {
        return struct.get(has_z_near$LAYOUT, has_z_near$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t has_z_near
     * }
     */
    public static void has_z_near(MemorySegment struct, byte fieldValue) {
        struct.set(has_z_near$LAYOUT, has_z_near$OFFSET, fieldValue);
    }

    private static final OfByte has_z_far$LAYOUT = (OfByte)$LAYOUT.select(groupElement("has_z_far"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t has_z_far
     * }
     */
    public static final OfByte has_z_far$layout() {
        return has_z_far$LAYOUT;
    }

    private static final long has_z_far$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t has_z_far
     * }
     */
    public static final long has_z_far$offset() {
        return has_z_far$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t has_z_far
     * }
     */
    public static byte has_z_far(MemorySegment struct) {
        return struct.get(has_z_far$LAYOUT, has_z_far$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t has_z_far
     * }
     */
    public static void has_z_far(MemorySegment struct, byte fieldValue) {
        struct.set(has_z_far$LAYOUT, has_z_far$OFFSET, fieldValue);
    }

    private static final OfByte has_d_min$LAYOUT = (OfByte)$LAYOUT.select(groupElement("has_d_min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t has_d_min
     * }
     */
    public static final OfByte has_d_min$layout() {
        return has_d_min$LAYOUT;
    }

    private static final long has_d_min$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t has_d_min
     * }
     */
    public static final long has_d_min$offset() {
        return has_d_min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t has_d_min
     * }
     */
    public static byte has_d_min(MemorySegment struct) {
        return struct.get(has_d_min$LAYOUT, has_d_min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t has_d_min
     * }
     */
    public static void has_d_min(MemorySegment struct, byte fieldValue) {
        struct.set(has_d_min$LAYOUT, has_d_min$OFFSET, fieldValue);
    }

    private static final OfByte has_d_max$LAYOUT = (OfByte)$LAYOUT.select(groupElement("has_d_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t has_d_max
     * }
     */
    public static final OfByte has_d_max$layout() {
        return has_d_max$LAYOUT;
    }

    private static final long has_d_max$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t has_d_max
     * }
     */
    public static final long has_d_max$offset() {
        return has_d_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t has_d_max
     * }
     */
    public static byte has_d_max(MemorySegment struct) {
        return struct.get(has_d_max$LAYOUT, has_d_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t has_d_max
     * }
     */
    public static void has_d_max(MemorySegment struct, byte fieldValue) {
        struct.set(has_d_max$LAYOUT, has_d_max$OFFSET, fieldValue);
    }

    private static final OfDouble z_near$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("z_near"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double z_near
     * }
     */
    public static final OfDouble z_near$layout() {
        return z_near$LAYOUT;
    }

    private static final long z_near$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double z_near
     * }
     */
    public static final long z_near$offset() {
        return z_near$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double z_near
     * }
     */
    public static double z_near(MemorySegment struct) {
        return struct.get(z_near$LAYOUT, z_near$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double z_near
     * }
     */
    public static void z_near(MemorySegment struct, double fieldValue) {
        struct.set(z_near$LAYOUT, z_near$OFFSET, fieldValue);
    }

    private static final OfDouble z_far$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("z_far"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double z_far
     * }
     */
    public static final OfDouble z_far$layout() {
        return z_far$LAYOUT;
    }

    private static final long z_far$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double z_far
     * }
     */
    public static final long z_far$offset() {
        return z_far$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double z_far
     * }
     */
    public static double z_far(MemorySegment struct) {
        return struct.get(z_far$LAYOUT, z_far$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double z_far
     * }
     */
    public static void z_far(MemorySegment struct, double fieldValue) {
        struct.set(z_far$LAYOUT, z_far$OFFSET, fieldValue);
    }

    private static final OfDouble d_min$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("d_min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double d_min
     * }
     */
    public static final OfDouble d_min$layout() {
        return d_min$LAYOUT;
    }

    private static final long d_min$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double d_min
     * }
     */
    public static final long d_min$offset() {
        return d_min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double d_min
     * }
     */
    public static double d_min(MemorySegment struct) {
        return struct.get(d_min$LAYOUT, d_min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double d_min
     * }
     */
    public static void d_min(MemorySegment struct, double fieldValue) {
        struct.set(d_min$LAYOUT, d_min$OFFSET, fieldValue);
    }

    private static final OfDouble d_max$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("d_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double d_max
     * }
     */
    public static final OfDouble d_max$layout() {
        return d_max$LAYOUT;
    }

    private static final long d_max$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double d_max
     * }
     */
    public static final long d_max$offset() {
        return d_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double d_max
     * }
     */
    public static double d_max(MemorySegment struct) {
        return struct.get(d_max$LAYOUT, d_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double d_max
     * }
     */
    public static void d_max(MemorySegment struct, double fieldValue) {
        struct.set(d_max$LAYOUT, d_max$OFFSET, fieldValue);
    }

    private static final OfInt depth_representation_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth_representation_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_depth_representation_type depth_representation_type
     * }
     */
    public static final OfInt depth_representation_type$layout() {
        return depth_representation_type$LAYOUT;
    }

    private static final long depth_representation_type$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_depth_representation_type depth_representation_type
     * }
     */
    public static final long depth_representation_type$offset() {
        return depth_representation_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_depth_representation_type depth_representation_type
     * }
     */
    public static int depth_representation_type(MemorySegment struct) {
        return struct.get(depth_representation_type$LAYOUT, depth_representation_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_depth_representation_type depth_representation_type
     * }
     */
    public static void depth_representation_type(MemorySegment struct, int fieldValue) {
        struct.set(depth_representation_type$LAYOUT, depth_representation_type$OFFSET, fieldValue);
    }

    private static final OfInt disparity_reference_view$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disparity_reference_view"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t disparity_reference_view
     * }
     */
    public static final OfInt disparity_reference_view$layout() {
        return disparity_reference_view$LAYOUT;
    }

    private static final long disparity_reference_view$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t disparity_reference_view
     * }
     */
    public static final long disparity_reference_view$offset() {
        return disparity_reference_view$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t disparity_reference_view
     * }
     */
    public static int disparity_reference_view(MemorySegment struct) {
        return struct.get(disparity_reference_view$LAYOUT, disparity_reference_view$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t disparity_reference_view
     * }
     */
    public static void disparity_reference_view(MemorySegment struct, int fieldValue) {
        struct.set(disparity_reference_view$LAYOUT, disparity_reference_view$OFFSET, fieldValue);
    }

    private static final OfInt depth_nonlinear_representation_model_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth_nonlinear_representation_model_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t depth_nonlinear_representation_model_size
     * }
     */
    public static final OfInt depth_nonlinear_representation_model_size$layout() {
        return depth_nonlinear_representation_model_size$LAYOUT;
    }

    private static final long depth_nonlinear_representation_model_size$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t depth_nonlinear_representation_model_size
     * }
     */
    public static final long depth_nonlinear_representation_model_size$offset() {
        return depth_nonlinear_representation_model_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t depth_nonlinear_representation_model_size
     * }
     */
    public static int depth_nonlinear_representation_model_size(MemorySegment struct) {
        return struct.get(depth_nonlinear_representation_model_size$LAYOUT, depth_nonlinear_representation_model_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t depth_nonlinear_representation_model_size
     * }
     */
    public static void depth_nonlinear_representation_model_size(MemorySegment struct, int fieldValue) {
        struct.set(depth_nonlinear_representation_model_size$LAYOUT, depth_nonlinear_representation_model_size$OFFSET, fieldValue);
    }

    private static final AddressLayout depth_nonlinear_representation_model$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("depth_nonlinear_representation_model"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *depth_nonlinear_representation_model
     * }
     */
    public static final AddressLayout depth_nonlinear_representation_model$layout() {
        return depth_nonlinear_representation_model$LAYOUT;
    }

    private static final long depth_nonlinear_representation_model$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *depth_nonlinear_representation_model
     * }
     */
    public static final long depth_nonlinear_representation_model$offset() {
        return depth_nonlinear_representation_model$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *depth_nonlinear_representation_model
     * }
     */
    public static MemorySegment depth_nonlinear_representation_model(MemorySegment struct) {
        return struct.get(depth_nonlinear_representation_model$LAYOUT, depth_nonlinear_representation_model$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *depth_nonlinear_representation_model
     * }
     */
    public static void depth_nonlinear_representation_model(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(depth_nonlinear_representation_model$LAYOUT, depth_nonlinear_representation_model$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size @code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size @code elementCount} using {@code allocator}.
     * The returned segment has size @code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size @code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

