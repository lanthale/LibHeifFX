// Generated by jextract

package org.libheif.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class heif_h {

    heif_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef long long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = heif_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long size_t
     * }
     */
    public static final OfLong size_t = heif_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wchar_t
     * }
     */
    public static final OfShort wchar_t = heif_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = heif_h.C_DOUBLE;

    private static class heif_get_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_get_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_get_version()
     * }
     */
    public static FunctionDescriptor heif_get_version$descriptor() {
        return heif_get_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_get_version()
     * }
     */
    public static MethodHandle heif_get_version$handle() {
        return heif_get_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_get_version()
     * }
     */
    public static MemorySegment heif_get_version() {
        var mh$ = heif_get_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_get_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_get_version_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_get_version_number"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t heif_get_version_number()
     * }
     */
    public static FunctionDescriptor heif_get_version_number$descriptor() {
        return heif_get_version_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t heif_get_version_number()
     * }
     */
    public static MethodHandle heif_get_version_number$handle() {
        return heif_get_version_number.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32_t heif_get_version_number()
     * }
     */
    public static int heif_get_version_number() {
        var mh$ = heif_get_version_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_get_version_number");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_get_version_number_major {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_get_version_number_major"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_get_version_number_major()
     * }
     */
    public static FunctionDescriptor heif_get_version_number_major$descriptor() {
        return heif_get_version_number_major.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_get_version_number_major()
     * }
     */
    public static MethodHandle heif_get_version_number_major$handle() {
        return heif_get_version_number_major.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_get_version_number_major()
     * }
     */
    public static int heif_get_version_number_major() {
        var mh$ = heif_get_version_number_major.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_get_version_number_major");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_get_version_number_minor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_get_version_number_minor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_get_version_number_minor()
     * }
     */
    public static FunctionDescriptor heif_get_version_number_minor$descriptor() {
        return heif_get_version_number_minor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_get_version_number_minor()
     * }
     */
    public static MethodHandle heif_get_version_number_minor$handle() {
        return heif_get_version_number_minor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_get_version_number_minor()
     * }
     */
    public static int heif_get_version_number_minor() {
        var mh$ = heif_get_version_number_minor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_get_version_number_minor");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_get_version_number_maintenance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_get_version_number_maintenance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_get_version_number_maintenance()
     * }
     */
    public static FunctionDescriptor heif_get_version_number_maintenance$descriptor() {
        return heif_get_version_number_maintenance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_get_version_number_maintenance()
     * }
     */
    public static MethodHandle heif_get_version_number_maintenance$handle() {
        return heif_get_version_number_maintenance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_get_version_number_maintenance()
     * }
     */
    public static int heif_get_version_number_maintenance() {
        var mh$ = heif_get_version_number_maintenance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_get_version_number_maintenance");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_error_Ok = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Ok = 0
     * }
     */
    public static int heif_error_Ok() {
        return heif_error_Ok;
    }
    private static final int heif_error_Input_does_not_exist = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Input_does_not_exist = 1
     * }
     */
    public static int heif_error_Input_does_not_exist() {
        return heif_error_Input_does_not_exist;
    }
    private static final int heif_error_Invalid_input = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Invalid_input = 2
     * }
     */
    public static int heif_error_Invalid_input() {
        return heif_error_Invalid_input;
    }
    private static final int heif_error_Unsupported_filetype = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Unsupported_filetype = 3
     * }
     */
    public static int heif_error_Unsupported_filetype() {
        return heif_error_Unsupported_filetype;
    }
    private static final int heif_error_Unsupported_feature = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Unsupported_feature = 4
     * }
     */
    public static int heif_error_Unsupported_feature() {
        return heif_error_Unsupported_feature;
    }
    private static final int heif_error_Usage_error = (int)5L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Usage_error = 5
     * }
     */
    public static int heif_error_Usage_error() {
        return heif_error_Usage_error;
    }
    private static final int heif_error_Memory_allocation_error = (int)6L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Memory_allocation_error = 6
     * }
     */
    public static int heif_error_Memory_allocation_error() {
        return heif_error_Memory_allocation_error;
    }
    private static final int heif_error_Decoder_plugin_error = (int)7L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Decoder_plugin_error = 7
     * }
     */
    public static int heif_error_Decoder_plugin_error() {
        return heif_error_Decoder_plugin_error;
    }
    private static final int heif_error_Encoder_plugin_error = (int)8L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Encoder_plugin_error = 8
     * }
     */
    public static int heif_error_Encoder_plugin_error() {
        return heif_error_Encoder_plugin_error;
    }
    private static final int heif_error_Encoding_error = (int)9L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Encoding_error = 9
     * }
     */
    public static int heif_error_Encoding_error() {
        return heif_error_Encoding_error;
    }
    private static final int heif_error_Color_profile_does_not_exist = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_error_code.heif_error_Color_profile_does_not_exist = 10
     * }
     */
    public static int heif_error_Color_profile_does_not_exist() {
        return heif_error_Color_profile_does_not_exist;
    }
    private static final int heif_suberror_Unspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unspecified = 0
     * }
     */
    public static int heif_suberror_Unspecified() {
        return heif_suberror_Unspecified;
    }
    private static final int heif_suberror_End_of_data = (int)100L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_End_of_data = 100
     * }
     */
    public static int heif_suberror_End_of_data() {
        return heif_suberror_End_of_data;
    }
    private static final int heif_suberror_Invalid_box_size = (int)101L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_box_size = 101
     * }
     */
    public static int heif_suberror_Invalid_box_size() {
        return heif_suberror_Invalid_box_size;
    }
    private static final int heif_suberror_No_ftyp_box = (int)102L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_ftyp_box = 102
     * }
     */
    public static int heif_suberror_No_ftyp_box() {
        return heif_suberror_No_ftyp_box;
    }
    private static final int heif_suberror_No_idat_box = (int)103L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_idat_box = 103
     * }
     */
    public static int heif_suberror_No_idat_box() {
        return heif_suberror_No_idat_box;
    }
    private static final int heif_suberror_No_meta_box = (int)104L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_meta_box = 104
     * }
     */
    public static int heif_suberror_No_meta_box() {
        return heif_suberror_No_meta_box;
    }
    private static final int heif_suberror_No_hdlr_box = (int)105L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_hdlr_box = 105
     * }
     */
    public static int heif_suberror_No_hdlr_box() {
        return heif_suberror_No_hdlr_box;
    }
    private static final int heif_suberror_No_hvcC_box = (int)106L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_hvcC_box = 106
     * }
     */
    public static int heif_suberror_No_hvcC_box() {
        return heif_suberror_No_hvcC_box;
    }
    private static final int heif_suberror_No_pitm_box = (int)107L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_pitm_box = 107
     * }
     */
    public static int heif_suberror_No_pitm_box() {
        return heif_suberror_No_pitm_box;
    }
    private static final int heif_suberror_No_ipco_box = (int)108L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_ipco_box = 108
     * }
     */
    public static int heif_suberror_No_ipco_box() {
        return heif_suberror_No_ipco_box;
    }
    private static final int heif_suberror_No_ipma_box = (int)109L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_ipma_box = 109
     * }
     */
    public static int heif_suberror_No_ipma_box() {
        return heif_suberror_No_ipma_box;
    }
    private static final int heif_suberror_No_iloc_box = (int)110L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_iloc_box = 110
     * }
     */
    public static int heif_suberror_No_iloc_box() {
        return heif_suberror_No_iloc_box;
    }
    private static final int heif_suberror_No_iinf_box = (int)111L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_iinf_box = 111
     * }
     */
    public static int heif_suberror_No_iinf_box() {
        return heif_suberror_No_iinf_box;
    }
    private static final int heif_suberror_No_iprp_box = (int)112L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_iprp_box = 112
     * }
     */
    public static int heif_suberror_No_iprp_box() {
        return heif_suberror_No_iprp_box;
    }
    private static final int heif_suberror_No_iref_box = (int)113L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_iref_box = 113
     * }
     */
    public static int heif_suberror_No_iref_box() {
        return heif_suberror_No_iref_box;
    }
    private static final int heif_suberror_No_pict_handler = (int)114L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_pict_handler = 114
     * }
     */
    public static int heif_suberror_No_pict_handler() {
        return heif_suberror_No_pict_handler;
    }
    private static final int heif_suberror_Ipma_box_references_nonexisting_property = (int)115L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Ipma_box_references_nonexisting_property = 115
     * }
     */
    public static int heif_suberror_Ipma_box_references_nonexisting_property() {
        return heif_suberror_Ipma_box_references_nonexisting_property;
    }
    private static final int heif_suberror_No_properties_assigned_to_item = (int)116L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_properties_assigned_to_item = 116
     * }
     */
    public static int heif_suberror_No_properties_assigned_to_item() {
        return heif_suberror_No_properties_assigned_to_item;
    }
    private static final int heif_suberror_No_item_data = (int)117L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_item_data = 117
     * }
     */
    public static int heif_suberror_No_item_data() {
        return heif_suberror_No_item_data;
    }
    private static final int heif_suberror_Invalid_grid_data = (int)118L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_grid_data = 118
     * }
     */
    public static int heif_suberror_Invalid_grid_data() {
        return heif_suberror_Invalid_grid_data;
    }
    private static final int heif_suberror_Missing_grid_images = (int)119L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Missing_grid_images = 119
     * }
     */
    public static int heif_suberror_Missing_grid_images() {
        return heif_suberror_Missing_grid_images;
    }
    private static final int heif_suberror_Invalid_clean_aperture = (int)120L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_clean_aperture = 120
     * }
     */
    public static int heif_suberror_Invalid_clean_aperture() {
        return heif_suberror_Invalid_clean_aperture;
    }
    private static final int heif_suberror_Invalid_overlay_data = (int)121L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_overlay_data = 121
     * }
     */
    public static int heif_suberror_Invalid_overlay_data() {
        return heif_suberror_Invalid_overlay_data;
    }
    private static final int heif_suberror_Overlay_image_outside_of_canvas = (int)122L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Overlay_image_outside_of_canvas = 122
     * }
     */
    public static int heif_suberror_Overlay_image_outside_of_canvas() {
        return heif_suberror_Overlay_image_outside_of_canvas;
    }
    private static final int heif_suberror_Auxiliary_image_type_unspecified = (int)123L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Auxiliary_image_type_unspecified = 123
     * }
     */
    public static int heif_suberror_Auxiliary_image_type_unspecified() {
        return heif_suberror_Auxiliary_image_type_unspecified;
    }
    private static final int heif_suberror_No_or_invalid_primary_item = (int)124L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_or_invalid_primary_item = 124
     * }
     */
    public static int heif_suberror_No_or_invalid_primary_item() {
        return heif_suberror_No_or_invalid_primary_item;
    }
    private static final int heif_suberror_No_infe_box = (int)125L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_infe_box = 125
     * }
     */
    public static int heif_suberror_No_infe_box() {
        return heif_suberror_No_infe_box;
    }
    private static final int heif_suberror_Unknown_color_profile_type = (int)126L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unknown_color_profile_type = 126
     * }
     */
    public static int heif_suberror_Unknown_color_profile_type() {
        return heif_suberror_Unknown_color_profile_type;
    }
    private static final int heif_suberror_Wrong_tile_image_chroma_format = (int)127L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Wrong_tile_image_chroma_format = 127
     * }
     */
    public static int heif_suberror_Wrong_tile_image_chroma_format() {
        return heif_suberror_Wrong_tile_image_chroma_format;
    }
    private static final int heif_suberror_Invalid_fractional_number = (int)128L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_fractional_number = 128
     * }
     */
    public static int heif_suberror_Invalid_fractional_number() {
        return heif_suberror_Invalid_fractional_number;
    }
    private static final int heif_suberror_Invalid_image_size = (int)129L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_image_size = 129
     * }
     */
    public static int heif_suberror_Invalid_image_size() {
        return heif_suberror_Invalid_image_size;
    }
    private static final int heif_suberror_Invalid_pixi_box = (int)130L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_pixi_box = 130
     * }
     */
    public static int heif_suberror_Invalid_pixi_box() {
        return heif_suberror_Invalid_pixi_box;
    }
    private static final int heif_suberror_No_av1C_box = (int)131L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_No_av1C_box = 131
     * }
     */
    public static int heif_suberror_No_av1C_box() {
        return heif_suberror_No_av1C_box;
    }
    private static final int heif_suberror_Wrong_tile_image_pixel_depth = (int)132L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Wrong_tile_image_pixel_depth = 132
     * }
     */
    public static int heif_suberror_Wrong_tile_image_pixel_depth() {
        return heif_suberror_Wrong_tile_image_pixel_depth;
    }
    private static final int heif_suberror_Security_limit_exceeded = (int)1000L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Security_limit_exceeded = 1000
     * }
     */
    public static int heif_suberror_Security_limit_exceeded() {
        return heif_suberror_Security_limit_exceeded;
    }
    private static final int heif_suberror_Nonexisting_item_referenced = (int)2000L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Nonexisting_item_referenced = 2000
     * }
     */
    public static int heif_suberror_Nonexisting_item_referenced() {
        return heif_suberror_Nonexisting_item_referenced;
    }
    private static final int heif_suberror_Null_pointer_argument = (int)2001L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Null_pointer_argument = 2001
     * }
     */
    public static int heif_suberror_Null_pointer_argument() {
        return heif_suberror_Null_pointer_argument;
    }
    private static final int heif_suberror_Nonexisting_image_channel_referenced = (int)2002L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Nonexisting_image_channel_referenced = 2002
     * }
     */
    public static int heif_suberror_Nonexisting_image_channel_referenced() {
        return heif_suberror_Nonexisting_image_channel_referenced;
    }
    private static final int heif_suberror_Unsupported_plugin_version = (int)2003L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_plugin_version = 2003
     * }
     */
    public static int heif_suberror_Unsupported_plugin_version() {
        return heif_suberror_Unsupported_plugin_version;
    }
    private static final int heif_suberror_Unsupported_writer_version = (int)2004L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_writer_version = 2004
     * }
     */
    public static int heif_suberror_Unsupported_writer_version() {
        return heif_suberror_Unsupported_writer_version;
    }
    private static final int heif_suberror_Unsupported_parameter = (int)2005L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_parameter = 2005
     * }
     */
    public static int heif_suberror_Unsupported_parameter() {
        return heif_suberror_Unsupported_parameter;
    }
    private static final int heif_suberror_Invalid_parameter_value = (int)2006L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Invalid_parameter_value = 2006
     * }
     */
    public static int heif_suberror_Invalid_parameter_value() {
        return heif_suberror_Invalid_parameter_value;
    }
    private static final int heif_suberror_Unsupported_codec = (int)3000L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_codec = 3000
     * }
     */
    public static int heif_suberror_Unsupported_codec() {
        return heif_suberror_Unsupported_codec;
    }
    private static final int heif_suberror_Unsupported_image_type = (int)3001L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_image_type = 3001
     * }
     */
    public static int heif_suberror_Unsupported_image_type() {
        return heif_suberror_Unsupported_image_type;
    }
    private static final int heif_suberror_Unsupported_data_version = (int)3002L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_data_version = 3002
     * }
     */
    public static int heif_suberror_Unsupported_data_version() {
        return heif_suberror_Unsupported_data_version;
    }
    private static final int heif_suberror_Unsupported_color_conversion = (int)3003L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_color_conversion = 3003
     * }
     */
    public static int heif_suberror_Unsupported_color_conversion() {
        return heif_suberror_Unsupported_color_conversion;
    }
    private static final int heif_suberror_Unsupported_item_construction_method = (int)3004L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_item_construction_method = 3004
     * }
     */
    public static int heif_suberror_Unsupported_item_construction_method() {
        return heif_suberror_Unsupported_item_construction_method;
    }
    private static final int heif_suberror_Unsupported_bit_depth = (int)4000L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Unsupported_bit_depth = 4000
     * }
     */
    public static int heif_suberror_Unsupported_bit_depth() {
        return heif_suberror_Unsupported_bit_depth;
    }
    private static final int heif_suberror_Cannot_write_output_data = (int)5000L;
    /**
     * {@snippet lang=c :
     * enum heif_suberror_code.heif_suberror_Cannot_write_output_data = 5000
     * }
     */
    public static int heif_suberror_Cannot_write_output_data() {
        return heif_suberror_Cannot_write_output_data;
    }
    /**
     * {@snippet lang=c :
     * typedef uint32_t heif_item_id
     * }
     */
    public static final OfInt heif_item_id = heif_h.C_INT;
    private static final int heif_filetype_no = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_filetype_result.heif_filetype_no = 0
     * }
     */
    public static int heif_filetype_no() {
        return heif_filetype_no;
    }
    private static final int heif_filetype_yes_supported = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_filetype_result.heif_filetype_yes_supported = 1
     * }
     */
    public static int heif_filetype_yes_supported() {
        return heif_filetype_yes_supported;
    }
    private static final int heif_filetype_yes_unsupported = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_filetype_result.heif_filetype_yes_unsupported = 2
     * }
     */
    public static int heif_filetype_yes_unsupported() {
        return heif_filetype_yes_unsupported;
    }
    private static final int heif_filetype_maybe = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_filetype_result.heif_filetype_maybe = 3
     * }
     */
    public static int heif_filetype_maybe() {
        return heif_filetype_maybe;
    }

    private static class heif_check_filetype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_check_filetype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_filetype_result heif_check_filetype(const uint8_t *data, int len)
     * }
     */
    public static FunctionDescriptor heif_check_filetype$descriptor() {
        return heif_check_filetype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_filetype_result heif_check_filetype(const uint8_t *data, int len)
     * }
     */
    public static MethodHandle heif_check_filetype$handle() {
        return heif_check_filetype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_filetype_result heif_check_filetype(const uint8_t *data, int len)
     * }
     */
    public static int heif_check_filetype(MemorySegment data, int len) {
        var mh$ = heif_check_filetype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_check_filetype", data, len);
            }
            return (int)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_unknown_brand = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_unknown_brand = 0
     * }
     */
    public static int heif_unknown_brand() {
        return heif_unknown_brand;
    }
    private static final int heif_heic = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_heic = 1
     * }
     */
    public static int heif_heic() {
        return heif_heic;
    }
    private static final int heif_heix = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_heix = 2
     * }
     */
    public static int heif_heix() {
        return heif_heix;
    }
    private static final int heif_hevc = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_hevc = 3
     * }
     */
    public static int heif_hevc() {
        return heif_hevc;
    }
    private static final int heif_hevx = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_hevx = 4
     * }
     */
    public static int heif_hevx() {
        return heif_hevx;
    }
    private static final int heif_heim = (int)5L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_heim = 5
     * }
     */
    public static int heif_heim() {
        return heif_heim;
    }
    private static final int heif_heis = (int)6L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_heis = 6
     * }
     */
    public static int heif_heis() {
        return heif_heis;
    }
    private static final int heif_hevm = (int)7L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_hevm = 7
     * }
     */
    public static int heif_hevm() {
        return heif_hevm;
    }
    private static final int heif_hevs = (int)8L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_hevs = 8
     * }
     */
    public static int heif_hevs() {
        return heif_hevs;
    }
    private static final int heif_mif1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_mif1 = 9
     * }
     */
    public static int heif_mif1() {
        return heif_mif1;
    }
    private static final int heif_msf1 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_msf1 = 10
     * }
     */
    public static int heif_msf1() {
        return heif_msf1;
    }
    private static final int heif_avif = (int)11L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_avif = 11
     * }
     */
    public static int heif_avif() {
        return heif_avif;
    }
    private static final int heif_avis = (int)12L;
    /**
     * {@snippet lang=c :
     * enum heif_brand.heif_avis = 12
     * }
     */
    public static int heif_avis() {
        return heif_avis;
    }

    private static class heif_main_brand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_main_brand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_brand heif_main_brand(const uint8_t *data, int len)
     * }
     */
    public static FunctionDescriptor heif_main_brand$descriptor() {
        return heif_main_brand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_brand heif_main_brand(const uint8_t *data, int len)
     * }
     */
    public static MethodHandle heif_main_brand$handle() {
        return heif_main_brand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_brand heif_main_brand(const uint8_t *data, int len)
     * }
     */
    public static int heif_main_brand(MemorySegment data, int len) {
        var mh$ = heif_main_brand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_main_brand", data, len);
            }
            return (int)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef uint32_t heif_brand2
     * }
     */
    public static final OfInt heif_brand2 = heif_h.C_INT;

    private static class heif_read_main_brand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_read_main_brand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * heif_brand2 heif_read_main_brand(const uint8_t *data, int len)
     * }
     */
    public static FunctionDescriptor heif_read_main_brand$descriptor() {
        return heif_read_main_brand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * heif_brand2 heif_read_main_brand(const uint8_t *data, int len)
     * }
     */
    public static MethodHandle heif_read_main_brand$handle() {
        return heif_read_main_brand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * heif_brand2 heif_read_main_brand(const uint8_t *data, int len)
     * }
     */
    public static int heif_read_main_brand(MemorySegment data, int len) {
        var mh$ = heif_read_main_brand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_read_main_brand", data, len);
            }
            return (int)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_fourcc_to_brand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_fourcc_to_brand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * heif_brand2 heif_fourcc_to_brand(const char *brand_fourcc)
     * }
     */
    public static FunctionDescriptor heif_fourcc_to_brand$descriptor() {
        return heif_fourcc_to_brand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * heif_brand2 heif_fourcc_to_brand(const char *brand_fourcc)
     * }
     */
    public static MethodHandle heif_fourcc_to_brand$handle() {
        return heif_fourcc_to_brand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * heif_brand2 heif_fourcc_to_brand(const char *brand_fourcc)
     * }
     */
    public static int heif_fourcc_to_brand(MemorySegment brand_fourcc) {
        var mh$ = heif_fourcc_to_brand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_fourcc_to_brand", brand_fourcc);
            }
            return (int)mh$.invokeExact(brand_fourcc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_brand_to_fourcc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_brand_to_fourcc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_brand_to_fourcc(heif_brand2 brand, char *out_fourcc)
     * }
     */
    public static FunctionDescriptor heif_brand_to_fourcc$descriptor() {
        return heif_brand_to_fourcc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_brand_to_fourcc(heif_brand2 brand, char *out_fourcc)
     * }
     */
    public static MethodHandle heif_brand_to_fourcc$handle() {
        return heif_brand_to_fourcc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_brand_to_fourcc(heif_brand2 brand, char *out_fourcc)
     * }
     */
    public static void heif_brand_to_fourcc(int brand, MemorySegment out_fourcc) {
        var mh$ = heif_brand_to_fourcc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_brand_to_fourcc", brand, out_fourcc);
            }
            mh$.invokeExact(brand, out_fourcc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_has_compatible_brand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_has_compatible_brand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_has_compatible_brand(const uint8_t *data, int len, const char *brand_fourcc)
     * }
     */
    public static FunctionDescriptor heif_has_compatible_brand$descriptor() {
        return heif_has_compatible_brand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_has_compatible_brand(const uint8_t *data, int len, const char *brand_fourcc)
     * }
     */
    public static MethodHandle heif_has_compatible_brand$handle() {
        return heif_has_compatible_brand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_has_compatible_brand(const uint8_t *data, int len, const char *brand_fourcc)
     * }
     */
    public static int heif_has_compatible_brand(MemorySegment data, int len, MemorySegment brand_fourcc) {
        var mh$ = heif_has_compatible_brand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_has_compatible_brand", data, len, brand_fourcc);
            }
            return (int)mh$.invokeExact(data, len, brand_fourcc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_list_compatible_brands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_list_compatible_brands"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_list_compatible_brands(const uint8_t *data, int len, heif_brand2 **out_brands, int *out_size)
     * }
     */
    public static FunctionDescriptor heif_list_compatible_brands$descriptor() {
        return heif_list_compatible_brands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_list_compatible_brands(const uint8_t *data, int len, heif_brand2 **out_brands, int *out_size)
     * }
     */
    public static MethodHandle heif_list_compatible_brands$handle() {
        return heif_list_compatible_brands.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_list_compatible_brands(const uint8_t *data, int len, heif_brand2 **out_brands, int *out_size)
     * }
     */
    public static MemorySegment heif_list_compatible_brands(SegmentAllocator allocator, MemorySegment data, int len, MemorySegment out_brands, MemorySegment out_size) {
        var mh$ = heif_list_compatible_brands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_list_compatible_brands", allocator, data, len, out_brands, out_size);
            }
            return (MemorySegment)mh$.invokeExact(allocator, data, len, out_brands, out_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_free_list_of_compatible_brands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_free_list_of_compatible_brands"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_free_list_of_compatible_brands(heif_brand2 *brands_list)
     * }
     */
    public static FunctionDescriptor heif_free_list_of_compatible_brands$descriptor() {
        return heif_free_list_of_compatible_brands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_free_list_of_compatible_brands(heif_brand2 *brands_list)
     * }
     */
    public static MethodHandle heif_free_list_of_compatible_brands$handle() {
        return heif_free_list_of_compatible_brands.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_free_list_of_compatible_brands(heif_brand2 *brands_list)
     * }
     */
    public static void heif_free_list_of_compatible_brands(MemorySegment brands_list) {
        var mh$ = heif_free_list_of_compatible_brands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_free_list_of_compatible_brands", brands_list);
            }
            mh$.invokeExact(brands_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_get_file_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_get_file_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_get_file_mime_type(const uint8_t *data, int len)
     * }
     */
    public static FunctionDescriptor heif_get_file_mime_type$descriptor() {
        return heif_get_file_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_get_file_mime_type(const uint8_t *data, int len)
     * }
     */
    public static MethodHandle heif_get_file_mime_type$handle() {
        return heif_get_file_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_get_file_mime_type(const uint8_t *data, int len)
     * }
     */
    public static MemorySegment heif_get_file_mime_type(MemorySegment data, int len) {
        var mh$ = heif_get_file_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_get_file_mime_type", data, len);
            }
            return (MemorySegment)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_context *heif_context_alloc()
     * }
     */
    public static FunctionDescriptor heif_context_alloc$descriptor() {
        return heif_context_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_context *heif_context_alloc()
     * }
     */
    public static MethodHandle heif_context_alloc$handle() {
        return heif_context_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_context *heif_context_alloc()
     * }
     */
    public static MemorySegment heif_context_alloc() {
        var mh$ = heif_context_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_alloc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_context_free(struct heif_context *)
     * }
     */
    public static FunctionDescriptor heif_context_free$descriptor() {
        return heif_context_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_context_free(struct heif_context *)
     * }
     */
    public static MethodHandle heif_context_free$handle() {
        return heif_context_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_context_free(struct heif_context *)
     * }
     */
    public static void heif_context_free(MemorySegment x0) {
        var mh$ = heif_context_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_reader_grow_status_size_reached = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_reader_grow_status.heif_reader_grow_status_size_reached = 0
     * }
     */
    public static int heif_reader_grow_status_size_reached() {
        return heif_reader_grow_status_size_reached;
    }
    private static final int heif_reader_grow_status_timeout = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_reader_grow_status.heif_reader_grow_status_timeout = 1
     * }
     */
    public static int heif_reader_grow_status_timeout() {
        return heif_reader_grow_status_timeout;
    }
    private static final int heif_reader_grow_status_size_beyond_eof = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_reader_grow_status.heif_reader_grow_status_size_beyond_eof = 2
     * }
     */
    public static int heif_reader_grow_status_size_beyond_eof() {
        return heif_reader_grow_status_size_beyond_eof;
    }

    private static class heif_context_read_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_read_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_file(struct heif_context *, const char *filename, const struct heif_reading_options *)
     * }
     */
    public static FunctionDescriptor heif_context_read_from_file$descriptor() {
        return heif_context_read_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_file(struct heif_context *, const char *filename, const struct heif_reading_options *)
     * }
     */
    public static MethodHandle heif_context_read_from_file$handle() {
        return heif_context_read_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_file(struct heif_context *, const char *filename, const struct heif_reading_options *)
     * }
     */
    public static MemorySegment heif_context_read_from_file(SegmentAllocator allocator, MemorySegment x0, MemorySegment filename, MemorySegment x2) {
        var mh$ = heif_context_read_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_read_from_file", allocator, x0, filename, x2);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, filename, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_read_from_memory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_read_from_memory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_memory(struct heif_context *, const void *mem, size_t size, const struct heif_reading_options *)
     * }
     */
    public static FunctionDescriptor heif_context_read_from_memory$descriptor() {
        return heif_context_read_from_memory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_memory(struct heif_context *, const void *mem, size_t size, const struct heif_reading_options *)
     * }
     */
    public static MethodHandle heif_context_read_from_memory$handle() {
        return heif_context_read_from_memory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_memory(struct heif_context *, const void *mem, size_t size, const struct heif_reading_options *)
     * }
     */
    public static MemorySegment heif_context_read_from_memory(SegmentAllocator allocator, MemorySegment x0, MemorySegment mem, long size, MemorySegment x3) {
        var mh$ = heif_context_read_from_memory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_read_from_memory", allocator, x0, mem, size, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, mem, size, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_read_from_memory_without_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_read_from_memory_without_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_memory_without_copy(struct heif_context *, const void *mem, size_t size, const struct heif_reading_options *)
     * }
     */
    public static FunctionDescriptor heif_context_read_from_memory_without_copy$descriptor() {
        return heif_context_read_from_memory_without_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_memory_without_copy(struct heif_context *, const void *mem, size_t size, const struct heif_reading_options *)
     * }
     */
    public static MethodHandle heif_context_read_from_memory_without_copy$handle() {
        return heif_context_read_from_memory_without_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_memory_without_copy(struct heif_context *, const void *mem, size_t size, const struct heif_reading_options *)
     * }
     */
    public static MemorySegment heif_context_read_from_memory_without_copy(SegmentAllocator allocator, MemorySegment x0, MemorySegment mem, long size, MemorySegment x3) {
        var mh$ = heif_context_read_from_memory_without_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_read_from_memory_without_copy", allocator, x0, mem, size, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, mem, size, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_read_from_reader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_read_from_reader"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_reader(struct heif_context *, const struct heif_reader *reader, void *userdata, const struct heif_reading_options *)
     * }
     */
    public static FunctionDescriptor heif_context_read_from_reader$descriptor() {
        return heif_context_read_from_reader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_reader(struct heif_context *, const struct heif_reader *reader, void *userdata, const struct heif_reading_options *)
     * }
     */
    public static MethodHandle heif_context_read_from_reader$handle() {
        return heif_context_read_from_reader.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_read_from_reader(struct heif_context *, const struct heif_reader *reader, void *userdata, const struct heif_reading_options *)
     * }
     */
    public static MemorySegment heif_context_read_from_reader(SegmentAllocator allocator, MemorySegment x0, MemorySegment reader, MemorySegment userdata, MemorySegment x3) {
        var mh$ = heif_context_read_from_reader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_read_from_reader", allocator, x0, reader, userdata, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, reader, userdata, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_number_of_top_level_images {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_number_of_top_level_images"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_context_get_number_of_top_level_images(struct heif_context *ctx)
     * }
     */
    public static FunctionDescriptor heif_context_get_number_of_top_level_images$descriptor() {
        return heif_context_get_number_of_top_level_images.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_context_get_number_of_top_level_images(struct heif_context *ctx)
     * }
     */
    public static MethodHandle heif_context_get_number_of_top_level_images$handle() {
        return heif_context_get_number_of_top_level_images.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_context_get_number_of_top_level_images(struct heif_context *ctx)
     * }
     */
    public static int heif_context_get_number_of_top_level_images(MemorySegment ctx) {
        var mh$ = heif_context_get_number_of_top_level_images.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_number_of_top_level_images", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_is_top_level_image_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_is_top_level_image_ID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_context_is_top_level_image_ID(struct heif_context *ctx, heif_item_id id)
     * }
     */
    public static FunctionDescriptor heif_context_is_top_level_image_ID$descriptor() {
        return heif_context_is_top_level_image_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_context_is_top_level_image_ID(struct heif_context *ctx, heif_item_id id)
     * }
     */
    public static MethodHandle heif_context_is_top_level_image_ID$handle() {
        return heif_context_is_top_level_image_ID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_context_is_top_level_image_ID(struct heif_context *ctx, heif_item_id id)
     * }
     */
    public static int heif_context_is_top_level_image_ID(MemorySegment ctx, int id) {
        var mh$ = heif_context_is_top_level_image_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_is_top_level_image_ID", ctx, id);
            }
            return (int)mh$.invokeExact(ctx, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_list_of_top_level_image_IDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_list_of_top_level_image_IDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_context_get_list_of_top_level_image_IDs(struct heif_context *ctx, heif_item_id *ID_array, int count)
     * }
     */
    public static FunctionDescriptor heif_context_get_list_of_top_level_image_IDs$descriptor() {
        return heif_context_get_list_of_top_level_image_IDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_context_get_list_of_top_level_image_IDs(struct heif_context *ctx, heif_item_id *ID_array, int count)
     * }
     */
    public static MethodHandle heif_context_get_list_of_top_level_image_IDs$handle() {
        return heif_context_get_list_of_top_level_image_IDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_context_get_list_of_top_level_image_IDs(struct heif_context *ctx, heif_item_id *ID_array, int count)
     * }
     */
    public static int heif_context_get_list_of_top_level_image_IDs(MemorySegment ctx, MemorySegment ID_array, int count) {
        var mh$ = heif_context_get_list_of_top_level_image_IDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_list_of_top_level_image_IDs", ctx, ID_array, count);
            }
            return (int)mh$.invokeExact(ctx, ID_array, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_primary_image_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_primary_image_ID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_primary_image_ID(struct heif_context *ctx, heif_item_id *id)
     * }
     */
    public static FunctionDescriptor heif_context_get_primary_image_ID$descriptor() {
        return heif_context_get_primary_image_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_primary_image_ID(struct heif_context *ctx, heif_item_id *id)
     * }
     */
    public static MethodHandle heif_context_get_primary_image_ID$handle() {
        return heif_context_get_primary_image_ID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_get_primary_image_ID(struct heif_context *ctx, heif_item_id *id)
     * }
     */
    public static MemorySegment heif_context_get_primary_image_ID(SegmentAllocator allocator, MemorySegment ctx, MemorySegment id) {
        var mh$ = heif_context_get_primary_image_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_primary_image_ID", allocator, ctx, id);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ctx, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_primary_image_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_primary_image_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_primary_image_handle(struct heif_context *ctx, struct heif_image_handle **)
     * }
     */
    public static FunctionDescriptor heif_context_get_primary_image_handle$descriptor() {
        return heif_context_get_primary_image_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_primary_image_handle(struct heif_context *ctx, struct heif_image_handle **)
     * }
     */
    public static MethodHandle heif_context_get_primary_image_handle$handle() {
        return heif_context_get_primary_image_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_get_primary_image_handle(struct heif_context *ctx, struct heif_image_handle **)
     * }
     */
    public static MemorySegment heif_context_get_primary_image_handle(SegmentAllocator allocator, MemorySegment ctx, MemorySegment x1) {
        var mh$ = heif_context_get_primary_image_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_primary_image_handle", allocator, ctx, x1);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ctx, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_primary_image_handle_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_primary_image_handle_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_image_handle *heif_context_get_primary_image_handle_alloc(struct heif_context *ctx)
     * }
     */
    public static FunctionDescriptor heif_context_get_primary_image_handle_alloc$descriptor() {
        return heif_context_get_primary_image_handle_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_image_handle *heif_context_get_primary_image_handle_alloc(struct heif_context *ctx)
     * }
     */
    public static MethodHandle heif_context_get_primary_image_handle_alloc$handle() {
        return heif_context_get_primary_image_handle_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_image_handle *heif_context_get_primary_image_handle_alloc(struct heif_context *ctx)
     * }
     */
    public static MemorySegment heif_context_get_primary_image_handle_alloc(MemorySegment ctx) {
        var mh$ = heif_context_get_primary_image_handle_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_primary_image_handle_alloc", ctx);
            }
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_image_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_image_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_image_handle(struct heif_context *ctx, heif_item_id id, struct heif_image_handle **)
     * }
     */
    public static FunctionDescriptor heif_context_get_image_handle$descriptor() {
        return heif_context_get_image_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_image_handle(struct heif_context *ctx, heif_item_id id, struct heif_image_handle **)
     * }
     */
    public static MethodHandle heif_context_get_image_handle$handle() {
        return heif_context_get_image_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_get_image_handle(struct heif_context *ctx, heif_item_id id, struct heif_image_handle **)
     * }
     */
    public static MemorySegment heif_context_get_image_handle(SegmentAllocator allocator, MemorySegment ctx, int id, MemorySegment x2) {
        var mh$ = heif_context_get_image_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_image_handle", allocator, ctx, id, x2);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ctx, id, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_debug_dump_boxes_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_debug_dump_boxes_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_context_debug_dump_boxes_to_file(struct heif_context *ctx, int fd)
     * }
     */
    public static FunctionDescriptor heif_context_debug_dump_boxes_to_file$descriptor() {
        return heif_context_debug_dump_boxes_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_context_debug_dump_boxes_to_file(struct heif_context *ctx, int fd)
     * }
     */
    public static MethodHandle heif_context_debug_dump_boxes_to_file$handle() {
        return heif_context_debug_dump_boxes_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_context_debug_dump_boxes_to_file(struct heif_context *ctx, int fd)
     * }
     */
    public static void heif_context_debug_dump_boxes_to_file(MemorySegment ctx, int fd) {
        var mh$ = heif_context_debug_dump_boxes_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_debug_dump_boxes_to_file", ctx, fd);
            }
            mh$.invokeExact(ctx, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_set_maximum_image_size_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_set_maximum_image_size_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_context_set_maximum_image_size_limit(struct heif_context *ctx, int maximum_width)
     * }
     */
    public static FunctionDescriptor heif_context_set_maximum_image_size_limit$descriptor() {
        return heif_context_set_maximum_image_size_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_context_set_maximum_image_size_limit(struct heif_context *ctx, int maximum_width)
     * }
     */
    public static MethodHandle heif_context_set_maximum_image_size_limit$handle() {
        return heif_context_set_maximum_image_size_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_context_set_maximum_image_size_limit(struct heif_context *ctx, int maximum_width)
     * }
     */
    public static void heif_context_set_maximum_image_size_limit(MemorySegment ctx, int maximum_width) {
        var mh$ = heif_context_set_maximum_image_size_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_set_maximum_image_size_limit", ctx, maximum_width);
            }
            mh$.invokeExact(ctx, maximum_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_set_max_decoding_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_set_max_decoding_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_context_set_max_decoding_threads(struct heif_context *ctx, int max_threads)
     * }
     */
    public static FunctionDescriptor heif_context_set_max_decoding_threads$descriptor() {
        return heif_context_set_max_decoding_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_context_set_max_decoding_threads(struct heif_context *ctx, int max_threads)
     * }
     */
    public static MethodHandle heif_context_set_max_decoding_threads$handle() {
        return heif_context_set_max_decoding_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_context_set_max_decoding_threads(struct heif_context *ctx, int max_threads)
     * }
     */
    public static void heif_context_set_max_decoding_threads(MemorySegment ctx, int max_threads) {
        var mh$ = heif_context_set_max_decoding_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_set_max_decoding_threads", ctx, max_threads);
            }
            mh$.invokeExact(ctx, max_threads);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_image_handle_release(const struct heif_image_handle *)
     * }
     */
    public static FunctionDescriptor heif_image_handle_release$descriptor() {
        return heif_image_handle_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_image_handle_release(const struct heif_image_handle *)
     * }
     */
    public static MethodHandle heif_image_handle_release$handle() {
        return heif_image_handle_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_image_handle_release(const struct heif_image_handle *)
     * }
     */
    public static void heif_image_handle_release(MemorySegment x0) {
        var mh$ = heif_image_handle_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_release", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_is_primary_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_is_primary_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_is_primary_image(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_is_primary_image$descriptor() {
        return heif_image_handle_is_primary_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_is_primary_image(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_is_primary_image$handle() {
        return heif_image_handle_is_primary_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_is_primary_image(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_is_primary_image(MemorySegment handle) {
        var mh$ = heif_image_handle_is_primary_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_is_primary_image", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_width(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_width$descriptor() {
        return heif_image_handle_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_width(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_width$handle() {
        return heif_image_handle_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_width(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_width(MemorySegment handle) {
        var mh$ = heif_image_handle_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_width", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_height(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_height$descriptor() {
        return heif_image_handle_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_height(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_height$handle() {
        return heif_image_handle_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_height(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_height(MemorySegment handle) {
        var mh$ = heif_image_handle_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_height", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_has_alpha_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_has_alpha_channel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_has_alpha_channel(const struct heif_image_handle *)
     * }
     */
    public static FunctionDescriptor heif_image_handle_has_alpha_channel$descriptor() {
        return heif_image_handle_has_alpha_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_has_alpha_channel(const struct heif_image_handle *)
     * }
     */
    public static MethodHandle heif_image_handle_has_alpha_channel$handle() {
        return heif_image_handle_has_alpha_channel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_has_alpha_channel(const struct heif_image_handle *)
     * }
     */
    public static int heif_image_handle_has_alpha_channel(MemorySegment x0) {
        var mh$ = heif_image_handle_has_alpha_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_has_alpha_channel", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_is_premultiplied_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_is_premultiplied_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_is_premultiplied_alpha(const struct heif_image_handle *)
     * }
     */
    public static FunctionDescriptor heif_image_handle_is_premultiplied_alpha$descriptor() {
        return heif_image_handle_is_premultiplied_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_is_premultiplied_alpha(const struct heif_image_handle *)
     * }
     */
    public static MethodHandle heif_image_handle_is_premultiplied_alpha$handle() {
        return heif_image_handle_is_premultiplied_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_is_premultiplied_alpha(const struct heif_image_handle *)
     * }
     */
    public static int heif_image_handle_is_premultiplied_alpha(MemorySegment x0) {
        var mh$ = heif_image_handle_is_premultiplied_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_is_premultiplied_alpha", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_luma_bits_per_pixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_luma_bits_per_pixel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_luma_bits_per_pixel(const struct heif_image_handle *)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_luma_bits_per_pixel$descriptor() {
        return heif_image_handle_get_luma_bits_per_pixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_luma_bits_per_pixel(const struct heif_image_handle *)
     * }
     */
    public static MethodHandle heif_image_handle_get_luma_bits_per_pixel$handle() {
        return heif_image_handle_get_luma_bits_per_pixel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_luma_bits_per_pixel(const struct heif_image_handle *)
     * }
     */
    public static int heif_image_handle_get_luma_bits_per_pixel(MemorySegment x0) {
        var mh$ = heif_image_handle_get_luma_bits_per_pixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_luma_bits_per_pixel", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_chroma_bits_per_pixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_chroma_bits_per_pixel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_chroma_bits_per_pixel(const struct heif_image_handle *)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_chroma_bits_per_pixel$descriptor() {
        return heif_image_handle_get_chroma_bits_per_pixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_chroma_bits_per_pixel(const struct heif_image_handle *)
     * }
     */
    public static MethodHandle heif_image_handle_get_chroma_bits_per_pixel$handle() {
        return heif_image_handle_get_chroma_bits_per_pixel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_chroma_bits_per_pixel(const struct heif_image_handle *)
     * }
     */
    public static int heif_image_handle_get_chroma_bits_per_pixel(MemorySegment x0) {
        var mh$ = heif_image_handle_get_chroma_bits_per_pixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_chroma_bits_per_pixel", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_ispe_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_ispe_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_ispe_width(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_ispe_width$descriptor() {
        return heif_image_handle_get_ispe_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_ispe_width(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_ispe_width$handle() {
        return heif_image_handle_get_ispe_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_ispe_width(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_ispe_width(MemorySegment handle) {
        var mh$ = heif_image_handle_get_ispe_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_ispe_width", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_ispe_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_ispe_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_ispe_height(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_ispe_height$descriptor() {
        return heif_image_handle_get_ispe_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_ispe_height(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_ispe_height$handle() {
        return heif_image_handle_get_ispe_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_ispe_height(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_ispe_height(MemorySegment handle) {
        var mh$ = heif_image_handle_get_ispe_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_ispe_height", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_has_depth_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_has_depth_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_has_depth_image(const struct heif_image_handle *)
     * }
     */
    public static FunctionDescriptor heif_image_handle_has_depth_image$descriptor() {
        return heif_image_handle_has_depth_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_has_depth_image(const struct heif_image_handle *)
     * }
     */
    public static MethodHandle heif_image_handle_has_depth_image$handle() {
        return heif_image_handle_has_depth_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_has_depth_image(const struct heif_image_handle *)
     * }
     */
    public static int heif_image_handle_has_depth_image(MemorySegment x0) {
        var mh$ = heif_image_handle_has_depth_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_has_depth_image", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_number_of_depth_images {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_number_of_depth_images"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_depth_images(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_number_of_depth_images$descriptor() {
        return heif_image_handle_get_number_of_depth_images.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_depth_images(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_number_of_depth_images$handle() {
        return heif_image_handle_get_number_of_depth_images.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_depth_images(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_number_of_depth_images(MemorySegment handle) {
        var mh$ = heif_image_handle_get_number_of_depth_images.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_number_of_depth_images", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_list_of_depth_image_IDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_list_of_depth_image_IDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_depth_image_IDs(const struct heif_image_handle *handle, heif_item_id *ids, int count)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_list_of_depth_image_IDs$descriptor() {
        return heif_image_handle_get_list_of_depth_image_IDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_depth_image_IDs(const struct heif_image_handle *handle, heif_item_id *ids, int count)
     * }
     */
    public static MethodHandle heif_image_handle_get_list_of_depth_image_IDs$handle() {
        return heif_image_handle_get_list_of_depth_image_IDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_depth_image_IDs(const struct heif_image_handle *handle, heif_item_id *ids, int count)
     * }
     */
    public static int heif_image_handle_get_list_of_depth_image_IDs(MemorySegment handle, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_depth_image_IDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_list_of_depth_image_IDs", handle, ids, count);
            }
            return (int)mh$.invokeExact(handle, ids, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_depth_image_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_depth_image_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_depth_image_handle(const struct heif_image_handle *handle, heif_item_id depth_image_id, struct heif_image_handle **out_depth_handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_depth_image_handle$descriptor() {
        return heif_image_handle_get_depth_image_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_depth_image_handle(const struct heif_image_handle *handle, heif_item_id depth_image_id, struct heif_image_handle **out_depth_handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_depth_image_handle$handle() {
        return heif_image_handle_get_depth_image_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_depth_image_handle(const struct heif_image_handle *handle, heif_item_id depth_image_id, struct heif_image_handle **out_depth_handle)
     * }
     */
    public static MemorySegment heif_image_handle_get_depth_image_handle(SegmentAllocator allocator, MemorySegment handle, int depth_image_id, MemorySegment out_depth_handle) {
        var mh$ = heif_image_handle_get_depth_image_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_depth_image_handle", allocator, handle, depth_image_id, out_depth_handle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, handle, depth_image_id, out_depth_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_depth_representation_type_uniform_inverse_Z = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_depth_representation_type.heif_depth_representation_type_uniform_inverse_Z = 0
     * }
     */
    public static int heif_depth_representation_type_uniform_inverse_Z() {
        return heif_depth_representation_type_uniform_inverse_Z;
    }
    private static final int heif_depth_representation_type_uniform_disparity = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_depth_representation_type.heif_depth_representation_type_uniform_disparity = 1
     * }
     */
    public static int heif_depth_representation_type_uniform_disparity() {
        return heif_depth_representation_type_uniform_disparity;
    }
    private static final int heif_depth_representation_type_uniform_Z = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_depth_representation_type.heif_depth_representation_type_uniform_Z = 2
     * }
     */
    public static int heif_depth_representation_type_uniform_Z() {
        return heif_depth_representation_type_uniform_Z;
    }
    private static final int heif_depth_representation_type_nonuniform_disparity = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_depth_representation_type.heif_depth_representation_type_nonuniform_disparity = 3
     * }
     */
    public static int heif_depth_representation_type_nonuniform_disparity() {
        return heif_depth_representation_type_nonuniform_disparity;
    }

    private static class heif_depth_representation_info_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_depth_representation_info_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_depth_representation_info_free(const struct heif_depth_representation_info *info)
     * }
     */
    public static FunctionDescriptor heif_depth_representation_info_free$descriptor() {
        return heif_depth_representation_info_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_depth_representation_info_free(const struct heif_depth_representation_info *info)
     * }
     */
    public static MethodHandle heif_depth_representation_info_free$handle() {
        return heif_depth_representation_info_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_depth_representation_info_free(const struct heif_depth_representation_info *info)
     * }
     */
    public static void heif_depth_representation_info_free(MemorySegment info) {
        var mh$ = heif_depth_representation_info_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_depth_representation_info_free", info);
            }
            mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_depth_image_representation_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_depth_image_representation_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_depth_image_representation_info(const struct heif_image_handle *handle, heif_item_id depth_image_id, const struct heif_depth_representation_info **out)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_depth_image_representation_info$descriptor() {
        return heif_image_handle_get_depth_image_representation_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_depth_image_representation_info(const struct heif_image_handle *handle, heif_item_id depth_image_id, const struct heif_depth_representation_info **out)
     * }
     */
    public static MethodHandle heif_image_handle_get_depth_image_representation_info$handle() {
        return heif_image_handle_get_depth_image_representation_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_depth_image_representation_info(const struct heif_image_handle *handle, heif_item_id depth_image_id, const struct heif_depth_representation_info **out)
     * }
     */
    public static int heif_image_handle_get_depth_image_representation_info(MemorySegment handle, int depth_image_id, MemorySegment out) {
        var mh$ = heif_image_handle_get_depth_image_representation_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_depth_image_representation_info", handle, depth_image_id, out);
            }
            return (int)mh$.invokeExact(handle, depth_image_id, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_number_of_thumbnails {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_number_of_thumbnails"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_thumbnails(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_number_of_thumbnails$descriptor() {
        return heif_image_handle_get_number_of_thumbnails.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_thumbnails(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_number_of_thumbnails$handle() {
        return heif_image_handle_get_number_of_thumbnails.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_thumbnails(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_number_of_thumbnails(MemorySegment handle) {
        var mh$ = heif_image_handle_get_number_of_thumbnails.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_number_of_thumbnails", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_list_of_thumbnail_IDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_list_of_thumbnail_IDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_thumbnail_IDs(const struct heif_image_handle *handle, heif_item_id *ids, int count)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_list_of_thumbnail_IDs$descriptor() {
        return heif_image_handle_get_list_of_thumbnail_IDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_thumbnail_IDs(const struct heif_image_handle *handle, heif_item_id *ids, int count)
     * }
     */
    public static MethodHandle heif_image_handle_get_list_of_thumbnail_IDs$handle() {
        return heif_image_handle_get_list_of_thumbnail_IDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_thumbnail_IDs(const struct heif_image_handle *handle, heif_item_id *ids, int count)
     * }
     */
    public static int heif_image_handle_get_list_of_thumbnail_IDs(MemorySegment handle, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_thumbnail_IDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_list_of_thumbnail_IDs", handle, ids, count);
            }
            return (int)mh$.invokeExact(handle, ids, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_thumbnail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_thumbnail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_thumbnail(const struct heif_image_handle *main_image_handle, heif_item_id thumbnail_id, struct heif_image_handle **out_thumbnail_handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_thumbnail$descriptor() {
        return heif_image_handle_get_thumbnail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_thumbnail(const struct heif_image_handle *main_image_handle, heif_item_id thumbnail_id, struct heif_image_handle **out_thumbnail_handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_thumbnail$handle() {
        return heif_image_handle_get_thumbnail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_thumbnail(const struct heif_image_handle *main_image_handle, heif_item_id thumbnail_id, struct heif_image_handle **out_thumbnail_handle)
     * }
     */
    public static MemorySegment heif_image_handle_get_thumbnail(SegmentAllocator allocator, MemorySegment main_image_handle, int thumbnail_id, MemorySegment out_thumbnail_handle) {
        var mh$ = heif_image_handle_get_thumbnail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_thumbnail", allocator, main_image_handle, thumbnail_id, out_thumbnail_handle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, main_image_handle, thumbnail_id, out_thumbnail_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_number_of_auxiliary_images {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_number_of_auxiliary_images"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_auxiliary_images(const struct heif_image_handle *handle, int aux_filter)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_number_of_auxiliary_images$descriptor() {
        return heif_image_handle_get_number_of_auxiliary_images.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_auxiliary_images(const struct heif_image_handle *handle, int aux_filter)
     * }
     */
    public static MethodHandle heif_image_handle_get_number_of_auxiliary_images$handle() {
        return heif_image_handle_get_number_of_auxiliary_images.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_auxiliary_images(const struct heif_image_handle *handle, int aux_filter)
     * }
     */
    public static int heif_image_handle_get_number_of_auxiliary_images(MemorySegment handle, int aux_filter) {
        var mh$ = heif_image_handle_get_number_of_auxiliary_images.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_number_of_auxiliary_images", handle, aux_filter);
            }
            return (int)mh$.invokeExact(handle, aux_filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_list_of_auxiliary_image_IDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_list_of_auxiliary_image_IDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_auxiliary_image_IDs(const struct heif_image_handle *handle, int aux_filter, heif_item_id *ids, int count)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_list_of_auxiliary_image_IDs$descriptor() {
        return heif_image_handle_get_list_of_auxiliary_image_IDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_auxiliary_image_IDs(const struct heif_image_handle *handle, int aux_filter, heif_item_id *ids, int count)
     * }
     */
    public static MethodHandle heif_image_handle_get_list_of_auxiliary_image_IDs$handle() {
        return heif_image_handle_get_list_of_auxiliary_image_IDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_auxiliary_image_IDs(const struct heif_image_handle *handle, int aux_filter, heif_item_id *ids, int count)
     * }
     */
    public static int heif_image_handle_get_list_of_auxiliary_image_IDs(MemorySegment handle, int aux_filter, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_auxiliary_image_IDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_list_of_auxiliary_image_IDs", handle, aux_filter, ids, count);
            }
            return (int)mh$.invokeExact(handle, aux_filter, ids, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_auxiliary_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_auxiliary_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_auxiliary_type(const struct heif_image_handle *handle, const char **out_type)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_auxiliary_type$descriptor() {
        return heif_image_handle_get_auxiliary_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_auxiliary_type(const struct heif_image_handle *handle, const char **out_type)
     * }
     */
    public static MethodHandle heif_image_handle_get_auxiliary_type$handle() {
        return heif_image_handle_get_auxiliary_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_auxiliary_type(const struct heif_image_handle *handle, const char **out_type)
     * }
     */
    public static MemorySegment heif_image_handle_get_auxiliary_type(SegmentAllocator allocator, MemorySegment handle, MemorySegment out_type) {
        var mh$ = heif_image_handle_get_auxiliary_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_auxiliary_type", allocator, handle, out_type);
            }
            return (MemorySegment)mh$.invokeExact(allocator, handle, out_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_free_auxiliary_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_free_auxiliary_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_image_handle_free_auxiliary_types(const struct heif_image_handle *handle, const char **out_type)
     * }
     */
    public static FunctionDescriptor heif_image_handle_free_auxiliary_types$descriptor() {
        return heif_image_handle_free_auxiliary_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_image_handle_free_auxiliary_types(const struct heif_image_handle *handle, const char **out_type)
     * }
     */
    public static MethodHandle heif_image_handle_free_auxiliary_types$handle() {
        return heif_image_handle_free_auxiliary_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_image_handle_free_auxiliary_types(const struct heif_image_handle *handle, const char **out_type)
     * }
     */
    public static void heif_image_handle_free_auxiliary_types(MemorySegment handle, MemorySegment out_type) {
        var mh$ = heif_image_handle_free_auxiliary_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_free_auxiliary_types", handle, out_type);
            }
            mh$.invokeExact(handle, out_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_auxiliary_image_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_auxiliary_image_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_auxiliary_image_handle(const struct heif_image_handle *main_image_handle, heif_item_id auxiliary_id, struct heif_image_handle **out_auxiliary_handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_auxiliary_image_handle$descriptor() {
        return heif_image_handle_get_auxiliary_image_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_auxiliary_image_handle(const struct heif_image_handle *main_image_handle, heif_item_id auxiliary_id, struct heif_image_handle **out_auxiliary_handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_auxiliary_image_handle$handle() {
        return heif_image_handle_get_auxiliary_image_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_auxiliary_image_handle(const struct heif_image_handle *main_image_handle, heif_item_id auxiliary_id, struct heif_image_handle **out_auxiliary_handle)
     * }
     */
    public static MemorySegment heif_image_handle_get_auxiliary_image_handle(SegmentAllocator allocator, MemorySegment main_image_handle, int auxiliary_id, MemorySegment out_auxiliary_handle) {
        var mh$ = heif_image_handle_get_auxiliary_image_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_auxiliary_image_handle", allocator, main_image_handle, auxiliary_id, out_auxiliary_handle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, main_image_handle, auxiliary_id, out_auxiliary_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_number_of_metadata_blocks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_number_of_metadata_blocks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_metadata_blocks(const struct heif_image_handle *handle, const char *type_filter)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_number_of_metadata_blocks$descriptor() {
        return heif_image_handle_get_number_of_metadata_blocks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_metadata_blocks(const struct heif_image_handle *handle, const char *type_filter)
     * }
     */
    public static MethodHandle heif_image_handle_get_number_of_metadata_blocks$handle() {
        return heif_image_handle_get_number_of_metadata_blocks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_number_of_metadata_blocks(const struct heif_image_handle *handle, const char *type_filter)
     * }
     */
    public static int heif_image_handle_get_number_of_metadata_blocks(MemorySegment handle, MemorySegment type_filter) {
        var mh$ = heif_image_handle_get_number_of_metadata_blocks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_number_of_metadata_blocks", handle, type_filter);
            }
            return (int)mh$.invokeExact(handle, type_filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_list_of_metadata_block_IDs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_list_of_metadata_block_IDs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_metadata_block_IDs(const struct heif_image_handle *handle, const char *type_filter, heif_item_id *ids, int count)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_list_of_metadata_block_IDs$descriptor() {
        return heif_image_handle_get_list_of_metadata_block_IDs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_metadata_block_IDs(const struct heif_image_handle *handle, const char *type_filter, heif_item_id *ids, int count)
     * }
     */
    public static MethodHandle heif_image_handle_get_list_of_metadata_block_IDs$handle() {
        return heif_image_handle_get_list_of_metadata_block_IDs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_handle_get_list_of_metadata_block_IDs(const struct heif_image_handle *handle, const char *type_filter, heif_item_id *ids, int count)
     * }
     */
    public static int heif_image_handle_get_list_of_metadata_block_IDs(MemorySegment handle, MemorySegment type_filter, MemorySegment ids, int count) {
        var mh$ = heif_image_handle_get_list_of_metadata_block_IDs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_list_of_metadata_block_IDs", handle, type_filter, ids, count);
            }
            return (int)mh$.invokeExact(handle, type_filter, ids, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_metadata_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_metadata_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_image_handle_get_metadata_type(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_metadata_type$descriptor() {
        return heif_image_handle_get_metadata_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_image_handle_get_metadata_type(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static MethodHandle heif_image_handle_get_metadata_type$handle() {
        return heif_image_handle_get_metadata_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_image_handle_get_metadata_type(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static MemorySegment heif_image_handle_get_metadata_type(MemorySegment handle, int metadata_id) {
        var mh$ = heif_image_handle_get_metadata_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_metadata_type", handle, metadata_id);
            }
            return (MemorySegment)mh$.invokeExact(handle, metadata_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_metadata_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_metadata_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_image_handle_get_metadata_content_type(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_metadata_content_type$descriptor() {
        return heif_image_handle_get_metadata_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_image_handle_get_metadata_content_type(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static MethodHandle heif_image_handle_get_metadata_content_type$handle() {
        return heif_image_handle_get_metadata_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_image_handle_get_metadata_content_type(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static MemorySegment heif_image_handle_get_metadata_content_type(MemorySegment handle, int metadata_id) {
        var mh$ = heif_image_handle_get_metadata_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_metadata_content_type", handle, metadata_id);
            }
            return (MemorySegment)mh$.invokeExact(handle, metadata_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_metadata_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_metadata_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t heif_image_handle_get_metadata_size(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_metadata_size$descriptor() {
        return heif_image_handle_get_metadata_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t heif_image_handle_get_metadata_size(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static MethodHandle heif_image_handle_get_metadata_size$handle() {
        return heif_image_handle_get_metadata_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t heif_image_handle_get_metadata_size(const struct heif_image_handle *handle, heif_item_id metadata_id)
     * }
     */
    public static long heif_image_handle_get_metadata_size(MemorySegment handle, int metadata_id) {
        var mh$ = heif_image_handle_get_metadata_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_metadata_size", handle, metadata_id);
            }
            return (long)mh$.invokeExact(handle, metadata_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_metadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_metadata(const struct heif_image_handle *handle, heif_item_id metadata_id, void *out_data)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_metadata$descriptor() {
        return heif_image_handle_get_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_metadata(const struct heif_image_handle *handle, heif_item_id metadata_id, void *out_data)
     * }
     */
    public static MethodHandle heif_image_handle_get_metadata$handle() {
        return heif_image_handle_get_metadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_metadata(const struct heif_image_handle *handle, heif_item_id metadata_id, void *out_data)
     * }
     */
    public static MemorySegment heif_image_handle_get_metadata(SegmentAllocator allocator, MemorySegment handle, int metadata_id, MemorySegment out_data) {
        var mh$ = heif_image_handle_get_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_metadata", allocator, handle, metadata_id, out_data);
            }
            return (MemorySegment)mh$.invokeExact(allocator, handle, metadata_id, out_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_color_profile_type_not_present = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_color_profile_type.heif_color_profile_type_not_present = 0
     * }
     */
    public static int heif_color_profile_type_not_present() {
        return heif_color_profile_type_not_present;
    }
    private static final int heif_color_profile_type_nclx = (int)1852009592L;
    /**
     * {@snippet lang=c :
     * enum heif_color_profile_type.heif_color_profile_type_nclx = 1852009592
     * }
     */
    public static int heif_color_profile_type_nclx() {
        return heif_color_profile_type_nclx;
    }
    private static final int heif_color_profile_type_rICC = (int)1917403971L;
    /**
     * {@snippet lang=c :
     * enum heif_color_profile_type.heif_color_profile_type_rICC = 1917403971
     * }
     */
    public static int heif_color_profile_type_rICC() {
        return heif_color_profile_type_rICC;
    }
    private static final int heif_color_profile_type_prof = (int)1886547814L;
    /**
     * {@snippet lang=c :
     * enum heif_color_profile_type.heif_color_profile_type_prof = 1886547814
     * }
     */
    public static int heif_color_profile_type_prof() {
        return heif_color_profile_type_prof;
    }

    private static class heif_image_handle_get_color_profile_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_color_profile_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_color_profile_type heif_image_handle_get_color_profile_type(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_color_profile_type$descriptor() {
        return heif_image_handle_get_color_profile_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_color_profile_type heif_image_handle_get_color_profile_type(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_color_profile_type$handle() {
        return heif_image_handle_get_color_profile_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_color_profile_type heif_image_handle_get_color_profile_type(const struct heif_image_handle *handle)
     * }
     */
    public static int heif_image_handle_get_color_profile_type(MemorySegment handle) {
        var mh$ = heif_image_handle_get_color_profile_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_color_profile_type", handle);
            }
            return (int)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_raw_color_profile_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_raw_color_profile_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t heif_image_handle_get_raw_color_profile_size(const struct heif_image_handle *handle)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_raw_color_profile_size$descriptor() {
        return heif_image_handle_get_raw_color_profile_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t heif_image_handle_get_raw_color_profile_size(const struct heif_image_handle *handle)
     * }
     */
    public static MethodHandle heif_image_handle_get_raw_color_profile_size$handle() {
        return heif_image_handle_get_raw_color_profile_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t heif_image_handle_get_raw_color_profile_size(const struct heif_image_handle *handle)
     * }
     */
    public static long heif_image_handle_get_raw_color_profile_size(MemorySegment handle) {
        var mh$ = heif_image_handle_get_raw_color_profile_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_raw_color_profile_size", handle);
            }
            return (long)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_handle_get_raw_color_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_raw_color_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_raw_color_profile(const struct heif_image_handle *handle, void *out_data)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_raw_color_profile$descriptor() {
        return heif_image_handle_get_raw_color_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_raw_color_profile(const struct heif_image_handle *handle, void *out_data)
     * }
     */
    public static MethodHandle heif_image_handle_get_raw_color_profile$handle() {
        return heif_image_handle_get_raw_color_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_raw_color_profile(const struct heif_image_handle *handle, void *out_data)
     * }
     */
    public static MemorySegment heif_image_handle_get_raw_color_profile(SegmentAllocator allocator, MemorySegment handle, MemorySegment out_data) {
        var mh$ = heif_image_handle_get_raw_color_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_raw_color_profile", allocator, handle, out_data);
            }
            return (MemorySegment)mh$.invokeExact(allocator, handle, out_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_color_primaries_ITU_R_BT_709_5 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_709_5 = 1
     * }
     */
    public static int heif_color_primaries_ITU_R_BT_709_5() {
        return heif_color_primaries_ITU_R_BT_709_5;
    }
    private static final int heif_color_primaries_unspecified = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_unspecified = 2
     * }
     */
    public static int heif_color_primaries_unspecified() {
        return heif_color_primaries_unspecified;
    }
    private static final int heif_color_primaries_ITU_R_BT_470_6_System_M = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_470_6_System_M = 4
     * }
     */
    public static int heif_color_primaries_ITU_R_BT_470_6_System_M() {
        return heif_color_primaries_ITU_R_BT_470_6_System_M;
    }
    private static final int heif_color_primaries_ITU_R_BT_470_6_System_B_G = (int)5L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_470_6_System_B_G = 5
     * }
     */
    public static int heif_color_primaries_ITU_R_BT_470_6_System_B_G() {
        return heif_color_primaries_ITU_R_BT_470_6_System_B_G;
    }
    private static final int heif_color_primaries_ITU_R_BT_601_6 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_601_6 = 6
     * }
     */
    public static int heif_color_primaries_ITU_R_BT_601_6() {
        return heif_color_primaries_ITU_R_BT_601_6;
    }
    private static final int heif_color_primaries_SMPTE_240M = (int)7L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_240M = 7
     * }
     */
    public static int heif_color_primaries_SMPTE_240M() {
        return heif_color_primaries_SMPTE_240M;
    }
    private static final int heif_color_primaries_generic_film = (int)8L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_generic_film = 8
     * }
     */
    public static int heif_color_primaries_generic_film() {
        return heif_color_primaries_generic_film;
    }
    private static final int heif_color_primaries_ITU_R_BT_2020_2_and_2100_0 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_ITU_R_BT_2020_2_and_2100_0 = 9
     * }
     */
    public static int heif_color_primaries_ITU_R_BT_2020_2_and_2100_0() {
        return heif_color_primaries_ITU_R_BT_2020_2_and_2100_0;
    }
    private static final int heif_color_primaries_SMPTE_ST_428_1 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_ST_428_1 = 10
     * }
     */
    public static int heif_color_primaries_SMPTE_ST_428_1() {
        return heif_color_primaries_SMPTE_ST_428_1;
    }
    private static final int heif_color_primaries_SMPTE_RP_431_2 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_RP_431_2 = 11
     * }
     */
    public static int heif_color_primaries_SMPTE_RP_431_2() {
        return heif_color_primaries_SMPTE_RP_431_2;
    }
    private static final int heif_color_primaries_SMPTE_EG_432_1 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_SMPTE_EG_432_1 = 12
     * }
     */
    public static int heif_color_primaries_SMPTE_EG_432_1() {
        return heif_color_primaries_SMPTE_EG_432_1;
    }
    private static final int heif_color_primaries_EBU_Tech_3213_E = (int)22L;
    /**
     * {@snippet lang=c :
     * enum heif_color_primaries.heif_color_primaries_EBU_Tech_3213_E = 22
     * }
     */
    public static int heif_color_primaries_EBU_Tech_3213_E() {
        return heif_color_primaries_EBU_Tech_3213_E;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_709_5 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_709_5 = 1
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_709_5() {
        return heif_transfer_characteristic_ITU_R_BT_709_5;
    }
    private static final int heif_transfer_characteristic_unspecified = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_unspecified = 2
     * }
     */
    public static int heif_transfer_characteristic_unspecified() {
        return heif_transfer_characteristic_unspecified;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_470_6_System_M = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_470_6_System_M = 4
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_470_6_System_M() {
        return heif_transfer_characteristic_ITU_R_BT_470_6_System_M;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G = (int)5L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G = 5
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G() {
        return heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_601_6 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_601_6 = 6
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_601_6() {
        return heif_transfer_characteristic_ITU_R_BT_601_6;
    }
    private static final int heif_transfer_characteristic_SMPTE_240M = (int)7L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_SMPTE_240M = 7
     * }
     */
    public static int heif_transfer_characteristic_SMPTE_240M() {
        return heif_transfer_characteristic_SMPTE_240M;
    }
    private static final int heif_transfer_characteristic_linear = (int)8L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_linear = 8
     * }
     */
    public static int heif_transfer_characteristic_linear() {
        return heif_transfer_characteristic_linear;
    }
    private static final int heif_transfer_characteristic_logarithmic_100 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_logarithmic_100 = 9
     * }
     */
    public static int heif_transfer_characteristic_logarithmic_100() {
        return heif_transfer_characteristic_logarithmic_100;
    }
    private static final int heif_transfer_characteristic_logarithmic_100_sqrt10 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_logarithmic_100_sqrt10 = 10
     * }
     */
    public static int heif_transfer_characteristic_logarithmic_100_sqrt10() {
        return heif_transfer_characteristic_logarithmic_100_sqrt10;
    }
    private static final int heif_transfer_characteristic_IEC_61966_2_4 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_IEC_61966_2_4 = 11
     * }
     */
    public static int heif_transfer_characteristic_IEC_61966_2_4() {
        return heif_transfer_characteristic_IEC_61966_2_4;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_1361 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_1361 = 12
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_1361() {
        return heif_transfer_characteristic_ITU_R_BT_1361;
    }
    private static final int heif_transfer_characteristic_IEC_61966_2_1 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_IEC_61966_2_1 = 13
     * }
     */
    public static int heif_transfer_characteristic_IEC_61966_2_1() {
        return heif_transfer_characteristic_IEC_61966_2_1;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_2020_2_10bit = (int)14L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2020_2_10bit = 14
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2020_2_10bit() {
        return heif_transfer_characteristic_ITU_R_BT_2020_2_10bit;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_2020_2_12bit = (int)15L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2020_2_12bit = 15
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2020_2_12bit() {
        return heif_transfer_characteristic_ITU_R_BT_2020_2_12bit;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_2100_0_PQ = (int)16L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2100_0_PQ = 16
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2100_0_PQ() {
        return heif_transfer_characteristic_ITU_R_BT_2100_0_PQ;
    }
    private static final int heif_transfer_characteristic_SMPTE_ST_428_1 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_SMPTE_ST_428_1 = 17
     * }
     */
    public static int heif_transfer_characteristic_SMPTE_ST_428_1() {
        return heif_transfer_characteristic_SMPTE_ST_428_1;
    }
    private static final int heif_transfer_characteristic_ITU_R_BT_2100_0_HLG = (int)18L;
    /**
     * {@snippet lang=c :
     * enum heif_transfer_characteristics.heif_transfer_characteristic_ITU_R_BT_2100_0_HLG = 18
     * }
     */
    public static int heif_transfer_characteristic_ITU_R_BT_2100_0_HLG() {
        return heif_transfer_characteristic_ITU_R_BT_2100_0_HLG;
    }
    private static final int heif_matrix_coefficients_RGB_GBR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_RGB_GBR = 0
     * }
     */
    public static int heif_matrix_coefficients_RGB_GBR() {
        return heif_matrix_coefficients_RGB_GBR;
    }
    private static final int heif_matrix_coefficients_ITU_R_BT_709_5 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_709_5 = 1
     * }
     */
    public static int heif_matrix_coefficients_ITU_R_BT_709_5() {
        return heif_matrix_coefficients_ITU_R_BT_709_5;
    }
    private static final int heif_matrix_coefficients_unspecified = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_unspecified = 2
     * }
     */
    public static int heif_matrix_coefficients_unspecified() {
        return heif_matrix_coefficients_unspecified;
    }
    private static final int heif_matrix_coefficients_US_FCC_T47 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_US_FCC_T47 = 4
     * }
     */
    public static int heif_matrix_coefficients_US_FCC_T47() {
        return heif_matrix_coefficients_US_FCC_T47;
    }
    private static final int heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G = (int)5L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G = 5
     * }
     */
    public static int heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G() {
        return heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G;
    }
    private static final int heif_matrix_coefficients_ITU_R_BT_601_6 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_601_6 = 6
     * }
     */
    public static int heif_matrix_coefficients_ITU_R_BT_601_6() {
        return heif_matrix_coefficients_ITU_R_BT_601_6;
    }
    private static final int heif_matrix_coefficients_SMPTE_240M = (int)7L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_SMPTE_240M = 7
     * }
     */
    public static int heif_matrix_coefficients_SMPTE_240M() {
        return heif_matrix_coefficients_SMPTE_240M;
    }
    private static final int heif_matrix_coefficients_YCgCo = (int)8L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_YCgCo = 8
     * }
     */
    public static int heif_matrix_coefficients_YCgCo() {
        return heif_matrix_coefficients_YCgCo;
    }
    private static final int heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance = (int)9L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance = 9
     * }
     */
    public static int heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance() {
        return heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance;
    }
    private static final int heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance = 10
     * }
     */
    public static int heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance() {
        return heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance;
    }
    private static final int heif_matrix_coefficients_SMPTE_ST_2085 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_SMPTE_ST_2085 = 11
     * }
     */
    public static int heif_matrix_coefficients_SMPTE_ST_2085() {
        return heif_matrix_coefficients_SMPTE_ST_2085;
    }
    private static final int heif_matrix_coefficients_chromaticity_derived_non_constant_luminance = (int)12L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_chromaticity_derived_non_constant_luminance = 12
     * }
     */
    public static int heif_matrix_coefficients_chromaticity_derived_non_constant_luminance() {
        return heif_matrix_coefficients_chromaticity_derived_non_constant_luminance;
    }
    private static final int heif_matrix_coefficients_chromaticity_derived_constant_luminance = (int)13L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_chromaticity_derived_constant_luminance = 13
     * }
     */
    public static int heif_matrix_coefficients_chromaticity_derived_constant_luminance() {
        return heif_matrix_coefficients_chromaticity_derived_constant_luminance;
    }
    private static final int heif_matrix_coefficients_ICtCp = (int)14L;
    /**
     * {@snippet lang=c :
     * enum heif_matrix_coefficients.heif_matrix_coefficients_ICtCp = 14
     * }
     */
    public static int heif_matrix_coefficients_ICtCp() {
        return heif_matrix_coefficients_ICtCp;
    }

    private static class heif_image_handle_get_nclx_color_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_handle_get_nclx_color_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_nclx_color_profile(const struct heif_image_handle *handle, struct heif_color_profile_nclx **out_data)
     * }
     */
    public static FunctionDescriptor heif_image_handle_get_nclx_color_profile$descriptor() {
        return heif_image_handle_get_nclx_color_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_nclx_color_profile(const struct heif_image_handle *handle, struct heif_color_profile_nclx **out_data)
     * }
     */
    public static MethodHandle heif_image_handle_get_nclx_color_profile$handle() {
        return heif_image_handle_get_nclx_color_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_handle_get_nclx_color_profile(const struct heif_image_handle *handle, struct heif_color_profile_nclx **out_data)
     * }
     */
    public static MemorySegment heif_image_handle_get_nclx_color_profile(SegmentAllocator allocator, MemorySegment handle, MemorySegment out_data) {
        var mh$ = heif_image_handle_get_nclx_color_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_handle_get_nclx_color_profile", allocator, handle, out_data);
            }
            return (MemorySegment)mh$.invokeExact(allocator, handle, out_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * struct heif_color_profile_nclx *heif_nclx_color_profile_alloc()
     * }
     */
    public static class heif_nclx_color_profile_alloc {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                heif_h.C_POINTER        );
        private static final MemorySegment ADDR = heif_h.findOrThrow("heif_nclx_color_profile_alloc");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private heif_nclx_color_profile_alloc(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * struct heif_color_profile_nclx *heif_nclx_color_profile_alloc()
         * }
         */
        public static heif_nclx_color_profile_alloc makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new heif_nclx_color_profile_alloc(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("heif_nclx_color_profile_alloc", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class heif_nclx_color_profile_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_nclx_color_profile_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_nclx_color_profile_free(struct heif_color_profile_nclx *nclx_profile)
     * }
     */
    public static FunctionDescriptor heif_nclx_color_profile_free$descriptor() {
        return heif_nclx_color_profile_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_nclx_color_profile_free(struct heif_color_profile_nclx *nclx_profile)
     * }
     */
    public static MethodHandle heif_nclx_color_profile_free$handle() {
        return heif_nclx_color_profile_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_nclx_color_profile_free(struct heif_color_profile_nclx *nclx_profile)
     * }
     */
    public static void heif_nclx_color_profile_free(MemorySegment nclx_profile) {
        var mh$ = heif_nclx_color_profile_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_nclx_color_profile_free", nclx_profile);
            }
            mh$.invokeExact(nclx_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_color_profile_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_color_profile_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_color_profile_type heif_image_get_color_profile_type(const struct heif_image *image)
     * }
     */
    public static FunctionDescriptor heif_image_get_color_profile_type$descriptor() {
        return heif_image_get_color_profile_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_color_profile_type heif_image_get_color_profile_type(const struct heif_image *image)
     * }
     */
    public static MethodHandle heif_image_get_color_profile_type$handle() {
        return heif_image_get_color_profile_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_color_profile_type heif_image_get_color_profile_type(const struct heif_image *image)
     * }
     */
    public static int heif_image_get_color_profile_type(MemorySegment image) {
        var mh$ = heif_image_get_color_profile_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_color_profile_type", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_raw_color_profile_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_raw_color_profile_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t heif_image_get_raw_color_profile_size(const struct heif_image *image)
     * }
     */
    public static FunctionDescriptor heif_image_get_raw_color_profile_size$descriptor() {
        return heif_image_get_raw_color_profile_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t heif_image_get_raw_color_profile_size(const struct heif_image *image)
     * }
     */
    public static MethodHandle heif_image_get_raw_color_profile_size$handle() {
        return heif_image_get_raw_color_profile_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * size_t heif_image_get_raw_color_profile_size(const struct heif_image *image)
     * }
     */
    public static long heif_image_get_raw_color_profile_size(MemorySegment image) {
        var mh$ = heif_image_get_raw_color_profile_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_raw_color_profile_size", image);
            }
            return (long)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_raw_color_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_raw_color_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_get_raw_color_profile(const struct heif_image *image, void *out_data)
     * }
     */
    public static FunctionDescriptor heif_image_get_raw_color_profile$descriptor() {
        return heif_image_get_raw_color_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_get_raw_color_profile(const struct heif_image *image, void *out_data)
     * }
     */
    public static MethodHandle heif_image_get_raw_color_profile$handle() {
        return heif_image_get_raw_color_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_get_raw_color_profile(const struct heif_image *image, void *out_data)
     * }
     */
    public static MemorySegment heif_image_get_raw_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment out_data) {
        var mh$ = heif_image_get_raw_color_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_raw_color_profile", allocator, image, out_data);
            }
            return (MemorySegment)mh$.invokeExact(allocator, image, out_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_nclx_color_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_nclx_color_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_get_nclx_color_profile(const struct heif_image *image, struct heif_color_profile_nclx **out_data)
     * }
     */
    public static FunctionDescriptor heif_image_get_nclx_color_profile$descriptor() {
        return heif_image_get_nclx_color_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_get_nclx_color_profile(const struct heif_image *image, struct heif_color_profile_nclx **out_data)
     * }
     */
    public static MethodHandle heif_image_get_nclx_color_profile$handle() {
        return heif_image_get_nclx_color_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_get_nclx_color_profile(const struct heif_image *image, struct heif_color_profile_nclx **out_data)
     * }
     */
    public static MemorySegment heif_image_get_nclx_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment out_data) {
        var mh$ = heif_image_get_nclx_color_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_nclx_color_profile", allocator, image, out_data);
            }
            return (MemorySegment)mh$.invokeExact(allocator, image, out_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_compression_undefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_compression_format.heif_compression_undefined = 0
     * }
     */
    public static int heif_compression_undefined() {
        return heif_compression_undefined;
    }
    private static final int heif_compression_HEVC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_compression_format.heif_compression_HEVC = 1
     * }
     */
    public static int heif_compression_HEVC() {
        return heif_compression_HEVC;
    }
    private static final int heif_compression_AVC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_compression_format.heif_compression_AVC = 2
     * }
     */
    public static int heif_compression_AVC() {
        return heif_compression_AVC;
    }
    private static final int heif_compression_JPEG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_compression_format.heif_compression_JPEG = 3
     * }
     */
    public static int heif_compression_JPEG() {
        return heif_compression_JPEG;
    }
    private static final int heif_compression_AV1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_compression_format.heif_compression_AV1 = 4
     * }
     */
    public static int heif_compression_AV1() {
        return heif_compression_AV1;
    }
    private static final int heif_chroma_undefined = (int)99L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_undefined = 99
     * }
     */
    public static int heif_chroma_undefined() {
        return heif_chroma_undefined;
    }
    private static final int heif_chroma_monochrome = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_monochrome = 0
     * }
     */
    public static int heif_chroma_monochrome() {
        return heif_chroma_monochrome;
    }
    private static final int heif_chroma_420 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_420 = 1
     * }
     */
    public static int heif_chroma_420() {
        return heif_chroma_420;
    }
    private static final int heif_chroma_422 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_422 = 2
     * }
     */
    public static int heif_chroma_422() {
        return heif_chroma_422;
    }
    private static final int heif_chroma_444 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_444 = 3
     * }
     */
    public static int heif_chroma_444() {
        return heif_chroma_444;
    }
    private static final int heif_chroma_interleaved_RGB = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_interleaved_RGB = 10
     * }
     */
    public static int heif_chroma_interleaved_RGB() {
        return heif_chroma_interleaved_RGB;
    }
    private static final int heif_chroma_interleaved_RGBA = (int)11L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_interleaved_RGBA = 11
     * }
     */
    public static int heif_chroma_interleaved_RGBA() {
        return heif_chroma_interleaved_RGBA;
    }
    private static final int heif_chroma_interleaved_RRGGBB_BE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBB_BE = 12
     * }
     */
    public static int heif_chroma_interleaved_RRGGBB_BE() {
        return heif_chroma_interleaved_RRGGBB_BE;
    }
    private static final int heif_chroma_interleaved_RRGGBBAA_BE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBBAA_BE = 13
     * }
     */
    public static int heif_chroma_interleaved_RRGGBBAA_BE() {
        return heif_chroma_interleaved_RRGGBBAA_BE;
    }
    private static final int heif_chroma_interleaved_RRGGBB_LE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBB_LE = 14
     * }
     */
    public static int heif_chroma_interleaved_RRGGBB_LE() {
        return heif_chroma_interleaved_RRGGBB_LE;
    }
    private static final int heif_chroma_interleaved_RRGGBBAA_LE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum heif_chroma.heif_chroma_interleaved_RRGGBBAA_LE = 15
     * }
     */
    public static int heif_chroma_interleaved_RRGGBBAA_LE() {
        return heif_chroma_interleaved_RRGGBBAA_LE;
    }
    private static final int heif_colorspace_undefined = (int)99L;
    /**
     * {@snippet lang=c :
     * enum heif_colorspace.heif_colorspace_undefined = 99
     * }
     */
    public static int heif_colorspace_undefined() {
        return heif_colorspace_undefined;
    }
    private static final int heif_colorspace_YCbCr = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_colorspace.heif_colorspace_YCbCr = 0
     * }
     */
    public static int heif_colorspace_YCbCr() {
        return heif_colorspace_YCbCr;
    }
    private static final int heif_colorspace_RGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_colorspace.heif_colorspace_RGB = 1
     * }
     */
    public static int heif_colorspace_RGB() {
        return heif_colorspace_RGB;
    }
    private static final int heif_colorspace_monochrome = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_colorspace.heif_colorspace_monochrome = 2
     * }
     */
    public static int heif_colorspace_monochrome() {
        return heif_colorspace_monochrome;
    }
    private static final int heif_channel_Y = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_Y = 0
     * }
     */
    public static int heif_channel_Y() {
        return heif_channel_Y;
    }
    private static final int heif_channel_Cb = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_Cb = 1
     * }
     */
    public static int heif_channel_Cb() {
        return heif_channel_Cb;
    }
    private static final int heif_channel_Cr = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_Cr = 2
     * }
     */
    public static int heif_channel_Cr() {
        return heif_channel_Cr;
    }
    private static final int heif_channel_R = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_R = 3
     * }
     */
    public static int heif_channel_R() {
        return heif_channel_R;
    }
    private static final int heif_channel_G = (int)4L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_G = 4
     * }
     */
    public static int heif_channel_G() {
        return heif_channel_G;
    }
    private static final int heif_channel_B = (int)5L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_B = 5
     * }
     */
    public static int heif_channel_B() {
        return heif_channel_B;
    }
    private static final int heif_channel_Alpha = (int)6L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_Alpha = 6
     * }
     */
    public static int heif_channel_Alpha() {
        return heif_channel_Alpha;
    }
    private static final int heif_channel_interleaved = (int)10L;
    /**
     * {@snippet lang=c :
     * enum heif_channel.heif_channel_interleaved = 10
     * }
     */
    public static int heif_channel_interleaved() {
        return heif_channel_interleaved;
    }
    private static final int heif_progress_step_total = (int)0L;
    /**
     * {@snippet lang=c :
     * enum heif_progress_step.heif_progress_step_total = 0
     * }
     */
    public static int heif_progress_step_total() {
        return heif_progress_step_total;
    }
    private static final int heif_progress_step_load_tile = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_progress_step.heif_progress_step_load_tile = 1
     * }
     */
    public static int heif_progress_step_load_tile() {
        return heif_progress_step_load_tile;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * struct heif_decoding_options *heif_decoding_options_alloc()
     * }
     */
    public static class heif_decoding_options_alloc {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                heif_h.C_POINTER        );
        private static final MemorySegment ADDR = heif_h.findOrThrow("heif_decoding_options_alloc");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private heif_decoding_options_alloc(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * struct heif_decoding_options *heif_decoding_options_alloc()
         * }
         */
        public static heif_decoding_options_alloc makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new heif_decoding_options_alloc(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("heif_decoding_options_alloc", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class heif_decoding_options_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_decoding_options_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_decoding_options_free(struct heif_decoding_options *)
     * }
     */
    public static FunctionDescriptor heif_decoding_options_free$descriptor() {
        return heif_decoding_options_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_decoding_options_free(struct heif_decoding_options *)
     * }
     */
    public static MethodHandle heif_decoding_options_free$handle() {
        return heif_decoding_options_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_decoding_options_free(struct heif_decoding_options *)
     * }
     */
    public static void heif_decoding_options_free(MemorySegment x0) {
        var mh$ = heif_decoding_options_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_decoding_options_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_decode_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_decode_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_decode_image(const struct heif_image_handle *in_handle, struct heif_image **out_img, enum heif_colorspace colorspace, enum heif_chroma chroma, const struct heif_decoding_options *options)
     * }
     */
    public static FunctionDescriptor heif_decode_image$descriptor() {
        return heif_decode_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_decode_image(const struct heif_image_handle *in_handle, struct heif_image **out_img, enum heif_colorspace colorspace, enum heif_chroma chroma, const struct heif_decoding_options *options)
     * }
     */
    public static MethodHandle heif_decode_image$handle() {
        return heif_decode_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_decode_image(const struct heif_image_handle *in_handle, struct heif_image **out_img, enum heif_colorspace colorspace, enum heif_chroma chroma, const struct heif_decoding_options *options)
     * }
     */
    public static MemorySegment heif_decode_image(SegmentAllocator allocator, MemorySegment in_handle, MemorySegment out_img, int colorspace, int chroma, MemorySegment options) {
        var mh$ = heif_decode_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_decode_image", allocator, in_handle, out_img, colorspace, chroma, options);
            }
            return (MemorySegment)mh$.invokeExact(allocator, in_handle, out_img, colorspace, chroma, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_decode_image_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_decode_image_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_image *heif_decode_image_alloc(const struct heif_image_handle *in_handle, enum heif_colorspace colorspace, enum heif_chroma chroma, const struct heif_decoding_options *options)
     * }
     */
    public static FunctionDescriptor heif_decode_image_alloc$descriptor() {
        return heif_decode_image_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_image *heif_decode_image_alloc(const struct heif_image_handle *in_handle, enum heif_colorspace colorspace, enum heif_chroma chroma, const struct heif_decoding_options *options)
     * }
     */
    public static MethodHandle heif_decode_image_alloc$handle() {
        return heif_decode_image_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_image *heif_decode_image_alloc(const struct heif_image_handle *in_handle, enum heif_colorspace colorspace, enum heif_chroma chroma, const struct heif_decoding_options *options)
     * }
     */
    public static MemorySegment heif_decode_image_alloc(MemorySegment in_handle, int colorspace, int chroma, MemorySegment options) {
        var mh$ = heif_decode_image_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_decode_image_alloc", in_handle, colorspace, chroma, options);
            }
            return (MemorySegment)mh$.invokeExact(in_handle, colorspace, chroma, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_colorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_colorspace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_colorspace heif_image_get_colorspace(const struct heif_image *)
     * }
     */
    public static FunctionDescriptor heif_image_get_colorspace$descriptor() {
        return heif_image_get_colorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_colorspace heif_image_get_colorspace(const struct heif_image *)
     * }
     */
    public static MethodHandle heif_image_get_colorspace$handle() {
        return heif_image_get_colorspace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_colorspace heif_image_get_colorspace(const struct heif_image *)
     * }
     */
    public static int heif_image_get_colorspace(MemorySegment x0) {
        var mh$ = heif_image_get_colorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_colorspace", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_chroma_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_chroma_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_chroma heif_image_get_chroma_format(const struct heif_image *)
     * }
     */
    public static FunctionDescriptor heif_image_get_chroma_format$descriptor() {
        return heif_image_get_chroma_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_chroma heif_image_get_chroma_format(const struct heif_image *)
     * }
     */
    public static MethodHandle heif_image_get_chroma_format$handle() {
        return heif_image_get_chroma_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_chroma heif_image_get_chroma_format(const struct heif_image *)
     * }
     */
    public static int heif_image_get_chroma_format(MemorySegment x0) {
        var mh$ = heif_image_get_chroma_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_chroma_format", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_get_width(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static FunctionDescriptor heif_image_get_width$descriptor() {
        return heif_image_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_get_width(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static MethodHandle heif_image_get_width$handle() {
        return heif_image_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_get_width(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static int heif_image_get_width(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_width", x0, channel);
            }
            return (int)mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_get_height(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static FunctionDescriptor heif_image_get_height$descriptor() {
        return heif_image_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_get_height(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static MethodHandle heif_image_get_height$handle() {
        return heif_image_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_get_height(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static int heif_image_get_height(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_height", x0, channel);
            }
            return (int)mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_primary_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_primary_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_get_primary_width(const struct heif_image *)
     * }
     */
    public static FunctionDescriptor heif_image_get_primary_width$descriptor() {
        return heif_image_get_primary_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_get_primary_width(const struct heif_image *)
     * }
     */
    public static MethodHandle heif_image_get_primary_width$handle() {
        return heif_image_get_primary_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_get_primary_width(const struct heif_image *)
     * }
     */
    public static int heif_image_get_primary_width(MemorySegment x0) {
        var mh$ = heif_image_get_primary_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_primary_width", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_primary_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_primary_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_get_primary_height(const struct heif_image *)
     * }
     */
    public static FunctionDescriptor heif_image_get_primary_height$descriptor() {
        return heif_image_get_primary_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_get_primary_height(const struct heif_image *)
     * }
     */
    public static MethodHandle heif_image_get_primary_height$handle() {
        return heif_image_get_primary_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_get_primary_height(const struct heif_image *)
     * }
     */
    public static int heif_image_get_primary_height(MemorySegment x0) {
        var mh$ = heif_image_get_primary_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_primary_height", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_crop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_crop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_crop(struct heif_image *img, int left, int right, int top, int bottom)
     * }
     */
    public static FunctionDescriptor heif_image_crop$descriptor() {
        return heif_image_crop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_crop(struct heif_image *img, int left, int right, int top, int bottom)
     * }
     */
    public static MethodHandle heif_image_crop$handle() {
        return heif_image_crop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_crop(struct heif_image *img, int left, int right, int top, int bottom)
     * }
     */
    public static MemorySegment heif_image_crop(SegmentAllocator allocator, MemorySegment img, int left, int right, int top, int bottom) {
        var mh$ = heif_image_crop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_crop", allocator, img, left, right, top, bottom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, img, left, right, top, bottom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_bits_per_pixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_bits_per_pixel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_get_bits_per_pixel(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static FunctionDescriptor heif_image_get_bits_per_pixel$descriptor() {
        return heif_image_get_bits_per_pixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_get_bits_per_pixel(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static MethodHandle heif_image_get_bits_per_pixel$handle() {
        return heif_image_get_bits_per_pixel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_get_bits_per_pixel(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static int heif_image_get_bits_per_pixel(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_bits_per_pixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_bits_per_pixel", x0, channel);
            }
            return (int)mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_bits_per_pixel_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_bits_per_pixel_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_get_bits_per_pixel_range(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static FunctionDescriptor heif_image_get_bits_per_pixel_range$descriptor() {
        return heif_image_get_bits_per_pixel_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_get_bits_per_pixel_range(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static MethodHandle heif_image_get_bits_per_pixel_range$handle() {
        return heif_image_get_bits_per_pixel_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_get_bits_per_pixel_range(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static int heif_image_get_bits_per_pixel_range(MemorySegment x0, int channel) {
        var mh$ = heif_image_get_bits_per_pixel_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_bits_per_pixel_range", x0, channel);
            }
            return (int)mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_has_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_has_channel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_has_channel(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static FunctionDescriptor heif_image_has_channel$descriptor() {
        return heif_image_has_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_has_channel(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static MethodHandle heif_image_has_channel$handle() {
        return heif_image_has_channel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_has_channel(const struct heif_image *, enum heif_channel channel)
     * }
     */
    public static int heif_image_has_channel(MemorySegment x0, int channel) {
        var mh$ = heif_image_has_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_has_channel", x0, channel);
            }
            return (int)mh$.invokeExact(x0, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_plane_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_plane_readonly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const uint8_t *heif_image_get_plane_readonly(const struct heif_image *, enum heif_channel channel, int *out_stride)
     * }
     */
    public static FunctionDescriptor heif_image_get_plane_readonly$descriptor() {
        return heif_image_get_plane_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const uint8_t *heif_image_get_plane_readonly(const struct heif_image *, enum heif_channel channel, int *out_stride)
     * }
     */
    public static MethodHandle heif_image_get_plane_readonly$handle() {
        return heif_image_get_plane_readonly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const uint8_t *heif_image_get_plane_readonly(const struct heif_image *, enum heif_channel channel, int *out_stride)
     * }
     */
    public static MemorySegment heif_image_get_plane_readonly(MemorySegment x0, int channel, MemorySegment out_stride) {
        var mh$ = heif_image_get_plane_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_plane_readonly", x0, channel, out_stride);
            }
            return (MemorySegment)mh$.invokeExact(x0, channel, out_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_get_plane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_get_plane"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint8_t *heif_image_get_plane(struct heif_image *, enum heif_channel channel, int *out_stride)
     * }
     */
    public static FunctionDescriptor heif_image_get_plane$descriptor() {
        return heif_image_get_plane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint8_t *heif_image_get_plane(struct heif_image *, enum heif_channel channel, int *out_stride)
     * }
     */
    public static MethodHandle heif_image_get_plane$handle() {
        return heif_image_get_plane.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint8_t *heif_image_get_plane(struct heif_image *, enum heif_channel channel, int *out_stride)
     * }
     */
    public static MemorySegment heif_image_get_plane(MemorySegment x0, int channel, MemorySegment out_stride) {
        var mh$ = heif_image_get_plane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_get_plane", x0, channel, out_stride);
            }
            return (MemorySegment)mh$.invokeExact(x0, channel, out_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_scale_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_scale_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_scale_image(const struct heif_image *input, struct heif_image **output, int width, int height, const struct heif_scaling_options *options)
     * }
     */
    public static FunctionDescriptor heif_image_scale_image$descriptor() {
        return heif_image_scale_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_scale_image(const struct heif_image *input, struct heif_image **output, int width, int height, const struct heif_scaling_options *options)
     * }
     */
    public static MethodHandle heif_image_scale_image$handle() {
        return heif_image_scale_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_scale_image(const struct heif_image *input, struct heif_image **output, int width, int height, const struct heif_scaling_options *options)
     * }
     */
    public static MemorySegment heif_image_scale_image(SegmentAllocator allocator, MemorySegment input, MemorySegment output, int width, int height, MemorySegment options) {
        var mh$ = heif_image_scale_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_scale_image", allocator, input, output, width, height, options);
            }
            return (MemorySegment)mh$.invokeExact(allocator, input, output, width, height, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_set_raw_color_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_set_raw_color_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_set_raw_color_profile(struct heif_image *image, const char *profile_type_fourcc_string, const void *profile_data, const size_t profile_size)
     * }
     */
    public static FunctionDescriptor heif_image_set_raw_color_profile$descriptor() {
        return heif_image_set_raw_color_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_set_raw_color_profile(struct heif_image *image, const char *profile_type_fourcc_string, const void *profile_data, const size_t profile_size)
     * }
     */
    public static MethodHandle heif_image_set_raw_color_profile$handle() {
        return heif_image_set_raw_color_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_set_raw_color_profile(struct heif_image *image, const char *profile_type_fourcc_string, const void *profile_data, const size_t profile_size)
     * }
     */
    public static MemorySegment heif_image_set_raw_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment profile_type_fourcc_string, MemorySegment profile_data, long profile_size) {
        var mh$ = heif_image_set_raw_color_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_set_raw_color_profile", allocator, image, profile_type_fourcc_string, profile_data, profile_size);
            }
            return (MemorySegment)mh$.invokeExact(allocator, image, profile_type_fourcc_string, profile_data, profile_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_set_nclx_color_profile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_set_nclx_color_profile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_set_nclx_color_profile(struct heif_image *image, const struct heif_color_profile_nclx *color_profile)
     * }
     */
    public static FunctionDescriptor heif_image_set_nclx_color_profile$descriptor() {
        return heif_image_set_nclx_color_profile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_set_nclx_color_profile(struct heif_image *image, const struct heif_color_profile_nclx *color_profile)
     * }
     */
    public static MethodHandle heif_image_set_nclx_color_profile$handle() {
        return heif_image_set_nclx_color_profile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_set_nclx_color_profile(struct heif_image *image, const struct heif_color_profile_nclx *color_profile)
     * }
     */
    public static MemorySegment heif_image_set_nclx_color_profile(SegmentAllocator allocator, MemorySegment image, MemorySegment color_profile) {
        var mh$ = heif_image_set_nclx_color_profile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_set_nclx_color_profile", allocator, image, color_profile);
            }
            return (MemorySegment)mh$.invokeExact(allocator, image, color_profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_image_release(const struct heif_image *)
     * }
     */
    public static FunctionDescriptor heif_image_release$descriptor() {
        return heif_image_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_image_release(const struct heif_image *)
     * }
     */
    public static MethodHandle heif_image_release$handle() {
        return heif_image_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_image_release(const struct heif_image *)
     * }
     */
    public static void heif_image_release(MemorySegment x0) {
        var mh$ = heif_image_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_release", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_write_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_write_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_write_to_file(struct heif_context *, const char *filename)
     * }
     */
    public static FunctionDescriptor heif_context_write_to_file$descriptor() {
        return heif_context_write_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_write_to_file(struct heif_context *, const char *filename)
     * }
     */
    public static MethodHandle heif_context_write_to_file$handle() {
        return heif_context_write_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_write_to_file(struct heif_context *, const char *filename)
     * }
     */
    public static MemorySegment heif_context_write_to_file(SegmentAllocator allocator, MemorySegment x0, MemorySegment filename) {
        var mh$ = heif_context_write_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_write_to_file", allocator, x0, filename);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_write"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_write(struct heif_context *, struct heif_writer *writer, void *userdata)
     * }
     */
    public static FunctionDescriptor heif_context_write$descriptor() {
        return heif_context_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_write(struct heif_context *, struct heif_writer *writer, void *userdata)
     * }
     */
    public static MethodHandle heif_context_write$handle() {
        return heif_context_write.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_write(struct heif_context *, struct heif_writer *writer, void *userdata)
     * }
     */
    public static MemorySegment heif_context_write(SegmentAllocator allocator, MemorySegment x0, MemorySegment writer, MemorySegment userdata) {
        var mh$ = heif_context_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_write", allocator, x0, writer, userdata);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, writer, userdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_encoder_descriptors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_encoder_descriptors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_context_get_encoder_descriptors(struct heif_context *, enum heif_compression_format format_filter, const char *name_filter, const struct heif_encoder_descriptor **out_encoders, int count)
     * }
     */
    public static FunctionDescriptor heif_context_get_encoder_descriptors$descriptor() {
        return heif_context_get_encoder_descriptors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_context_get_encoder_descriptors(struct heif_context *, enum heif_compression_format format_filter, const char *name_filter, const struct heif_encoder_descriptor **out_encoders, int count)
     * }
     */
    public static MethodHandle heif_context_get_encoder_descriptors$handle() {
        return heif_context_get_encoder_descriptors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_context_get_encoder_descriptors(struct heif_context *, enum heif_compression_format format_filter, const char *name_filter, const struct heif_encoder_descriptor **out_encoders, int count)
     * }
     */
    public static int heif_context_get_encoder_descriptors(MemorySegment x0, int format_filter, MemorySegment name_filter, MemorySegment out_encoders, int count) {
        var mh$ = heif_context_get_encoder_descriptors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_encoder_descriptors", x0, format_filter, name_filter, out_encoders, count);
            }
            return (int)mh$.invokeExact(x0, format_filter, name_filter, out_encoders, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_encoder_descriptor_get_name(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_get_name$descriptor() {
        return heif_encoder_descriptor_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_encoder_descriptor_get_name(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_get_name$handle() {
        return heif_encoder_descriptor_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_encoder_descriptor_get_name(const struct heif_encoder_descriptor *)
     * }
     */
    public static MemorySegment heif_encoder_descriptor_get_name(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_get_name", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_get_id_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_get_id_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_encoder_descriptor_get_id_name(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_get_id_name$descriptor() {
        return heif_encoder_descriptor_get_id_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_encoder_descriptor_get_id_name(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_get_id_name$handle() {
        return heif_encoder_descriptor_get_id_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_encoder_descriptor_get_id_name(const struct heif_encoder_descriptor *)
     * }
     */
    public static MemorySegment heif_encoder_descriptor_get_id_name(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_get_id_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_get_id_name", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_get_compression_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_get_compression_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_compression_format heif_encoder_descriptor_get_compression_format(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_get_compression_format$descriptor() {
        return heif_encoder_descriptor_get_compression_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_compression_format heif_encoder_descriptor_get_compression_format(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_get_compression_format$handle() {
        return heif_encoder_descriptor_get_compression_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_compression_format heif_encoder_descriptor_get_compression_format(const struct heif_encoder_descriptor *)
     * }
     */
    public static int heif_encoder_descriptor_get_compression_format(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_get_compression_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_get_compression_format", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_supports_lossy_compression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_supports_lossy_compression"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supports_lossy_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_supports_lossy_compression$descriptor() {
        return heif_encoder_descriptor_supports_lossy_compression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supports_lossy_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_supports_lossy_compression$handle() {
        return heif_encoder_descriptor_supports_lossy_compression.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supports_lossy_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static int heif_encoder_descriptor_supports_lossy_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supports_lossy_compression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_supports_lossy_compression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_supports_lossless_compression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_supports_lossless_compression"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supports_lossless_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_supports_lossless_compression$descriptor() {
        return heif_encoder_descriptor_supports_lossless_compression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supports_lossless_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_supports_lossless_compression$handle() {
        return heif_encoder_descriptor_supports_lossless_compression.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supports_lossless_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static int heif_encoder_descriptor_supports_lossless_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supports_lossless_compression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_supports_lossless_compression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_encoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_encoder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_encoder(struct heif_context *context, const struct heif_encoder_descriptor *, struct heif_encoder **out_encoder)
     * }
     */
    public static FunctionDescriptor heif_context_get_encoder$descriptor() {
        return heif_context_get_encoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_encoder(struct heif_context *context, const struct heif_encoder_descriptor *, struct heif_encoder **out_encoder)
     * }
     */
    public static MethodHandle heif_context_get_encoder$handle() {
        return heif_context_get_encoder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_get_encoder(struct heif_context *context, const struct heif_encoder_descriptor *, struct heif_encoder **out_encoder)
     * }
     */
    public static MemorySegment heif_context_get_encoder(SegmentAllocator allocator, MemorySegment context, MemorySegment x1, MemorySegment out_encoder) {
        var mh$ = heif_context_get_encoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_encoder", allocator, context, x1, out_encoder);
            }
            return (MemorySegment)mh$.invokeExact(allocator, context, x1, out_encoder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_have_decoder_for_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_have_decoder_for_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_have_decoder_for_format(enum heif_compression_format format)
     * }
     */
    public static FunctionDescriptor heif_have_decoder_for_format$descriptor() {
        return heif_have_decoder_for_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_have_decoder_for_format(enum heif_compression_format format)
     * }
     */
    public static MethodHandle heif_have_decoder_for_format$handle() {
        return heif_have_decoder_for_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_have_decoder_for_format(enum heif_compression_format format)
     * }
     */
    public static int heif_have_decoder_for_format(int format) {
        var mh$ = heif_have_decoder_for_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_have_decoder_for_format", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_have_encoder_for_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_have_encoder_for_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_have_encoder_for_format(enum heif_compression_format format)
     * }
     */
    public static FunctionDescriptor heif_have_encoder_for_format$descriptor() {
        return heif_have_encoder_for_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_have_encoder_for_format(enum heif_compression_format format)
     * }
     */
    public static MethodHandle heif_have_encoder_for_format$handle() {
        return heif_have_encoder_for_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_have_encoder_for_format(enum heif_compression_format format)
     * }
     */
    public static int heif_have_encoder_for_format(int format) {
        var mh$ = heif_have_encoder_for_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_have_encoder_for_format", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_get_encoder_for_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_get_encoder_for_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_encoder_for_format(struct heif_context *context, enum heif_compression_format format, struct heif_encoder **)
     * }
     */
    public static FunctionDescriptor heif_context_get_encoder_for_format$descriptor() {
        return heif_context_get_encoder_for_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_get_encoder_for_format(struct heif_context *context, enum heif_compression_format format, struct heif_encoder **)
     * }
     */
    public static MethodHandle heif_context_get_encoder_for_format$handle() {
        return heif_context_get_encoder_for_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_get_encoder_for_format(struct heif_context *context, enum heif_compression_format format, struct heif_encoder **)
     * }
     */
    public static MemorySegment heif_context_get_encoder_for_format(SegmentAllocator allocator, MemorySegment context, int format, MemorySegment x2) {
        var mh$ = heif_context_get_encoder_for_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_get_encoder_for_format", allocator, context, format, x2);
            }
            return (MemorySegment)mh$.invokeExact(allocator, context, format, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_encoder_release(struct heif_encoder *)
     * }
     */
    public static FunctionDescriptor heif_encoder_release$descriptor() {
        return heif_encoder_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_encoder_release(struct heif_encoder *)
     * }
     */
    public static MethodHandle heif_encoder_release$handle() {
        return heif_encoder_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_encoder_release(struct heif_encoder *)
     * }
     */
    public static void heif_encoder_release(MemorySegment x0) {
        var mh$ = heif_encoder_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_release", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_encoder_get_name(const struct heif_encoder *)
     * }
     */
    public static FunctionDescriptor heif_encoder_get_name$descriptor() {
        return heif_encoder_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_encoder_get_name(const struct heif_encoder *)
     * }
     */
    public static MethodHandle heif_encoder_get_name$handle() {
        return heif_encoder_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_encoder_get_name(const struct heif_encoder *)
     * }
     */
    public static MemorySegment heif_encoder_get_name(MemorySegment x0) {
        var mh$ = heif_encoder_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_get_name", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_lossy_quality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_lossy_quality"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_lossy_quality(struct heif_encoder *, int quality)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_lossy_quality$descriptor() {
        return heif_encoder_set_lossy_quality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_lossy_quality(struct heif_encoder *, int quality)
     * }
     */
    public static MethodHandle heif_encoder_set_lossy_quality$handle() {
        return heif_encoder_set_lossy_quality.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_lossy_quality(struct heif_encoder *, int quality)
     * }
     */
    public static MemorySegment heif_encoder_set_lossy_quality(SegmentAllocator allocator, MemorySegment x0, int quality) {
        var mh$ = heif_encoder_set_lossy_quality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_lossy_quality", allocator, x0, quality);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, quality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_lossless {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_lossless"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_lossless(struct heif_encoder *, int enable)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_lossless$descriptor() {
        return heif_encoder_set_lossless.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_lossless(struct heif_encoder *, int enable)
     * }
     */
    public static MethodHandle heif_encoder_set_lossless$handle() {
        return heif_encoder_set_lossless.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_lossless(struct heif_encoder *, int enable)
     * }
     */
    public static MemorySegment heif_encoder_set_lossless(SegmentAllocator allocator, MemorySegment x0, int enable) {
        var mh$ = heif_encoder_set_lossless.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_lossless", allocator, x0, enable);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_logging_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_logging_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_logging_level(struct heif_encoder *, int level)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_logging_level$descriptor() {
        return heif_encoder_set_logging_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_logging_level(struct heif_encoder *, int level)
     * }
     */
    public static MethodHandle heif_encoder_set_logging_level$handle() {
        return heif_encoder_set_logging_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_logging_level(struct heif_encoder *, int level)
     * }
     */
    public static MemorySegment heif_encoder_set_logging_level(SegmentAllocator allocator, MemorySegment x0, int level) {
        var mh$ = heif_encoder_set_logging_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_logging_level", allocator, x0, level);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_list_parameters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_list_parameters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const struct heif_encoder_parameter *const *heif_encoder_list_parameters(struct heif_encoder *)
     * }
     */
    public static FunctionDescriptor heif_encoder_list_parameters$descriptor() {
        return heif_encoder_list_parameters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const struct heif_encoder_parameter *const *heif_encoder_list_parameters(struct heif_encoder *)
     * }
     */
    public static MethodHandle heif_encoder_list_parameters$handle() {
        return heif_encoder_list_parameters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const struct heif_encoder_parameter *const *heif_encoder_list_parameters(struct heif_encoder *)
     * }
     */
    public static MemorySegment heif_encoder_list_parameters(MemorySegment x0) {
        var mh$ = heif_encoder_list_parameters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_list_parameters", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *heif_encoder_parameter_get_name(const struct heif_encoder_parameter *)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_get_name$descriptor() {
        return heif_encoder_parameter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *heif_encoder_parameter_get_name(const struct heif_encoder_parameter *)
     * }
     */
    public static MethodHandle heif_encoder_parameter_get_name$handle() {
        return heif_encoder_parameter_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * const char *heif_encoder_parameter_get_name(const struct heif_encoder_parameter *)
     * }
     */
    public static MemorySegment heif_encoder_parameter_get_name(MemorySegment x0) {
        var mh$ = heif_encoder_parameter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_get_name", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int heif_encoder_parameter_type_integer = (int)1L;
    /**
     * {@snippet lang=c :
     * enum heif_encoder_parameter_type.heif_encoder_parameter_type_integer = 1
     * }
     */
    public static int heif_encoder_parameter_type_integer() {
        return heif_encoder_parameter_type_integer;
    }
    private static final int heif_encoder_parameter_type_boolean = (int)2L;
    /**
     * {@snippet lang=c :
     * enum heif_encoder_parameter_type.heif_encoder_parameter_type_boolean = 2
     * }
     */
    public static int heif_encoder_parameter_type_boolean() {
        return heif_encoder_parameter_type_boolean;
    }
    private static final int heif_encoder_parameter_type_string = (int)3L;
    /**
     * {@snippet lang=c :
     * enum heif_encoder_parameter_type.heif_encoder_parameter_type_string = 3
     * }
     */
    public static int heif_encoder_parameter_type_string() {
        return heif_encoder_parameter_type_string;
    }

    private static class heif_encoder_parameter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * enum heif_encoder_parameter_type heif_encoder_parameter_get_type(const struct heif_encoder_parameter *)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_get_type$descriptor() {
        return heif_encoder_parameter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * enum heif_encoder_parameter_type heif_encoder_parameter_get_type(const struct heif_encoder_parameter *)
     * }
     */
    public static MethodHandle heif_encoder_parameter_get_type$handle() {
        return heif_encoder_parameter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * enum heif_encoder_parameter_type heif_encoder_parameter_get_type(const struct heif_encoder_parameter *)
     * }
     */
    public static int heif_encoder_parameter_get_type(MemorySegment x0) {
        var mh$ = heif_encoder_parameter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_get_type", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_get_valid_integer_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_get_valid_integer_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_integer_range(const struct heif_encoder_parameter *, int *have_minimum_maximum, int *minimum, int *maximum)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_get_valid_integer_range$descriptor() {
        return heif_encoder_parameter_get_valid_integer_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_integer_range(const struct heif_encoder_parameter *, int *have_minimum_maximum, int *minimum, int *maximum)
     * }
     */
    public static MethodHandle heif_encoder_parameter_get_valid_integer_range$handle() {
        return heif_encoder_parameter_get_valid_integer_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_integer_range(const struct heif_encoder_parameter *, int *have_minimum_maximum, int *minimum, int *maximum)
     * }
     */
    public static MemorySegment heif_encoder_parameter_get_valid_integer_range(SegmentAllocator allocator, MemorySegment x0, MemorySegment have_minimum_maximum, MemorySegment minimum, MemorySegment maximum) {
        var mh$ = heif_encoder_parameter_get_valid_integer_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_get_valid_integer_range", allocator, x0, have_minimum_maximum, minimum, maximum);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, have_minimum_maximum, minimum, maximum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_get_valid_integer_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_get_valid_integer_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_integer_values(const struct heif_encoder_parameter *, int *have_minimum, int *have_maximum, int *minimum, int *maximum, int *num_valid_values, const int **out_integer_array)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_get_valid_integer_values$descriptor() {
        return heif_encoder_parameter_get_valid_integer_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_integer_values(const struct heif_encoder_parameter *, int *have_minimum, int *have_maximum, int *minimum, int *maximum, int *num_valid_values, const int **out_integer_array)
     * }
     */
    public static MethodHandle heif_encoder_parameter_get_valid_integer_values$handle() {
        return heif_encoder_parameter_get_valid_integer_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_integer_values(const struct heif_encoder_parameter *, int *have_minimum, int *have_maximum, int *minimum, int *maximum, int *num_valid_values, const int **out_integer_array)
     * }
     */
    public static MemorySegment heif_encoder_parameter_get_valid_integer_values(SegmentAllocator allocator, MemorySegment x0, MemorySegment have_minimum, MemorySegment have_maximum, MemorySegment minimum, MemorySegment maximum, MemorySegment num_valid_values, MemorySegment out_integer_array) {
        var mh$ = heif_encoder_parameter_get_valid_integer_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_get_valid_integer_values", allocator, x0, have_minimum, have_maximum, minimum, maximum, num_valid_values, out_integer_array);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, have_minimum, have_maximum, minimum, maximum, num_valid_values, out_integer_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_get_valid_string_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_get_valid_string_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_string_values(const struct heif_encoder_parameter *, const char *const **out_stringarray)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_get_valid_string_values$descriptor() {
        return heif_encoder_parameter_get_valid_string_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_string_values(const struct heif_encoder_parameter *, const char *const **out_stringarray)
     * }
     */
    public static MethodHandle heif_encoder_parameter_get_valid_string_values$handle() {
        return heif_encoder_parameter_get_valid_string_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_get_valid_string_values(const struct heif_encoder_parameter *, const char *const **out_stringarray)
     * }
     */
    public static MemorySegment heif_encoder_parameter_get_valid_string_values(SegmentAllocator allocator, MemorySegment x0, MemorySegment out_stringarray) {
        var mh$ = heif_encoder_parameter_get_valid_string_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_get_valid_string_values", allocator, x0, out_stringarray);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, out_stringarray);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_parameter_integer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_parameter_integer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_integer(struct heif_encoder *, const char *parameter_name, int value)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_parameter_integer$descriptor() {
        return heif_encoder_set_parameter_integer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_integer(struct heif_encoder *, const char *parameter_name, int value)
     * }
     */
    public static MethodHandle heif_encoder_set_parameter_integer$handle() {
        return heif_encoder_set_parameter_integer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_integer(struct heif_encoder *, const char *parameter_name, int value)
     * }
     */
    public static MemorySegment heif_encoder_set_parameter_integer(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, int value) {
        var mh$ = heif_encoder_set_parameter_integer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_parameter_integer", allocator, x0, parameter_name, value);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_get_parameter_integer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_get_parameter_integer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_integer(struct heif_encoder *, const char *parameter_name, int *value)
     * }
     */
    public static FunctionDescriptor heif_encoder_get_parameter_integer$descriptor() {
        return heif_encoder_get_parameter_integer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_integer(struct heif_encoder *, const char *parameter_name, int *value)
     * }
     */
    public static MethodHandle heif_encoder_get_parameter_integer$handle() {
        return heif_encoder_get_parameter_integer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_integer(struct heif_encoder *, const char *parameter_name, int *value)
     * }
     */
    public static MemorySegment heif_encoder_get_parameter_integer(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_get_parameter_integer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_get_parameter_integer", allocator, x0, parameter_name, value);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_integer_valid_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_integer_valid_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_integer_valid_range(struct heif_encoder *, const char *parameter_name, int *have_minimum_maximum, int *minimum, int *maximum)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_integer_valid_range$descriptor() {
        return heif_encoder_parameter_integer_valid_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_integer_valid_range(struct heif_encoder *, const char *parameter_name, int *have_minimum_maximum, int *minimum, int *maximum)
     * }
     */
    public static MethodHandle heif_encoder_parameter_integer_valid_range$handle() {
        return heif_encoder_parameter_integer_valid_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_integer_valid_range(struct heif_encoder *, const char *parameter_name, int *have_minimum_maximum, int *minimum, int *maximum)
     * }
     */
    public static MemorySegment heif_encoder_parameter_integer_valid_range(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment have_minimum_maximum, MemorySegment minimum, MemorySegment maximum) {
        var mh$ = heif_encoder_parameter_integer_valid_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_integer_valid_range", allocator, x0, parameter_name, have_minimum_maximum, minimum, maximum);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, have_minimum_maximum, minimum, maximum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_parameter_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_parameter_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_boolean(struct heif_encoder *, const char *parameter_name, int value)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_parameter_boolean$descriptor() {
        return heif_encoder_set_parameter_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_boolean(struct heif_encoder *, const char *parameter_name, int value)
     * }
     */
    public static MethodHandle heif_encoder_set_parameter_boolean$handle() {
        return heif_encoder_set_parameter_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_boolean(struct heif_encoder *, const char *parameter_name, int value)
     * }
     */
    public static MemorySegment heif_encoder_set_parameter_boolean(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, int value) {
        var mh$ = heif_encoder_set_parameter_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_parameter_boolean", allocator, x0, parameter_name, value);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_get_parameter_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_get_parameter_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_boolean(struct heif_encoder *, const char *parameter_name, int *value)
     * }
     */
    public static FunctionDescriptor heif_encoder_get_parameter_boolean$descriptor() {
        return heif_encoder_get_parameter_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_boolean(struct heif_encoder *, const char *parameter_name, int *value)
     * }
     */
    public static MethodHandle heif_encoder_get_parameter_boolean$handle() {
        return heif_encoder_get_parameter_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_boolean(struct heif_encoder *, const char *parameter_name, int *value)
     * }
     */
    public static MemorySegment heif_encoder_get_parameter_boolean(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_get_parameter_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_get_parameter_boolean", allocator, x0, parameter_name, value);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_parameter_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_parameter_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_string(struct heif_encoder *, const char *parameter_name, const char *value)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_parameter_string$descriptor() {
        return heif_encoder_set_parameter_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_string(struct heif_encoder *, const char *parameter_name, const char *value)
     * }
     */
    public static MethodHandle heif_encoder_set_parameter_string$handle() {
        return heif_encoder_set_parameter_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter_string(struct heif_encoder *, const char *parameter_name, const char *value)
     * }
     */
    public static MemorySegment heif_encoder_set_parameter_string(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_set_parameter_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_parameter_string", allocator, x0, parameter_name, value);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_get_parameter_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_get_parameter_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_string(struct heif_encoder *, const char *parameter_name, char *value, int value_size)
     * }
     */
    public static FunctionDescriptor heif_encoder_get_parameter_string$descriptor() {
        return heif_encoder_get_parameter_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_string(struct heif_encoder *, const char *parameter_name, char *value, int value_size)
     * }
     */
    public static MethodHandle heif_encoder_get_parameter_string$handle() {
        return heif_encoder_get_parameter_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter_string(struct heif_encoder *, const char *parameter_name, char *value, int value_size)
     * }
     */
    public static MemorySegment heif_encoder_get_parameter_string(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment value, int value_size) {
        var mh$ = heif_encoder_get_parameter_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_get_parameter_string", allocator, x0, parameter_name, value, value_size);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value, value_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_string_valid_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_string_valid_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_string_valid_values(struct heif_encoder *, const char *parameter_name, const char *const **out_stringarray)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_string_valid_values$descriptor() {
        return heif_encoder_parameter_string_valid_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_string_valid_values(struct heif_encoder *, const char *parameter_name, const char *const **out_stringarray)
     * }
     */
    public static MethodHandle heif_encoder_parameter_string_valid_values$handle() {
        return heif_encoder_parameter_string_valid_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_string_valid_values(struct heif_encoder *, const char *parameter_name, const char *const **out_stringarray)
     * }
     */
    public static MemorySegment heif_encoder_parameter_string_valid_values(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment out_stringarray) {
        var mh$ = heif_encoder_parameter_string_valid_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_string_valid_values", allocator, x0, parameter_name, out_stringarray);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, out_stringarray);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_parameter_integer_valid_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_parameter_integer_valid_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_integer_valid_values(struct heif_encoder *, const char *parameter_name, int *have_minimum, int *have_maximum, int *minimum, int *maximum, int *num_valid_values, const int **out_integer_array)
     * }
     */
    public static FunctionDescriptor heif_encoder_parameter_integer_valid_values$descriptor() {
        return heif_encoder_parameter_integer_valid_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_integer_valid_values(struct heif_encoder *, const char *parameter_name, int *have_minimum, int *have_maximum, int *minimum, int *maximum, int *num_valid_values, const int **out_integer_array)
     * }
     */
    public static MethodHandle heif_encoder_parameter_integer_valid_values$handle() {
        return heif_encoder_parameter_integer_valid_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_parameter_integer_valid_values(struct heif_encoder *, const char *parameter_name, int *have_minimum, int *have_maximum, int *minimum, int *maximum, int *num_valid_values, const int **out_integer_array)
     * }
     */
    public static MemorySegment heif_encoder_parameter_integer_valid_values(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment have_minimum, MemorySegment have_maximum, MemorySegment minimum, MemorySegment maximum, MemorySegment num_valid_values, MemorySegment out_integer_array) {
        var mh$ = heif_encoder_parameter_integer_valid_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_parameter_integer_valid_values", allocator, x0, parameter_name, have_minimum, have_maximum, minimum, maximum, num_valid_values, out_integer_array);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, have_minimum, have_maximum, minimum, maximum, num_valid_values, out_integer_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_set_parameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_set_parameter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter(struct heif_encoder *, const char *parameter_name, const char *value)
     * }
     */
    public static FunctionDescriptor heif_encoder_set_parameter$descriptor() {
        return heif_encoder_set_parameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter(struct heif_encoder *, const char *parameter_name, const char *value)
     * }
     */
    public static MethodHandle heif_encoder_set_parameter$handle() {
        return heif_encoder_set_parameter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_set_parameter(struct heif_encoder *, const char *parameter_name, const char *value)
     * }
     */
    public static MemorySegment heif_encoder_set_parameter(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment value) {
        var mh$ = heif_encoder_set_parameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_set_parameter", allocator, x0, parameter_name, value);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_get_parameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_get_parameter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter(struct heif_encoder *, const char *parameter_name, char *value_ptr, int value_size)
     * }
     */
    public static FunctionDescriptor heif_encoder_get_parameter$descriptor() {
        return heif_encoder_get_parameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter(struct heif_encoder *, const char *parameter_name, char *value_ptr, int value_size)
     * }
     */
    public static MethodHandle heif_encoder_get_parameter$handle() {
        return heif_encoder_get_parameter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_encoder_get_parameter(struct heif_encoder *, const char *parameter_name, char *value_ptr, int value_size)
     * }
     */
    public static MemorySegment heif_encoder_get_parameter(SegmentAllocator allocator, MemorySegment x0, MemorySegment parameter_name, MemorySegment value_ptr, int value_size) {
        var mh$ = heif_encoder_get_parameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_get_parameter", allocator, x0, parameter_name, value_ptr, value_size);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, parameter_name, value_ptr, value_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_has_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_has_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_encoder_has_default(struct heif_encoder *, const char *parameter_name)
     * }
     */
    public static FunctionDescriptor heif_encoder_has_default$descriptor() {
        return heif_encoder_has_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_encoder_has_default(struct heif_encoder *, const char *parameter_name)
     * }
     */
    public static MethodHandle heif_encoder_has_default$handle() {
        return heif_encoder_has_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_encoder_has_default(struct heif_encoder *, const char *parameter_name)
     * }
     */
    public static int heif_encoder_has_default(MemorySegment x0, MemorySegment parameter_name) {
        var mh$ = heif_encoder_has_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_has_default", x0, parameter_name);
            }
            return (int)mh$.invokeExact(x0, parameter_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * struct heif_encoding_options *heif_encoding_options_alloc()
     * }
     */
    public static class heif_encoding_options_alloc {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                heif_h.C_POINTER        );
        private static final MemorySegment ADDR = heif_h.findOrThrow("heif_encoding_options_alloc");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private heif_encoding_options_alloc(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * struct heif_encoding_options *heif_encoding_options_alloc()
         * }
         */
        public static heif_encoding_options_alloc makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new heif_encoding_options_alloc(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("heif_encoding_options_alloc", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class heif_encoding_options_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoding_options_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_encoding_options_free(struct heif_encoding_options *)
     * }
     */
    public static FunctionDescriptor heif_encoding_options_free$descriptor() {
        return heif_encoding_options_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_encoding_options_free(struct heif_encoding_options *)
     * }
     */
    public static MethodHandle heif_encoding_options_free$handle() {
        return heif_encoding_options_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_encoding_options_free(struct heif_encoding_options *)
     * }
     */
    public static void heif_encoding_options_free(MemorySegment x0) {
        var mh$ = heif_encoding_options_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoding_options_free", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_encode_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_encode_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_encode_image(struct heif_context *, const struct heif_image *image, struct heif_encoder *encoder, const struct heif_encoding_options *options, struct heif_image_handle **out_image_handle)
     * }
     */
    public static FunctionDescriptor heif_context_encode_image$descriptor() {
        return heif_context_encode_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_encode_image(struct heif_context *, const struct heif_image *image, struct heif_encoder *encoder, const struct heif_encoding_options *options, struct heif_image_handle **out_image_handle)
     * }
     */
    public static MethodHandle heif_context_encode_image$handle() {
        return heif_context_encode_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_encode_image(struct heif_context *, const struct heif_image *image, struct heif_encoder *encoder, const struct heif_encoding_options *options, struct heif_image_handle **out_image_handle)
     * }
     */
    public static MemorySegment heif_context_encode_image(SegmentAllocator allocator, MemorySegment x0, MemorySegment image, MemorySegment encoder, MemorySegment options, MemorySegment out_image_handle) {
        var mh$ = heif_context_encode_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_encode_image", allocator, x0, image, encoder, options, out_image_handle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, image, encoder, options, out_image_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_set_primary_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_set_primary_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_set_primary_image(struct heif_context *, struct heif_image_handle *image_handle)
     * }
     */
    public static FunctionDescriptor heif_context_set_primary_image$descriptor() {
        return heif_context_set_primary_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_set_primary_image(struct heif_context *, struct heif_image_handle *image_handle)
     * }
     */
    public static MethodHandle heif_context_set_primary_image$handle() {
        return heif_context_set_primary_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_set_primary_image(struct heif_context *, struct heif_image_handle *image_handle)
     * }
     */
    public static MemorySegment heif_context_set_primary_image(SegmentAllocator allocator, MemorySegment x0, MemorySegment image_handle) {
        var mh$ = heif_context_set_primary_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_set_primary_image", allocator, x0, image_handle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, image_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_encode_thumbnail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_encode_thumbnail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_encode_thumbnail(struct heif_context *, const struct heif_image *image, const struct heif_image_handle *master_image_handle, struct heif_encoder *encoder, const struct heif_encoding_options *options, int bbox_size, struct heif_image_handle **out_thumb_image_handle)
     * }
     */
    public static FunctionDescriptor heif_context_encode_thumbnail$descriptor() {
        return heif_context_encode_thumbnail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_encode_thumbnail(struct heif_context *, const struct heif_image *image, const struct heif_image_handle *master_image_handle, struct heif_encoder *encoder, const struct heif_encoding_options *options, int bbox_size, struct heif_image_handle **out_thumb_image_handle)
     * }
     */
    public static MethodHandle heif_context_encode_thumbnail$handle() {
        return heif_context_encode_thumbnail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_encode_thumbnail(struct heif_context *, const struct heif_image *image, const struct heif_image_handle *master_image_handle, struct heif_encoder *encoder, const struct heif_encoding_options *options, int bbox_size, struct heif_image_handle **out_thumb_image_handle)
     * }
     */
    public static MemorySegment heif_context_encode_thumbnail(SegmentAllocator allocator, MemorySegment x0, MemorySegment image, MemorySegment master_image_handle, MemorySegment encoder, MemorySegment options, int bbox_size, MemorySegment out_thumb_image_handle) {
        var mh$ = heif_context_encode_thumbnail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_encode_thumbnail", allocator, x0, image, master_image_handle, encoder, options, bbox_size, out_thumb_image_handle);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, image, master_image_handle, encoder, options, bbox_size, out_thumb_image_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_assign_thumbnail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_assign_thumbnail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_assign_thumbnail(struct heif_context *, const struct heif_image_handle *master_image, const struct heif_image_handle *thumbnail_image)
     * }
     */
    public static FunctionDescriptor heif_context_assign_thumbnail$descriptor() {
        return heif_context_assign_thumbnail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_assign_thumbnail(struct heif_context *, const struct heif_image_handle *master_image, const struct heif_image_handle *thumbnail_image)
     * }
     */
    public static MethodHandle heif_context_assign_thumbnail$handle() {
        return heif_context_assign_thumbnail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_assign_thumbnail(struct heif_context *, const struct heif_image_handle *master_image, const struct heif_image_handle *thumbnail_image)
     * }
     */
    public static MemorySegment heif_context_assign_thumbnail(SegmentAllocator allocator, MemorySegment x0, MemorySegment master_image, MemorySegment thumbnail_image) {
        var mh$ = heif_context_assign_thumbnail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_assign_thumbnail", allocator, x0, master_image, thumbnail_image);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, master_image, thumbnail_image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_add_exif_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_add_exif_metadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_add_exif_metadata(struct heif_context *, const struct heif_image_handle *image_handle, const void *data, int size)
     * }
     */
    public static FunctionDescriptor heif_context_add_exif_metadata$descriptor() {
        return heif_context_add_exif_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_add_exif_metadata(struct heif_context *, const struct heif_image_handle *image_handle, const void *data, int size)
     * }
     */
    public static MethodHandle heif_context_add_exif_metadata$handle() {
        return heif_context_add_exif_metadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_add_exif_metadata(struct heif_context *, const struct heif_image_handle *image_handle, const void *data, int size)
     * }
     */
    public static MemorySegment heif_context_add_exif_metadata(SegmentAllocator allocator, MemorySegment x0, MemorySegment image_handle, MemorySegment data, int size) {
        var mh$ = heif_context_add_exif_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_add_exif_metadata", allocator, x0, image_handle, data, size);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, image_handle, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_add_XMP_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_add_XMP_metadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_add_XMP_metadata(struct heif_context *, const struct heif_image_handle *image_handle, const void *data, int size)
     * }
     */
    public static FunctionDescriptor heif_context_add_XMP_metadata$descriptor() {
        return heif_context_add_XMP_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_add_XMP_metadata(struct heif_context *, const struct heif_image_handle *image_handle, const void *data, int size)
     * }
     */
    public static MethodHandle heif_context_add_XMP_metadata$handle() {
        return heif_context_add_XMP_metadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_add_XMP_metadata(struct heif_context *, const struct heif_image_handle *image_handle, const void *data, int size)
     * }
     */
    public static MemorySegment heif_context_add_XMP_metadata(SegmentAllocator allocator, MemorySegment x0, MemorySegment image_handle, MemorySegment data, int size) {
        var mh$ = heif_context_add_XMP_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_add_XMP_metadata", allocator, x0, image_handle, data, size);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, image_handle, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_context_add_generic_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_context_add_generic_metadata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_context_add_generic_metadata(struct heif_context *ctx, const struct heif_image_handle *image_handle, const void *data, int size, const char *item_type, const char *content_type)
     * }
     */
    public static FunctionDescriptor heif_context_add_generic_metadata$descriptor() {
        return heif_context_add_generic_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_context_add_generic_metadata(struct heif_context *ctx, const struct heif_image_handle *image_handle, const void *data, int size, const char *item_type, const char *content_type)
     * }
     */
    public static MethodHandle heif_context_add_generic_metadata$handle() {
        return heif_context_add_generic_metadata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_context_add_generic_metadata(struct heif_context *ctx, const struct heif_image_handle *image_handle, const void *data, int size, const char *item_type, const char *content_type)
     * }
     */
    public static MemorySegment heif_context_add_generic_metadata(SegmentAllocator allocator, MemorySegment ctx, MemorySegment image_handle, MemorySegment data, int size, MemorySegment item_type, MemorySegment content_type) {
        var mh$ = heif_context_add_generic_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_context_add_generic_metadata", allocator, ctx, image_handle, data, size, item_type, content_type);
            }
            return (MemorySegment)mh$.invokeExact(allocator, ctx, image_handle, data, size, item_type, content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_create(int width, int height, enum heif_colorspace colorspace, enum heif_chroma chroma, struct heif_image **out_image)
     * }
     */
    public static FunctionDescriptor heif_image_create$descriptor() {
        return heif_image_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_create(int width, int height, enum heif_colorspace colorspace, enum heif_chroma chroma, struct heif_image **out_image)
     * }
     */
    public static MethodHandle heif_image_create$handle() {
        return heif_image_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_create(int width, int height, enum heif_colorspace colorspace, enum heif_chroma chroma, struct heif_image **out_image)
     * }
     */
    public static MemorySegment heif_image_create(SegmentAllocator allocator, int width, int height, int colorspace, int chroma, MemorySegment out_image) {
        var mh$ = heif_image_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_create", allocator, width, height, colorspace, chroma, out_image);
            }
            return (MemorySegment)mh$.invokeExact(allocator, width, height, colorspace, chroma, out_image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_add_plane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_INT,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_add_plane"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_image_add_plane(struct heif_image *image, enum heif_channel channel, int width, int height, int bit_depth)
     * }
     */
    public static FunctionDescriptor heif_image_add_plane$descriptor() {
        return heif_image_add_plane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_image_add_plane(struct heif_image *image, enum heif_channel channel, int width, int height, int bit_depth)
     * }
     */
    public static MethodHandle heif_image_add_plane$handle() {
        return heif_image_add_plane.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_image_add_plane(struct heif_image *image, enum heif_channel channel, int width, int height, int bit_depth)
     * }
     */
    public static MemorySegment heif_image_add_plane(SegmentAllocator allocator, MemorySegment image, int channel, int width, int height, int bit_depth) {
        var mh$ = heif_image_add_plane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_add_plane", allocator, image, channel, width, height, bit_depth);
            }
            return (MemorySegment)mh$.invokeExact(allocator, image, channel, width, height, bit_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_set_premultiplied_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            heif_h.C_POINTER,
            heif_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_set_premultiplied_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void heif_image_set_premultiplied_alpha(struct heif_image *image, int is_premultiplied_alpha)
     * }
     */
    public static FunctionDescriptor heif_image_set_premultiplied_alpha$descriptor() {
        return heif_image_set_premultiplied_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void heif_image_set_premultiplied_alpha(struct heif_image *image, int is_premultiplied_alpha)
     * }
     */
    public static MethodHandle heif_image_set_premultiplied_alpha$handle() {
        return heif_image_set_premultiplied_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void heif_image_set_premultiplied_alpha(struct heif_image *image, int is_premultiplied_alpha)
     * }
     */
    public static void heif_image_set_premultiplied_alpha(MemorySegment image, int is_premultiplied_alpha) {
        var mh$ = heif_image_set_premultiplied_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_set_premultiplied_alpha", image, is_premultiplied_alpha);
            }
            mh$.invokeExact(image, is_premultiplied_alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_image_is_premultiplied_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_image_is_premultiplied_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_image_is_premultiplied_alpha(struct heif_image *image)
     * }
     */
    public static FunctionDescriptor heif_image_is_premultiplied_alpha$descriptor() {
        return heif_image_is_premultiplied_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_image_is_premultiplied_alpha(struct heif_image *image)
     * }
     */
    public static MethodHandle heif_image_is_premultiplied_alpha$handle() {
        return heif_image_is_premultiplied_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_image_is_premultiplied_alpha(struct heif_image *image)
     * }
     */
    public static int heif_image_is_premultiplied_alpha(MemorySegment image) {
        var mh$ = heif_image_is_premultiplied_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_image_is_premultiplied_alpha", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_register_decoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_register_decoder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_register_decoder(struct heif_context *heif, const struct heif_decoder_plugin *)
     * }
     */
    public static FunctionDescriptor heif_register_decoder$descriptor() {
        return heif_register_decoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_register_decoder(struct heif_context *heif, const struct heif_decoder_plugin *)
     * }
     */
    public static MethodHandle heif_register_decoder$handle() {
        return heif_register_decoder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_register_decoder(struct heif_context *heif, const struct heif_decoder_plugin *)
     * }
     */
    public static MemorySegment heif_register_decoder(SegmentAllocator allocator, MemorySegment heif, MemorySegment x1) {
        var mh$ = heif_register_decoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_register_decoder", allocator, heif, x1);
            }
            return (MemorySegment)mh$.invokeExact(allocator, heif, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_register_decoder_plugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_register_decoder_plugin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_register_decoder_plugin(const struct heif_decoder_plugin *)
     * }
     */
    public static FunctionDescriptor heif_register_decoder_plugin$descriptor() {
        return heif_register_decoder_plugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_register_decoder_plugin(const struct heif_decoder_plugin *)
     * }
     */
    public static MethodHandle heif_register_decoder_plugin$handle() {
        return heif_register_decoder_plugin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_register_decoder_plugin(const struct heif_decoder_plugin *)
     * }
     */
    public static MemorySegment heif_register_decoder_plugin(SegmentAllocator allocator, MemorySegment x0) {
        var mh$ = heif_register_decoder_plugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_register_decoder_plugin", allocator, x0);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_register_encoder_plugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_error.layout(),
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_register_encoder_plugin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct heif_error heif_register_encoder_plugin(const struct heif_encoder_plugin *)
     * }
     */
    public static FunctionDescriptor heif_register_encoder_plugin$descriptor() {
        return heif_register_encoder_plugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct heif_error heif_register_encoder_plugin(const struct heif_encoder_plugin *)
     * }
     */
    public static MethodHandle heif_register_encoder_plugin$handle() {
        return heif_register_encoder_plugin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * struct heif_error heif_register_encoder_plugin(const struct heif_encoder_plugin *)
     * }
     */
    public static MemorySegment heif_register_encoder_plugin(SegmentAllocator allocator, MemorySegment x0) {
        var mh$ = heif_register_encoder_plugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_register_encoder_plugin", allocator, x0);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_supportes_lossy_compression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_supportes_lossy_compression"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supportes_lossy_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_supportes_lossy_compression$descriptor() {
        return heif_encoder_descriptor_supportes_lossy_compression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supportes_lossy_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_supportes_lossy_compression$handle() {
        return heif_encoder_descriptor_supportes_lossy_compression.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supportes_lossy_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static int heif_encoder_descriptor_supportes_lossy_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supportes_lossy_compression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_supportes_lossy_compression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class heif_encoder_descriptor_supportes_lossless_compression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    heif_h.findOrThrow("heif_encoder_descriptor_supportes_lossless_compression"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supportes_lossless_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static FunctionDescriptor heif_encoder_descriptor_supportes_lossless_compression$descriptor() {
        return heif_encoder_descriptor_supportes_lossless_compression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supportes_lossless_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static MethodHandle heif_encoder_descriptor_supportes_lossless_compression$handle() {
        return heif_encoder_descriptor_supportes_lossless_compression.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int heif_encoder_descriptor_supportes_lossless_compression(const struct heif_encoder_descriptor *)
     * }
     */
    public static int heif_encoder_descriptor_supportes_lossless_compression(MemorySegment x0) {
        var mh$ = heif_encoder_descriptor_supportes_lossless_compression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("heif_encoder_descriptor_supportes_lossless_compression", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int LIBHEIF_NUMERIC_VERSION = (int)17563648L;
    /**
     * {@snippet lang=c :
     * #define LIBHEIF_NUMERIC_VERSION 17563648
     * }
     */
    public static int LIBHEIF_NUMERIC_VERSION() {
        return LIBHEIF_NUMERIC_VERSION;
    }
    /**
     * {@snippet lang=c :
     * #define LIBHEIF_VERSION "1.12.0"
     * }
     */
    public static MemorySegment LIBHEIF_VERSION() {
        class Holder {
            static final MemorySegment LIBHEIF_VERSION
                = heif_h.LIBRARY_ARENA.allocateFrom("1.12.0");
        }
        return Holder.LIBHEIF_VERSION;
    }
    private static final int LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA 2
     * }
     */
    public static int LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA() {
        return LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA;
    }
    private static final int LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH = (int)4L;
    /**
     * {@snippet lang=c :
     * #define LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH 4
     * }
     */
    public static int LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH() {
        return LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH;
    }
    private static final int heif_chroma_interleaved_24bit = (int)10L;
    /**
     * {@snippet lang=c :
     * #define heif_chroma_interleaved_24bit 10
     * }
     */
    public static int heif_chroma_interleaved_24bit() {
        return heif_chroma_interleaved_24bit;
    }
    private static final int heif_chroma_interleaved_32bit = (int)11L;
    /**
     * {@snippet lang=c :
     * #define heif_chroma_interleaved_32bit 11
     * }
     */
    public static int heif_chroma_interleaved_32bit() {
        return heif_chroma_interleaved_32bit;
    }
}

