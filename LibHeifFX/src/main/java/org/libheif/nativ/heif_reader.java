// Generated by jextract

package org.libheif.nativ;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_reader {
 *     int reader_api_version;
 *     int64_t (*get_position)(void *);
 *     int (*read)(void *, size_t, void *);
 *     int (*seek)(int64_t, void *);
 *     enum heif_reader_grow_status (*wait_for_file_size)(int64_t, void *);
 * }
 * }
 */
public class heif_reader {

    heif_reader() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_INT.withName("reader_api_version"),
        MemoryLayout.paddingLayout(4),
        heif_h.C_POINTER.withName("get_position"),
        heif_h.C_POINTER.withName("read"),
        heif_h.C_POINTER.withName("seek"),
        heif_h.C_POINTER.withName("wait_for_file_size")
    ).withName("heif_reader");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt reader_api_version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reader_api_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reader_api_version
     * }
     */
    public static final OfInt reader_api_version$layout() {
        return reader_api_version$LAYOUT;
    }

    private static final long reader_api_version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reader_api_version
     * }
     */
    public static final long reader_api_version$offset() {
        return reader_api_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reader_api_version
     * }
     */
    public static int reader_api_version(MemorySegment struct) {
        return struct.get(reader_api_version$LAYOUT, reader_api_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reader_api_version
     * }
     */
    public static void reader_api_version(MemorySegment struct, int fieldValue) {
        struct.set(reader_api_version$LAYOUT, reader_api_version$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int64_t (*get_position)(void *)
     * }
     */
    public static class get_position {

        get_position() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = heif_h.upcallHandle(get_position.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_position.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_position$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t (*get_position)(void *)
     * }
     */
    public static final AddressLayout get_position$layout() {
        return get_position$LAYOUT;
    }

    private static final long get_position$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t (*get_position)(void *)
     * }
     */
    public static final long get_position$offset() {
        return get_position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t (*get_position)(void *)
     * }
     */
    public static MemorySegment get_position(MemorySegment struct) {
        return struct.get(get_position$LAYOUT, get_position$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t (*get_position)(void *)
     * }
     */
    public static void get_position(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_position$LAYOUT, get_position$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read)(void *, size_t, void *)
     * }
     */
    public static class read {

        read() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_POINTER,
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = heif_h.upcallHandle(read.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read)(void *, size_t, void *)
     * }
     */
    public static final AddressLayout read$layout() {
        return read$LAYOUT;
    }

    private static final long read$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read)(void *, size_t, void *)
     * }
     */
    public static final long read$offset() {
        return read$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read)(void *, size_t, void *)
     * }
     */
    public static MemorySegment read(MemorySegment struct) {
        return struct.get(read$LAYOUT, read$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read)(void *, size_t, void *)
     * }
     */
    public static void read(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read$LAYOUT, read$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*seek)(int64_t, void *)
     * }
     */
    public static class seek {

        seek() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(long _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = heif_h.upcallHandle(seek.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(seek.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,long _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout seek$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seek"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*seek)(int64_t, void *)
     * }
     */
    public static final AddressLayout seek$layout() {
        return seek$LAYOUT;
    }

    private static final long seek$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*seek)(int64_t, void *)
     * }
     */
    public static final long seek$offset() {
        return seek$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*seek)(int64_t, void *)
     * }
     */
    public static MemorySegment seek(MemorySegment struct) {
        return struct.get(seek$LAYOUT, seek$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*seek)(int64_t, void *)
     * }
     */
    public static void seek(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seek$LAYOUT, seek$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t, void *)
     * }
     */
    public static class wait_for_file_size {

        wait_for_file_size() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(long _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            heif_h.C_INT,
            heif_h.C_LONG_LONG,
            heif_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = heif_h.upcallHandle(wait_for_file_size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(wait_for_file_size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,long _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout wait_for_file_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wait_for_file_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t, void *)
     * }
     */
    public static final AddressLayout wait_for_file_size$layout() {
        return wait_for_file_size$LAYOUT;
    }

    private static final long wait_for_file_size$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t, void *)
     * }
     */
    public static final long wait_for_file_size$offset() {
        return wait_for_file_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t, void *)
     * }
     */
    public static MemorySegment wait_for_file_size(MemorySegment struct) {
        return struct.get(wait_for_file_size$LAYOUT, wait_for_file_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_reader_grow_status (*wait_for_file_size)(int64_t, void *)
     * }
     */
    public static void wait_for_file_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wait_for_file_size$LAYOUT, wait_for_file_size$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

