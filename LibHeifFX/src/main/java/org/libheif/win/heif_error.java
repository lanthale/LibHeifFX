// Generated by jextract

package org.libheif.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct heif_error {
 *     enum heif_error_code code;
 *     enum heif_suberror_code subcode;
 *     char* message;
 * };
 * }
 */
public class heif_error {

    public static MemoryLayout $LAYOUT() {
        return constants$1.const$1;
    }
    public static VarHandle code$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum heif_error_code code;
     * }
     */
    public static int code$get(MemorySegment seg) {
        return (int)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum heif_error_code code;
     * }
     */
    public static void code$set(MemorySegment seg, int x) {
        constants$1.const$2.set(seg, x);
    }
    public static int code$get(MemorySegment seg, long index) {
        return (int)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void code$set(MemorySegment seg, long index, int x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subcode$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum heif_suberror_code subcode;
     * }
     */
    public static int subcode$get(MemorySegment seg) {
        return (int)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum heif_suberror_code subcode;
     * }
     */
    public static void subcode$set(MemorySegment seg, int x) {
        constants$1.const$3.set(seg, x);
    }
    public static int subcode$get(MemorySegment seg, long index) {
        return (int)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void subcode$set(MemorySegment seg, long index, int x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle message$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* message;
     * }
     */
    public static MemorySegment message$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* message;
     * }
     */
    public static void message$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$4.set(seg, x);
    }
    public static MemorySegment message$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void message$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


