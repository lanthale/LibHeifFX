// Generated by jextract

package org.libheif.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class heif_encoding_options {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("version"),
        C_CHAR.withName("save_alpha_channel"),
        C_CHAR.withName("macOS_compatibility_workaround"),
        C_CHAR.withName("save_two_colr_boxes_when_ICC_and_nclx_available"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("output_nclx_profile"),
        C_CHAR.withName("macOS_compatibility_workaround_no_nclx_profile"),
        MemoryLayout.paddingLayout(56)
    ).withName("heif_encoding_options");
    public static MemoryLayout $LAYOUT() {
        return heif_encoding_options.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return heif_encoding_options.version$VH;
    }
    public static byte version$get(MemorySegment seg) {
        return (byte)heif_encoding_options.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, byte x) {
        heif_encoding_options.version$VH.set(seg, x);
    }
    public static byte version$get(MemorySegment seg, long index) {
        return (byte)heif_encoding_options.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, byte x) {
        heif_encoding_options.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle save_alpha_channel$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("save_alpha_channel"));
    public static VarHandle save_alpha_channel$VH() {
        return heif_encoding_options.save_alpha_channel$VH;
    }
    public static byte save_alpha_channel$get(MemorySegment seg) {
        return (byte)heif_encoding_options.save_alpha_channel$VH.get(seg);
    }
    public static void save_alpha_channel$set( MemorySegment seg, byte x) {
        heif_encoding_options.save_alpha_channel$VH.set(seg, x);
    }
    public static byte save_alpha_channel$get(MemorySegment seg, long index) {
        return (byte)heif_encoding_options.save_alpha_channel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save_alpha_channel$set(MemorySegment seg, long index, byte x) {
        heif_encoding_options.save_alpha_channel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle macOS_compatibility_workaround$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("macOS_compatibility_workaround"));
    public static VarHandle macOS_compatibility_workaround$VH() {
        return heif_encoding_options.macOS_compatibility_workaround$VH;
    }
    public static byte macOS_compatibility_workaround$get(MemorySegment seg) {
        return (byte)heif_encoding_options.macOS_compatibility_workaround$VH.get(seg);
    }
    public static void macOS_compatibility_workaround$set( MemorySegment seg, byte x) {
        heif_encoding_options.macOS_compatibility_workaround$VH.set(seg, x);
    }
    public static byte macOS_compatibility_workaround$get(MemorySegment seg, long index) {
        return (byte)heif_encoding_options.macOS_compatibility_workaround$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void macOS_compatibility_workaround$set(MemorySegment seg, long index, byte x) {
        heif_encoding_options.macOS_compatibility_workaround$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle save_two_colr_boxes_when_ICC_and_nclx_available$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("save_two_colr_boxes_when_ICC_and_nclx_available"));
    public static VarHandle save_two_colr_boxes_when_ICC_and_nclx_available$VH() {
        return heif_encoding_options.save_two_colr_boxes_when_ICC_and_nclx_available$VH;
    }
    public static byte save_two_colr_boxes_when_ICC_and_nclx_available$get(MemorySegment seg) {
        return (byte)heif_encoding_options.save_two_colr_boxes_when_ICC_and_nclx_available$VH.get(seg);
    }
    public static void save_two_colr_boxes_when_ICC_and_nclx_available$set( MemorySegment seg, byte x) {
        heif_encoding_options.save_two_colr_boxes_when_ICC_and_nclx_available$VH.set(seg, x);
    }
    public static byte save_two_colr_boxes_when_ICC_and_nclx_available$get(MemorySegment seg, long index) {
        return (byte)heif_encoding_options.save_two_colr_boxes_when_ICC_and_nclx_available$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save_two_colr_boxes_when_ICC_and_nclx_available$set(MemorySegment seg, long index, byte x) {
        heif_encoding_options.save_two_colr_boxes_when_ICC_and_nclx_available$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle output_nclx_profile$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("output_nclx_profile")));
    public static VarHandle output_nclx_profile$VH() {
        return heif_encoding_options.output_nclx_profile$VH;
    }
    public static MemoryAddress output_nclx_profile$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)heif_encoding_options.output_nclx_profile$VH.get(seg);
    }
    public static void output_nclx_profile$set( MemorySegment seg, MemoryAddress x) {
        heif_encoding_options.output_nclx_profile$VH.set(seg, x);
    }
    public static MemoryAddress output_nclx_profile$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)heif_encoding_options.output_nclx_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output_nclx_profile$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_encoding_options.output_nclx_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle macOS_compatibility_workaround_no_nclx_profile$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("macOS_compatibility_workaround_no_nclx_profile"));
    public static VarHandle macOS_compatibility_workaround_no_nclx_profile$VH() {
        return heif_encoding_options.macOS_compatibility_workaround_no_nclx_profile$VH;
    }
    public static byte macOS_compatibility_workaround_no_nclx_profile$get(MemorySegment seg) {
        return (byte)heif_encoding_options.macOS_compatibility_workaround_no_nclx_profile$VH.get(seg);
    }
    public static void macOS_compatibility_workaround_no_nclx_profile$set( MemorySegment seg, byte x) {
        heif_encoding_options.macOS_compatibility_workaround_no_nclx_profile$VH.set(seg, x);
    }
    public static byte macOS_compatibility_workaround_no_nclx_profile$get(MemorySegment seg, long index) {
        return (byte)heif_encoding_options.macOS_compatibility_workaround_no_nclx_profile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void macOS_compatibility_workaround_no_nclx_profile$set(MemorySegment seg, long index, byte x) {
        heif_encoding_options.macOS_compatibility_workaround_no_nclx_profile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


