// Generated by jextract

package org.libheif.win;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class heif_reader {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("reader_api_version"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("get_position"),
        Constants$root.C_POINTER$LAYOUT.withName("read"),
        Constants$root.C_POINTER$LAYOUT.withName("seek"),
        Constants$root.C_POINTER$LAYOUT.withName("wait_for_file_size")
    ).withName("heif_reader");
    public static MemoryLayout $LAYOUT() {
        return heif_reader.$struct$LAYOUT;
    }
    static final VarHandle reader_api_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reader_api_version"));
    public static VarHandle reader_api_version$VH() {
        return heif_reader.reader_api_version$VH;
    }
    public static int reader_api_version$get(MemorySegment seg) {
        return (int)heif_reader.reader_api_version$VH.get(seg);
    }
    public static void reader_api_version$set( MemorySegment seg, int x) {
        heif_reader.reader_api_version$VH.set(seg, x);
    }
    public static int reader_api_version$get(MemorySegment seg, long index) {
        return (int)heif_reader.reader_api_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reader_api_version$set(MemorySegment seg, long index, int x) {
        heif_reader.reader_api_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor get_position$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_position$MH = RuntimeHelper.downcallHandle(
        heif_reader.get_position$FUNC
    );
    public interface get_position {

        long apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_position fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_position.class, fi, heif_reader.get_position$FUNC, session);
        }
        static get_position ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (long)heif_reader.get_position$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_position"));
    public static VarHandle get_position$VH() {
        return heif_reader.get_position$VH;
    }
    public static MemoryAddress get_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_reader.get_position$VH.get(seg);
    }
    public static void get_position$set( MemorySegment seg, MemoryAddress x) {
        heif_reader.get_position$VH.set(seg, x);
    }
    public static MemoryAddress get_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_reader.get_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_position$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_reader.get_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_position get_position (MemorySegment segment, MemorySession session) {
        return get_position.ofAddress(get_position$get(segment), session);
    }
    static final FunctionDescriptor read$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read$MH = RuntimeHelper.downcallHandle(
        heif_reader.read$FUNC
    );
    public interface read {

        int apply(java.lang.foreign.MemoryAddress _x0, long _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(read fi, MemorySession session) {
            return RuntimeHelper.upcallStub(read.class, fi, heif_reader.read$FUNC, session);
        }
        static read ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)heif_reader.read$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read"));
    public static VarHandle read$VH() {
        return heif_reader.read$VH;
    }
    public static MemoryAddress read$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_reader.read$VH.get(seg);
    }
    public static void read$set( MemorySegment seg, MemoryAddress x) {
        heif_reader.read$VH.set(seg, x);
    }
    public static MemoryAddress read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_reader.read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_reader.read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read read (MemorySegment segment, MemorySession session) {
        return read.ofAddress(read$get(segment), session);
    }
    static final FunctionDescriptor seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle seek$MH = RuntimeHelper.downcallHandle(
        heif_reader.seek$FUNC
    );
    public interface seek {

        int apply(long _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(seek fi, MemorySession session) {
            return RuntimeHelper.upcallStub(seek.class, fi, heif_reader.seek$FUNC, session);
        }
        static seek ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)heif_reader.seek$MH.invokeExact((Addressable)symbol, __x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seek"));
    public static VarHandle seek$VH() {
        return heif_reader.seek$VH;
    }
    public static MemoryAddress seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_reader.seek$VH.get(seg);
    }
    public static void seek$set( MemorySegment seg, MemoryAddress x) {
        heif_reader.seek$VH.set(seg, x);
    }
    public static MemoryAddress seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_reader.seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seek$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_reader.seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static seek seek (MemorySegment segment, MemorySession session) {
        return seek.ofAddress(seek$get(segment), session);
    }
    static final FunctionDescriptor wait_for_file_size$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle wait_for_file_size$MH = RuntimeHelper.downcallHandle(
        heif_reader.wait_for_file_size$FUNC
    );
    public interface wait_for_file_size {

        int apply(long _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(wait_for_file_size fi, MemorySession session) {
            return RuntimeHelper.upcallStub(wait_for_file_size.class, fi, heif_reader.wait_for_file_size$FUNC, session);
        }
        static wait_for_file_size ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)heif_reader.wait_for_file_size$MH.invokeExact((Addressable)symbol, __x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle wait_for_file_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wait_for_file_size"));
    public static VarHandle wait_for_file_size$VH() {
        return heif_reader.wait_for_file_size$VH;
    }
    public static MemoryAddress wait_for_file_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_reader.wait_for_file_size$VH.get(seg);
    }
    public static void wait_for_file_size$set( MemorySegment seg, MemoryAddress x) {
        heif_reader.wait_for_file_size$VH.set(seg, x);
    }
    public static MemoryAddress wait_for_file_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_reader.wait_for_file_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wait_for_file_size$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_reader.wait_for_file_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static wait_for_file_size wait_for_file_size (MemorySegment segment, MemorySession session) {
        return wait_for_file_size.ofAddress(wait_for_file_size$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


