// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$15 {

    static final FunctionDescriptor heif_context_write_to_file$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_INT.withName("code"),
        C_INT.withName("subcode"),
        C_POINTER.withName("message")
    ).withName("heif_error"),
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_context_write_to_file$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_context_write_to_file",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$15.heif_context_write_to_file$FUNC, false
    );
    static final FunctionDescriptor heif_context_write$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_INT.withName("code"),
        C_INT.withName("subcode"),
        C_POINTER.withName("message")
    ).withName("heif_error"),
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_context_write$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_context_write",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$15.heif_context_write$FUNC, false
    );
    static final FunctionDescriptor heif_context_get_encoder_descriptors$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final MethodHandle heif_context_get_encoder_descriptors$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_context_get_encoder_descriptors",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$15.heif_context_get_encoder_descriptors$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_descriptor_get_name$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_descriptor_get_name$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_descriptor_get_name",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$15.heif_encoder_descriptor_get_name$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_descriptor_get_id_name$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_descriptor_get_id_name$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_descriptor_get_id_name",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$15.heif_encoder_descriptor_get_id_name$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_descriptor_get_compression_format$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle heif_encoder_descriptor_get_compression_format$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_descriptor_get_compression_format",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$15.heif_encoder_descriptor_get_compression_format$FUNC, false
    );
}


