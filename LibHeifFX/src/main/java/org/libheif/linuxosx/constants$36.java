// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$36 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$36() {}
    static final FunctionDescriptor const$0 = FunctionDescriptor.of(MemoryLayout.structLayout(
        JAVA_INT.withName("code"),
        JAVA_INT.withName("subcode"),
        RuntimeHelper.POINTER.withName("message")
    ).withName("heif_error"),
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER,
        RuntimeHelper.POINTER
    );
    static final MethodHandle const$1 = RuntimeHelper.downcallHandle(
        "heif_encoder_parameter_integer_valid_values",
        constants$36.const$0
    );
    static final MethodHandle const$2 = RuntimeHelper.downcallHandle(
        "heif_encoder_set_parameter",
        constants$7.const$2
    );
    static final MethodHandle const$3 = RuntimeHelper.downcallHandle(
        "heif_encoder_get_parameter",
        constants$35.const$3
    );
    static final MethodHandle const$4 = RuntimeHelper.downcallHandle(
        "heif_encoder_has_default",
        constants$17.const$1
    );
    static final StructLayout const$5 = MemoryLayout.structLayout(
        JAVA_BYTE.withName("version"),
        JAVA_BYTE.withName("save_alpha_channel"),
        JAVA_BYTE.withName("macOS_compatibility_workaround"),
        JAVA_BYTE.withName("save_two_colr_boxes_when_ICC_and_nclx_available"),
        MemoryLayout.paddingLayout(4),
        RuntimeHelper.POINTER.withName("output_nclx_profile"),
        JAVA_BYTE.withName("macOS_compatibility_workaround_no_nclx_profile"),
        MemoryLayout.paddingLayout(7)
    ).withName("heif_encoding_options");
}


