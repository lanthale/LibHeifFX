// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class heif_decoding_options {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("version"),
        Constants$root.C_CHAR$LAYOUT.withName("ignore_transformations"),
        MemoryLayout.paddingLayout(48),
        Constants$root.C_POINTER$LAYOUT.withName("start_progress"),
        Constants$root.C_POINTER$LAYOUT.withName("on_progress"),
        Constants$root.C_POINTER$LAYOUT.withName("end_progress"),
        Constants$root.C_POINTER$LAYOUT.withName("progress_user_data"),
        Constants$root.C_CHAR$LAYOUT.withName("convert_hdr_to_8bit"),
        MemoryLayout.paddingLayout(56)
    ).withName("heif_decoding_options");
    public static MemoryLayout $LAYOUT() {
        return heif_decoding_options.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return heif_decoding_options.version$VH;
    }
    public static byte version$get(MemorySegment seg) {
        return (byte)heif_decoding_options.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, byte x) {
        heif_decoding_options.version$VH.set(seg, x);
    }
    public static byte version$get(MemorySegment seg, long index) {
        return (byte)heif_decoding_options.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, byte x) {
        heif_decoding_options.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ignore_transformations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ignore_transformations"));
    public static VarHandle ignore_transformations$VH() {
        return heif_decoding_options.ignore_transformations$VH;
    }
    public static byte ignore_transformations$get(MemorySegment seg) {
        return (byte)heif_decoding_options.ignore_transformations$VH.get(seg);
    }
    public static void ignore_transformations$set( MemorySegment seg, byte x) {
        heif_decoding_options.ignore_transformations$VH.set(seg, x);
    }
    public static byte ignore_transformations$get(MemorySegment seg, long index) {
        return (byte)heif_decoding_options.ignore_transformations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ignore_transformations$set(MemorySegment seg, long index, byte x) {
        heif_decoding_options.ignore_transformations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor start_progress$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle start_progress$MH = RuntimeHelper.downcallHandle(
        heif_decoding_options.start_progress$FUNC
    );
    public interface start_progress {

        void apply(int _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(start_progress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(start_progress.class, fi, heif_decoding_options.start_progress$FUNC, session);
        }
        static start_progress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    heif_decoding_options.start_progress$MH.invokeExact((Addressable)symbol, __x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_progress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_progress"));
    public static VarHandle start_progress$VH() {
        return heif_decoding_options.start_progress$VH;
    }
    public static MemoryAddress start_progress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.start_progress$VH.get(seg);
    }
    public static void start_progress$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.start_progress$VH.set(seg, x);
    }
    public static MemoryAddress start_progress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.start_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.start_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_progress start_progress (MemorySegment segment, MemorySession session) {
        return start_progress.ofAddress(start_progress$get(segment), session);
    }
    static final FunctionDescriptor on_progress$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle on_progress$MH = RuntimeHelper.downcallHandle(
        heif_decoding_options.on_progress$FUNC
    );
    public interface on_progress {

        void apply(int _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(on_progress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(on_progress.class, fi, heif_decoding_options.on_progress$FUNC, session);
        }
        static on_progress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    heif_decoding_options.on_progress$MH.invokeExact((Addressable)symbol, __x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle on_progress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("on_progress"));
    public static VarHandle on_progress$VH() {
        return heif_decoding_options.on_progress$VH;
    }
    public static MemoryAddress on_progress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.on_progress$VH.get(seg);
    }
    public static void on_progress$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.on_progress$VH.set(seg, x);
    }
    public static MemoryAddress on_progress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.on_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void on_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.on_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static on_progress on_progress (MemorySegment segment, MemorySession session) {
        return on_progress.ofAddress(on_progress$get(segment), session);
    }
    static final FunctionDescriptor end_progress$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_progress$MH = RuntimeHelper.downcallHandle(
        heif_decoding_options.end_progress$FUNC
    );
    public interface end_progress {

        void apply(int _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(end_progress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(end_progress.class, fi, heif_decoding_options.end_progress$FUNC, session);
        }
        static end_progress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    heif_decoding_options.end_progress$MH.invokeExact((Addressable)symbol, __x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end_progress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_progress"));
    public static VarHandle end_progress$VH() {
        return heif_decoding_options.end_progress$VH;
    }
    public static MemoryAddress end_progress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.end_progress$VH.get(seg);
    }
    public static void end_progress$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.end_progress$VH.set(seg, x);
    }
    public static MemoryAddress end_progress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.end_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.end_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_progress end_progress (MemorySegment segment, MemorySession session) {
        return end_progress.ofAddress(end_progress$get(segment), session);
    }
    static final VarHandle progress_user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("progress_user_data"));
    public static VarHandle progress_user_data$VH() {
        return heif_decoding_options.progress_user_data$VH;
    }
    public static MemoryAddress progress_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.progress_user_data$VH.get(seg);
    }
    public static void progress_user_data$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.progress_user_data$VH.set(seg, x);
    }
    public static MemoryAddress progress_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_decoding_options.progress_user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.progress_user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle convert_hdr_to_8bit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("convert_hdr_to_8bit"));
    public static VarHandle convert_hdr_to_8bit$VH() {
        return heif_decoding_options.convert_hdr_to_8bit$VH;
    }
    public static byte convert_hdr_to_8bit$get(MemorySegment seg) {
        return (byte)heif_decoding_options.convert_hdr_to_8bit$VH.get(seg);
    }
    public static void convert_hdr_to_8bit$set( MemorySegment seg, byte x) {
        heif_decoding_options.convert_hdr_to_8bit$VH.set(seg, x);
    }
    public static byte convert_hdr_to_8bit$get(MemorySegment seg, long index) {
        return (byte)heif_decoding_options.convert_hdr_to_8bit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void convert_hdr_to_8bit$set(MemorySegment seg, long index, byte x) {
        heif_decoding_options.convert_hdr_to_8bit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


