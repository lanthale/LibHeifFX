// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class heif_decoding_options {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("version"),
        C_CHAR.withName("ignore_transformations"),
        MemoryLayout.paddingLayout(48),
        C_POINTER.withName("start_progress"),
        C_POINTER.withName("on_progress"),
        C_POINTER.withName("end_progress"),
        C_POINTER.withName("progress_user_data"),
        C_CHAR.withName("convert_hdr_to_8bit"),
        MemoryLayout.paddingLayout(56)
    ).withName("heif_decoding_options");
    public static MemoryLayout $LAYOUT() {
        return heif_decoding_options.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return heif_decoding_options.version$VH;
    }
    public static byte version$get(MemorySegment seg) {
        return (byte)heif_decoding_options.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, byte x) {
        heif_decoding_options.version$VH.set(seg, x);
    }
    public static byte version$get(MemorySegment seg, long index) {
        return (byte)heif_decoding_options.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, byte x) {
        heif_decoding_options.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ignore_transformations$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("ignore_transformations"));
    public static VarHandle ignore_transformations$VH() {
        return heif_decoding_options.ignore_transformations$VH;
    }
    public static byte ignore_transformations$get(MemorySegment seg) {
        return (byte)heif_decoding_options.ignore_transformations$VH.get(seg);
    }
    public static void ignore_transformations$set( MemorySegment seg, byte x) {
        heif_decoding_options.ignore_transformations$VH.set(seg, x);
    }
    public static byte ignore_transformations$get(MemorySegment seg, long index) {
        return (byte)heif_decoding_options.ignore_transformations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ignore_transformations$set(MemorySegment seg, long index, byte x) {
        heif_decoding_options.ignore_transformations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor start_progress$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle start_progress$MH = RuntimeHelper.downcallHandle(
        "(IILjdk/incubator/foreign/MemoryAddress;)V",
        heif_decoding_options.start_progress$FUNC, false
    );
    public interface start_progress {

        void apply(int x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(start_progress fi) {
            return RuntimeHelper.upcallStub(start_progress.class, fi, heif_decoding_options.start_progress$FUNC, "(IILjdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(start_progress fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(start_progress.class, fi, heif_decoding_options.start_progress$FUNC, "(IILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static start_progress ofAddress(MemoryAddress addr) {
            return (int x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    heif_decoding_options.start_progress$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_progress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("start_progress")));
    public static VarHandle start_progress$VH() {
        return heif_decoding_options.start_progress$VH;
    }
    public static MemoryAddress start_progress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.start_progress$VH.get(seg);
    }
    public static void start_progress$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.start_progress$VH.set(seg, x);
    }
    public static MemoryAddress start_progress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.start_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.start_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_progress start_progress (MemorySegment segment) {
        return start_progress.ofAddress(start_progress$get(segment));
    }
    static final FunctionDescriptor on_progress$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle on_progress$MH = RuntimeHelper.downcallHandle(
        "(IILjdk/incubator/foreign/MemoryAddress;)V",
        heif_decoding_options.on_progress$FUNC, false
    );
    public interface on_progress {

        void apply(int x0, int x1, jdk.incubator.foreign.MemoryAddress x2);
        static MemoryAddress allocate(on_progress fi) {
            return RuntimeHelper.upcallStub(on_progress.class, fi, heif_decoding_options.on_progress$FUNC, "(IILjdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(on_progress fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(on_progress.class, fi, heif_decoding_options.on_progress$FUNC, "(IILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static on_progress ofAddress(MemoryAddress addr) {
            return (int x0, int x1, jdk.incubator.foreign.MemoryAddress x2) -> {
                try {
                    heif_decoding_options.on_progress$MH.invokeExact((Addressable)addr, x0, x1, x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle on_progress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("on_progress")));
    public static VarHandle on_progress$VH() {
        return heif_decoding_options.on_progress$VH;
    }
    public static MemoryAddress on_progress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.on_progress$VH.get(seg);
    }
    public static void on_progress$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.on_progress$VH.set(seg, x);
    }
    public static MemoryAddress on_progress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.on_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void on_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.on_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static on_progress on_progress (MemorySegment segment) {
        return on_progress.ofAddress(on_progress$get(segment));
    }
    static final FunctionDescriptor end_progress$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final MethodHandle end_progress$MH = RuntimeHelper.downcallHandle(
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        heif_decoding_options.end_progress$FUNC, false
    );
    public interface end_progress {

        void apply(int x0, jdk.incubator.foreign.MemoryAddress x1);
        static MemoryAddress allocate(end_progress fi) {
            return RuntimeHelper.upcallStub(end_progress.class, fi, heif_decoding_options.end_progress$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;)V");
        }
        static MemoryAddress allocate(end_progress fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(end_progress.class, fi, heif_decoding_options.end_progress$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;)V", scope);
        }
        static end_progress ofAddress(MemoryAddress addr) {
            return (int x0, jdk.incubator.foreign.MemoryAddress x1) -> {
                try {
                    heif_decoding_options.end_progress$MH.invokeExact((Addressable)addr, x0, x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end_progress$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("end_progress")));
    public static VarHandle end_progress$VH() {
        return heif_decoding_options.end_progress$VH;
    }
    public static MemoryAddress end_progress$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.end_progress$VH.get(seg);
    }
    public static void end_progress$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.end_progress$VH.set(seg, x);
    }
    public static MemoryAddress end_progress$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.end_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_progress$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.end_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_progress end_progress (MemorySegment segment) {
        return end_progress.ofAddress(end_progress$get(segment));
    }
    static final VarHandle progress_user_data$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("progress_user_data")));
    public static VarHandle progress_user_data$VH() {
        return heif_decoding_options.progress_user_data$VH;
    }
    public static MemoryAddress progress_user_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.progress_user_data$VH.get(seg);
    }
    public static void progress_user_data$set( MemorySegment seg, MemoryAddress x) {
        heif_decoding_options.progress_user_data$VH.set(seg, x);
    }
    public static MemoryAddress progress_user_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)heif_decoding_options.progress_user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_decoding_options.progress_user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle convert_hdr_to_8bit$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("convert_hdr_to_8bit"));
    public static VarHandle convert_hdr_to_8bit$VH() {
        return heif_decoding_options.convert_hdr_to_8bit$VH;
    }
    public static byte convert_hdr_to_8bit$get(MemorySegment seg) {
        return (byte)heif_decoding_options.convert_hdr_to_8bit$VH.get(seg);
    }
    public static void convert_hdr_to_8bit$set( MemorySegment seg, byte x) {
        heif_decoding_options.convert_hdr_to_8bit$VH.set(seg, x);
    }
    public static byte convert_hdr_to_8bit$get(MemorySegment seg, long index) {
        return (byte)heif_decoding_options.convert_hdr_to_8bit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void convert_hdr_to_8bit$set(MemorySegment seg, long index, byte x) {
        heif_decoding_options.convert_hdr_to_8bit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


