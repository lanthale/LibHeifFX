// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct heif_depth_representation_info {
 *     unsigned char version;
 *     unsigned char has_z_near;
 *     unsigned char has_z_far;
 *     unsigned char has_d_min;
 *     unsigned char has_d_max;
 *     double z_near;
 *     double z_far;
 *     double d_min;
 *     double d_max;
 *     enum heif_depth_representation_type depth_representation_type;
 *     unsigned int disparity_reference_view;
 *     unsigned int depth_nonlinear_representation_model_size;
 *     unsigned char* depth_nonlinear_representation_model;
 * };
 * }
 */
public class heif_depth_representation_info {

    public static MemoryLayout $LAYOUT() {
        return constants$13.const$0;
    }
    public static VarHandle version$VH() {
        return constants$13.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char version;
     * }
     */
    public static byte version$get(MemorySegment seg) {
        return (byte)constants$13.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char version;
     * }
     */
    public static void version$set(MemorySegment seg, byte x) {
        constants$13.const$1.set(seg, x);
    }
    public static byte version$get(MemorySegment seg, long index) {
        return (byte)constants$13.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, byte x) {
        constants$13.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle has_z_near$VH() {
        return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char has_z_near;
     * }
     */
    public static byte has_z_near$get(MemorySegment seg) {
        return (byte)constants$13.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char has_z_near;
     * }
     */
    public static void has_z_near$set(MemorySegment seg, byte x) {
        constants$13.const$2.set(seg, x);
    }
    public static byte has_z_near$get(MemorySegment seg, long index) {
        return (byte)constants$13.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void has_z_near$set(MemorySegment seg, long index, byte x) {
        constants$13.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle has_z_far$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char has_z_far;
     * }
     */
    public static byte has_z_far$get(MemorySegment seg) {
        return (byte)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char has_z_far;
     * }
     */
    public static void has_z_far$set(MemorySegment seg, byte x) {
        constants$13.const$3.set(seg, x);
    }
    public static byte has_z_far$get(MemorySegment seg, long index) {
        return (byte)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void has_z_far$set(MemorySegment seg, long index, byte x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle has_d_min$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char has_d_min;
     * }
     */
    public static byte has_d_min$get(MemorySegment seg) {
        return (byte)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char has_d_min;
     * }
     */
    public static void has_d_min$set(MemorySegment seg, byte x) {
        constants$13.const$4.set(seg, x);
    }
    public static byte has_d_min$get(MemorySegment seg, long index) {
        return (byte)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void has_d_min$set(MemorySegment seg, long index, byte x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle has_d_max$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char has_d_max;
     * }
     */
    public static byte has_d_max$get(MemorySegment seg) {
        return (byte)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char has_d_max;
     * }
     */
    public static void has_d_max$set(MemorySegment seg, byte x) {
        constants$13.const$5.set(seg, x);
    }
    public static byte has_d_max$get(MemorySegment seg, long index) {
        return (byte)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void has_d_max$set(MemorySegment seg, long index, byte x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle z_near$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double z_near;
     * }
     */
    public static double z_near$get(MemorySegment seg) {
        return (double)constants$14.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double z_near;
     * }
     */
    public static void z_near$set(MemorySegment seg, double x) {
        constants$14.const$0.set(seg, x);
    }
    public static double z_near$get(MemorySegment seg, long index) {
        return (double)constants$14.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void z_near$set(MemorySegment seg, long index, double x) {
        constants$14.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle z_far$VH() {
        return constants$14.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double z_far;
     * }
     */
    public static double z_far$get(MemorySegment seg) {
        return (double)constants$14.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double z_far;
     * }
     */
    public static void z_far$set(MemorySegment seg, double x) {
        constants$14.const$1.set(seg, x);
    }
    public static double z_far$get(MemorySegment seg, long index) {
        return (double)constants$14.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void z_far$set(MemorySegment seg, long index, double x) {
        constants$14.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle d_min$VH() {
        return constants$14.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double d_min;
     * }
     */
    public static double d_min$get(MemorySegment seg) {
        return (double)constants$14.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double d_min;
     * }
     */
    public static void d_min$set(MemorySegment seg, double x) {
        constants$14.const$2.set(seg, x);
    }
    public static double d_min$get(MemorySegment seg, long index) {
        return (double)constants$14.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void d_min$set(MemorySegment seg, long index, double x) {
        constants$14.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle d_max$VH() {
        return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double d_max;
     * }
     */
    public static double d_max$get(MemorySegment seg) {
        return (double)constants$14.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double d_max;
     * }
     */
    public static void d_max$set(MemorySegment seg, double x) {
        constants$14.const$3.set(seg, x);
    }
    public static double d_max$get(MemorySegment seg, long index) {
        return (double)constants$14.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void d_max$set(MemorySegment seg, long index, double x) {
        constants$14.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depth_representation_type$VH() {
        return constants$14.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum heif_depth_representation_type depth_representation_type;
     * }
     */
    public static int depth_representation_type$get(MemorySegment seg) {
        return (int)constants$14.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum heif_depth_representation_type depth_representation_type;
     * }
     */
    public static void depth_representation_type$set(MemorySegment seg, int x) {
        constants$14.const$4.set(seg, x);
    }
    public static int depth_representation_type$get(MemorySegment seg, long index) {
        return (int)constants$14.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void depth_representation_type$set(MemorySegment seg, long index, int x) {
        constants$14.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle disparity_reference_view$VH() {
        return constants$14.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int disparity_reference_view;
     * }
     */
    public static int disparity_reference_view$get(MemorySegment seg) {
        return (int)constants$14.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int disparity_reference_view;
     * }
     */
    public static void disparity_reference_view$set(MemorySegment seg, int x) {
        constants$14.const$5.set(seg, x);
    }
    public static int disparity_reference_view$get(MemorySegment seg, long index) {
        return (int)constants$14.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void disparity_reference_view$set(MemorySegment seg, long index, int x) {
        constants$14.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depth_nonlinear_representation_model_size$VH() {
        return constants$15.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int depth_nonlinear_representation_model_size;
     * }
     */
    public static int depth_nonlinear_representation_model_size$get(MemorySegment seg) {
        return (int)constants$15.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int depth_nonlinear_representation_model_size;
     * }
     */
    public static void depth_nonlinear_representation_model_size$set(MemorySegment seg, int x) {
        constants$15.const$0.set(seg, x);
    }
    public static int depth_nonlinear_representation_model_size$get(MemorySegment seg, long index) {
        return (int)constants$15.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void depth_nonlinear_representation_model_size$set(MemorySegment seg, long index, int x) {
        constants$15.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle depth_nonlinear_representation_model$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* depth_nonlinear_representation_model;
     * }
     */
    public static MemorySegment depth_nonlinear_representation_model$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* depth_nonlinear_representation_model;
     * }
     */
    public static void depth_nonlinear_representation_model$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$1.set(seg, x);
    }
    public static MemorySegment depth_nonlinear_representation_model$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void depth_nonlinear_representation_model$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


