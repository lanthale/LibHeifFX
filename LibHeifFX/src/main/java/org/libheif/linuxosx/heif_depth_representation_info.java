// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class heif_depth_representation_info {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("version"),
        Constants$root.C_CHAR$LAYOUT.withName("has_z_near"),
        Constants$root.C_CHAR$LAYOUT.withName("has_z_far"),
        Constants$root.C_CHAR$LAYOUT.withName("has_d_min"),
        Constants$root.C_CHAR$LAYOUT.withName("has_d_max"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_DOUBLE$LAYOUT.withName("z_near"),
        Constants$root.C_DOUBLE$LAYOUT.withName("z_far"),
        Constants$root.C_DOUBLE$LAYOUT.withName("d_min"),
        Constants$root.C_DOUBLE$LAYOUT.withName("d_max"),
        Constants$root.C_INT$LAYOUT.withName("depth_representation_type"),
        Constants$root.C_INT$LAYOUT.withName("disparity_reference_view"),
        Constants$root.C_INT$LAYOUT.withName("depth_nonlinear_representation_model_size"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("depth_nonlinear_representation_model")
    ).withName("heif_depth_representation_info");
    public static MemoryLayout $LAYOUT() {
        return heif_depth_representation_info.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return heif_depth_representation_info.version$VH;
    }
    public static byte version$get(MemorySegment seg) {
        return (byte)heif_depth_representation_info.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, byte x) {
        heif_depth_representation_info.version$VH.set(seg, x);
    }
    public static byte version$get(MemorySegment seg, long index) {
        return (byte)heif_depth_representation_info.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, byte x) {
        heif_depth_representation_info.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle has_z_near$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_z_near"));
    public static VarHandle has_z_near$VH() {
        return heif_depth_representation_info.has_z_near$VH;
    }
    public static byte has_z_near$get(MemorySegment seg) {
        return (byte)heif_depth_representation_info.has_z_near$VH.get(seg);
    }
    public static void has_z_near$set( MemorySegment seg, byte x) {
        heif_depth_representation_info.has_z_near$VH.set(seg, x);
    }
    public static byte has_z_near$get(MemorySegment seg, long index) {
        return (byte)heif_depth_representation_info.has_z_near$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_z_near$set(MemorySegment seg, long index, byte x) {
        heif_depth_representation_info.has_z_near$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle has_z_far$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_z_far"));
    public static VarHandle has_z_far$VH() {
        return heif_depth_representation_info.has_z_far$VH;
    }
    public static byte has_z_far$get(MemorySegment seg) {
        return (byte)heif_depth_representation_info.has_z_far$VH.get(seg);
    }
    public static void has_z_far$set( MemorySegment seg, byte x) {
        heif_depth_representation_info.has_z_far$VH.set(seg, x);
    }
    public static byte has_z_far$get(MemorySegment seg, long index) {
        return (byte)heif_depth_representation_info.has_z_far$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_z_far$set(MemorySegment seg, long index, byte x) {
        heif_depth_representation_info.has_z_far$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle has_d_min$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_d_min"));
    public static VarHandle has_d_min$VH() {
        return heif_depth_representation_info.has_d_min$VH;
    }
    public static byte has_d_min$get(MemorySegment seg) {
        return (byte)heif_depth_representation_info.has_d_min$VH.get(seg);
    }
    public static void has_d_min$set( MemorySegment seg, byte x) {
        heif_depth_representation_info.has_d_min$VH.set(seg, x);
    }
    public static byte has_d_min$get(MemorySegment seg, long index) {
        return (byte)heif_depth_representation_info.has_d_min$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_d_min$set(MemorySegment seg, long index, byte x) {
        heif_depth_representation_info.has_d_min$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle has_d_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_d_max"));
    public static VarHandle has_d_max$VH() {
        return heif_depth_representation_info.has_d_max$VH;
    }
    public static byte has_d_max$get(MemorySegment seg) {
        return (byte)heif_depth_representation_info.has_d_max$VH.get(seg);
    }
    public static void has_d_max$set( MemorySegment seg, byte x) {
        heif_depth_representation_info.has_d_max$VH.set(seg, x);
    }
    public static byte has_d_max$get(MemorySegment seg, long index) {
        return (byte)heif_depth_representation_info.has_d_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_d_max$set(MemorySegment seg, long index, byte x) {
        heif_depth_representation_info.has_d_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle z_near$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("z_near"));
    public static VarHandle z_near$VH() {
        return heif_depth_representation_info.z_near$VH;
    }
    public static double z_near$get(MemorySegment seg) {
        return (double)heif_depth_representation_info.z_near$VH.get(seg);
    }
    public static void z_near$set( MemorySegment seg, double x) {
        heif_depth_representation_info.z_near$VH.set(seg, x);
    }
    public static double z_near$get(MemorySegment seg, long index) {
        return (double)heif_depth_representation_info.z_near$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void z_near$set(MemorySegment seg, long index, double x) {
        heif_depth_representation_info.z_near$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle z_far$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("z_far"));
    public static VarHandle z_far$VH() {
        return heif_depth_representation_info.z_far$VH;
    }
    public static double z_far$get(MemorySegment seg) {
        return (double)heif_depth_representation_info.z_far$VH.get(seg);
    }
    public static void z_far$set( MemorySegment seg, double x) {
        heif_depth_representation_info.z_far$VH.set(seg, x);
    }
    public static double z_far$get(MemorySegment seg, long index) {
        return (double)heif_depth_representation_info.z_far$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void z_far$set(MemorySegment seg, long index, double x) {
        heif_depth_representation_info.z_far$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle d_min$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("d_min"));
    public static VarHandle d_min$VH() {
        return heif_depth_representation_info.d_min$VH;
    }
    public static double d_min$get(MemorySegment seg) {
        return (double)heif_depth_representation_info.d_min$VH.get(seg);
    }
    public static void d_min$set( MemorySegment seg, double x) {
        heif_depth_representation_info.d_min$VH.set(seg, x);
    }
    public static double d_min$get(MemorySegment seg, long index) {
        return (double)heif_depth_representation_info.d_min$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void d_min$set(MemorySegment seg, long index, double x) {
        heif_depth_representation_info.d_min$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle d_max$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("d_max"));
    public static VarHandle d_max$VH() {
        return heif_depth_representation_info.d_max$VH;
    }
    public static double d_max$get(MemorySegment seg) {
        return (double)heif_depth_representation_info.d_max$VH.get(seg);
    }
    public static void d_max$set( MemorySegment seg, double x) {
        heif_depth_representation_info.d_max$VH.set(seg, x);
    }
    public static double d_max$get(MemorySegment seg, long index) {
        return (double)heif_depth_representation_info.d_max$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void d_max$set(MemorySegment seg, long index, double x) {
        heif_depth_representation_info.d_max$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle depth_representation_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth_representation_type"));
    public static VarHandle depth_representation_type$VH() {
        return heif_depth_representation_info.depth_representation_type$VH;
    }
    public static int depth_representation_type$get(MemorySegment seg) {
        return (int)heif_depth_representation_info.depth_representation_type$VH.get(seg);
    }
    public static void depth_representation_type$set( MemorySegment seg, int x) {
        heif_depth_representation_info.depth_representation_type$VH.set(seg, x);
    }
    public static int depth_representation_type$get(MemorySegment seg, long index) {
        return (int)heif_depth_representation_info.depth_representation_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth_representation_type$set(MemorySegment seg, long index, int x) {
        heif_depth_representation_info.depth_representation_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle disparity_reference_view$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("disparity_reference_view"));
    public static VarHandle disparity_reference_view$VH() {
        return heif_depth_representation_info.disparity_reference_view$VH;
    }
    public static int disparity_reference_view$get(MemorySegment seg) {
        return (int)heif_depth_representation_info.disparity_reference_view$VH.get(seg);
    }
    public static void disparity_reference_view$set( MemorySegment seg, int x) {
        heif_depth_representation_info.disparity_reference_view$VH.set(seg, x);
    }
    public static int disparity_reference_view$get(MemorySegment seg, long index) {
        return (int)heif_depth_representation_info.disparity_reference_view$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disparity_reference_view$set(MemorySegment seg, long index, int x) {
        heif_depth_representation_info.disparity_reference_view$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle depth_nonlinear_representation_model_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth_nonlinear_representation_model_size"));
    public static VarHandle depth_nonlinear_representation_model_size$VH() {
        return heif_depth_representation_info.depth_nonlinear_representation_model_size$VH;
    }
    public static int depth_nonlinear_representation_model_size$get(MemorySegment seg) {
        return (int)heif_depth_representation_info.depth_nonlinear_representation_model_size$VH.get(seg);
    }
    public static void depth_nonlinear_representation_model_size$set( MemorySegment seg, int x) {
        heif_depth_representation_info.depth_nonlinear_representation_model_size$VH.set(seg, x);
    }
    public static int depth_nonlinear_representation_model_size$get(MemorySegment seg, long index) {
        return (int)heif_depth_representation_info.depth_nonlinear_representation_model_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth_nonlinear_representation_model_size$set(MemorySegment seg, long index, int x) {
        heif_depth_representation_info.depth_nonlinear_representation_model_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle depth_nonlinear_representation_model$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth_nonlinear_representation_model"));
    public static VarHandle depth_nonlinear_representation_model$VH() {
        return heif_depth_representation_info.depth_nonlinear_representation_model$VH;
    }
    public static MemoryAddress depth_nonlinear_representation_model$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)heif_depth_representation_info.depth_nonlinear_representation_model$VH.get(seg);
    }
    public static void depth_nonlinear_representation_model$set( MemorySegment seg, MemoryAddress x) {
        heif_depth_representation_info.depth_nonlinear_representation_model$VH.set(seg, x);
    }
    public static MemoryAddress depth_nonlinear_representation_model$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)heif_depth_representation_info.depth_nonlinear_representation_model$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth_nonlinear_representation_model$set(MemorySegment seg, long index, MemoryAddress x) {
        heif_depth_representation_info.depth_nonlinear_representation_model$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


