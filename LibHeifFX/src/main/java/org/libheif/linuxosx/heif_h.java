// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class heif_h  {

    static {
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ heif_h() {}
    public static MethodHandle heif_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$0.heif_get_version$MH,"heif_get_version");
    }
    public static MemoryAddress heif_get_version () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.heif_get_version$MH, "heif_get_version");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_get_version_number$MH() {
        return RuntimeHelper.requireNonNull(constants$0.heif_get_version_number$MH,"heif_get_version_number");
    }
    public static int heif_get_version_number () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.heif_get_version_number$MH, "heif_get_version_number");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_get_version_number_major$MH() {
        return RuntimeHelper.requireNonNull(constants$0.heif_get_version_number_major$MH,"heif_get_version_number_major");
    }
    public static int heif_get_version_number_major () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.heif_get_version_number_major$MH, "heif_get_version_number_major");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_get_version_number_minor$MH() {
        return RuntimeHelper.requireNonNull(constants$0.heif_get_version_number_minor$MH,"heif_get_version_number_minor");
    }
    public static int heif_get_version_number_minor () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.heif_get_version_number_minor$MH, "heif_get_version_number_minor");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_get_version_number_maintenance$MH() {
        return RuntimeHelper.requireNonNull(constants$0.heif_get_version_number_maintenance$MH,"heif_get_version_number_maintenance");
    }
    public static int heif_get_version_number_maintenance () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.heif_get_version_number_maintenance$MH, "heif_get_version_number_maintenance");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int heif_error_Ok() {
        return (int)0L;
    }
    public static int heif_error_Input_does_not_exist() {
        return (int)1L;
    }
    public static int heif_error_Invalid_input() {
        return (int)2L;
    }
    public static int heif_error_Unsupported_filetype() {
        return (int)3L;
    }
    public static int heif_error_Unsupported_feature() {
        return (int)4L;
    }
    public static int heif_error_Usage_error() {
        return (int)5L;
    }
    public static int heif_error_Memory_allocation_error() {
        return (int)6L;
    }
    public static int heif_error_Decoder_plugin_error() {
        return (int)7L;
    }
    public static int heif_error_Encoder_plugin_error() {
        return (int)8L;
    }
    public static int heif_error_Encoding_error() {
        return (int)9L;
    }
    public static int heif_error_Color_profile_does_not_exist() {
        return (int)10L;
    }
    public static int heif_suberror_Unspecified() {
        return (int)0L;
    }
    public static int heif_suberror_End_of_data() {
        return (int)100L;
    }
    public static int heif_suberror_Invalid_box_size() {
        return (int)101L;
    }
    public static int heif_suberror_No_ftyp_box() {
        return (int)102L;
    }
    public static int heif_suberror_No_idat_box() {
        return (int)103L;
    }
    public static int heif_suberror_No_meta_box() {
        return (int)104L;
    }
    public static int heif_suberror_No_hdlr_box() {
        return (int)105L;
    }
    public static int heif_suberror_No_hvcC_box() {
        return (int)106L;
    }
    public static int heif_suberror_No_pitm_box() {
        return (int)107L;
    }
    public static int heif_suberror_No_ipco_box() {
        return (int)108L;
    }
    public static int heif_suberror_No_ipma_box() {
        return (int)109L;
    }
    public static int heif_suberror_No_iloc_box() {
        return (int)110L;
    }
    public static int heif_suberror_No_iinf_box() {
        return (int)111L;
    }
    public static int heif_suberror_No_iprp_box() {
        return (int)112L;
    }
    public static int heif_suberror_No_iref_box() {
        return (int)113L;
    }
    public static int heif_suberror_No_pict_handler() {
        return (int)114L;
    }
    public static int heif_suberror_Ipma_box_references_nonexisting_property() {
        return (int)115L;
    }
    public static int heif_suberror_No_properties_assigned_to_item() {
        return (int)116L;
    }
    public static int heif_suberror_No_item_data() {
        return (int)117L;
    }
    public static int heif_suberror_Invalid_grid_data() {
        return (int)118L;
    }
    public static int heif_suberror_Missing_grid_images() {
        return (int)119L;
    }
    public static int heif_suberror_Invalid_clean_aperture() {
        return (int)120L;
    }
    public static int heif_suberror_Invalid_overlay_data() {
        return (int)121L;
    }
    public static int heif_suberror_Overlay_image_outside_of_canvas() {
        return (int)122L;
    }
    public static int heif_suberror_Auxiliary_image_type_unspecified() {
        return (int)123L;
    }
    public static int heif_suberror_No_or_invalid_primary_item() {
        return (int)124L;
    }
    public static int heif_suberror_No_infe_box() {
        return (int)125L;
    }
    public static int heif_suberror_Unknown_color_profile_type() {
        return (int)126L;
    }
    public static int heif_suberror_Wrong_tile_image_chroma_format() {
        return (int)127L;
    }
    public static int heif_suberror_Invalid_fractional_number() {
        return (int)128L;
    }
    public static int heif_suberror_Invalid_image_size() {
        return (int)129L;
    }
    public static int heif_suberror_Invalid_pixi_box() {
        return (int)130L;
    }
    public static int heif_suberror_No_av1C_box() {
        return (int)131L;
    }
    public static int heif_suberror_Wrong_tile_image_pixel_depth() {
        return (int)132L;
    }
    public static int heif_suberror_Security_limit_exceeded() {
        return (int)1000L;
    }
    public static int heif_suberror_Nonexisting_item_referenced() {
        return (int)2000L;
    }
    public static int heif_suberror_Null_pointer_argument() {
        return (int)2001L;
    }
    public static int heif_suberror_Nonexisting_image_channel_referenced() {
        return (int)2002L;
    }
    public static int heif_suberror_Unsupported_plugin_version() {
        return (int)2003L;
    }
    public static int heif_suberror_Unsupported_writer_version() {
        return (int)2004L;
    }
    public static int heif_suberror_Unsupported_parameter() {
        return (int)2005L;
    }
    public static int heif_suberror_Invalid_parameter_value() {
        return (int)2006L;
    }
    public static int heif_suberror_Unsupported_codec() {
        return (int)3000L;
    }
    public static int heif_suberror_Unsupported_image_type() {
        return (int)3001L;
    }
    public static int heif_suberror_Unsupported_data_version() {
        return (int)3002L;
    }
    public static int heif_suberror_Unsupported_color_conversion() {
        return (int)3003L;
    }
    public static int heif_suberror_Unsupported_item_construction_method() {
        return (int)3004L;
    }
    public static int heif_suberror_Unsupported_bit_depth() {
        return (int)4000L;
    }
    public static int heif_suberror_Cannot_write_output_data() {
        return (int)5000L;
    }
    public static int heif_filetype_no() {
        return (int)0L;
    }
    public static int heif_filetype_yes_supported() {
        return (int)1L;
    }
    public static int heif_filetype_yes_unsupported() {
        return (int)2L;
    }
    public static int heif_filetype_maybe() {
        return (int)3L;
    }
    public static MethodHandle heif_check_filetype$MH() {
        return RuntimeHelper.requireNonNull(constants$0.heif_check_filetype$MH,"heif_check_filetype");
    }
    public static int heif_check_filetype ( Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.heif_check_filetype$MH, "heif_check_filetype");
        try {
            return (int)mh$.invokeExact(data.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int heif_unknown_brand() {
        return (int)0L;
    }
    public static int heif_heic() {
        return (int)1L;
    }
    public static int heif_heix() {
        return (int)2L;
    }
    public static int heif_hevc() {
        return (int)3L;
    }
    public static int heif_hevx() {
        return (int)4L;
    }
    public static int heif_heim() {
        return (int)5L;
    }
    public static int heif_heis() {
        return (int)6L;
    }
    public static int heif_hevm() {
        return (int)7L;
    }
    public static int heif_hevs() {
        return (int)8L;
    }
    public static int heif_mif1() {
        return (int)9L;
    }
    public static int heif_msf1() {
        return (int)10L;
    }
    public static int heif_avif() {
        return (int)11L;
    }
    public static int heif_avis() {
        return (int)12L;
    }
    public static MethodHandle heif_main_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$1.heif_main_brand$MH,"heif_main_brand");
    }
    public static int heif_main_brand ( Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.heif_main_brand$MH, "heif_main_brand");
        try {
            return (int)mh$.invokeExact(data.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_read_main_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$1.heif_read_main_brand$MH,"heif_read_main_brand");
    }
    public static int heif_read_main_brand ( Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.heif_read_main_brand$MH, "heif_read_main_brand");
        try {
            return (int)mh$.invokeExact(data.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_fourcc_to_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$1.heif_fourcc_to_brand$MH,"heif_fourcc_to_brand");
    }
    public static int heif_fourcc_to_brand ( Addressable brand_fourcc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.heif_fourcc_to_brand$MH, "heif_fourcc_to_brand");
        try {
            return (int)mh$.invokeExact(brand_fourcc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_brand_to_fourcc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.heif_brand_to_fourcc$MH,"heif_brand_to_fourcc");
    }
    public static void heif_brand_to_fourcc ( int brand,  Addressable out_fourcc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.heif_brand_to_fourcc$MH, "heif_brand_to_fourcc");
        try {
            mh$.invokeExact(brand, out_fourcc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_has_compatible_brand$MH() {
        return RuntimeHelper.requireNonNull(constants$1.heif_has_compatible_brand$MH,"heif_has_compatible_brand");
    }
    public static int heif_has_compatible_brand ( Addressable data,  int len,  Addressable brand_fourcc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.heif_has_compatible_brand$MH, "heif_has_compatible_brand");
        try {
            return (int)mh$.invokeExact(data.address(), len, brand_fourcc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_list_compatible_brands$MH() {
        return RuntimeHelper.requireNonNull(constants$1.heif_list_compatible_brands$MH,"heif_list_compatible_brands");
    }
    public static MemorySegment heif_list_compatible_brands ( SegmentAllocator allocator,  Addressable data,  int len,  Addressable out_brands,  Addressable out_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.heif_list_compatible_brands$MH, "heif_list_compatible_brands");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, data.address(), len, out_brands.address(), out_size.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_list_compatible_brands ( ResourceScope scope,  Addressable data,  int len,  Addressable out_brands,  Addressable out_size) {
        return heif_list_compatible_brands(SegmentAllocator.ofScope(scope), data.address(), len, out_brands.address(), out_size.address());
    }
    public static MethodHandle heif_free_list_of_compatible_brands$MH() {
        return RuntimeHelper.requireNonNull(constants$2.heif_free_list_of_compatible_brands$MH,"heif_free_list_of_compatible_brands");
    }
    public static void heif_free_list_of_compatible_brands ( Addressable brands_list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.heif_free_list_of_compatible_brands$MH, "heif_free_list_of_compatible_brands");
        try {
            mh$.invokeExact(brands_list.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_get_file_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2.heif_get_file_mime_type$MH,"heif_get_file_mime_type");
    }
    public static MemoryAddress heif_get_file_mime_type ( Addressable data,  int len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.heif_get_file_mime_type$MH, "heif_get_file_mime_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(data.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$2.heif_context_alloc$MH,"heif_context_alloc");
    }
    public static MemoryAddress heif_context_alloc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.heif_context_alloc$MH, "heif_context_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$2.heif_context_free$MH,"heif_context_free");
    }
    public static void heif_context_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.heif_context_free$MH, "heif_context_free");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int heif_reader_grow_status_size_reached() {
        return (int)0L;
    }
    public static int heif_reader_grow_status_timeout() {
        return (int)1L;
    }
    public static int heif_reader_grow_status_size_beyond_eof() {
        return (int)2L;
    }
    public static MethodHandle heif_context_read_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2.heif_context_read_from_file$MH,"heif_context_read_from_file");
    }
    public static MemorySegment heif_context_read_from_file ( SegmentAllocator allocator,  Addressable x1,  Addressable filename,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.heif_context_read_from_file$MH, "heif_context_read_from_file");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), filename.address(), x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_read_from_file ( ResourceScope scope,  Addressable x1,  Addressable filename,  Addressable x3) {
        return heif_context_read_from_file(SegmentAllocator.ofScope(scope), x1.address(), filename.address(), x3.address());
    }
    public static MethodHandle heif_context_read_from_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$2.heif_context_read_from_memory$MH,"heif_context_read_from_memory");
    }
    public static MemorySegment heif_context_read_from_memory ( SegmentAllocator allocator,  Addressable x1,  Addressable mem,  long size,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.heif_context_read_from_memory$MH, "heif_context_read_from_memory");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), mem.address(), size, x4.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_read_from_memory ( ResourceScope scope,  Addressable x1,  Addressable mem,  long size,  Addressable x4) {
        return heif_context_read_from_memory(SegmentAllocator.ofScope(scope), x1.address(), mem.address(), size, x4.address());
    }
    public static MethodHandle heif_context_read_from_memory_without_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$3.heif_context_read_from_memory_without_copy$MH,"heif_context_read_from_memory_without_copy");
    }
    public static MemorySegment heif_context_read_from_memory_without_copy ( SegmentAllocator allocator,  Addressable x1,  Addressable mem,  long size,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.heif_context_read_from_memory_without_copy$MH, "heif_context_read_from_memory_without_copy");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), mem.address(), size, x4.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_read_from_memory_without_copy ( ResourceScope scope,  Addressable x1,  Addressable mem,  long size,  Addressable x4) {
        return heif_context_read_from_memory_without_copy(SegmentAllocator.ofScope(scope), x1.address(), mem.address(), size, x4.address());
    }
    public static MethodHandle heif_context_read_from_reader$MH() {
        return RuntimeHelper.requireNonNull(constants$3.heif_context_read_from_reader$MH,"heif_context_read_from_reader");
    }
    public static MemorySegment heif_context_read_from_reader ( SegmentAllocator allocator,  Addressable x1,  Addressable reader,  Addressable userdata,  Addressable x4) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.heif_context_read_from_reader$MH, "heif_context_read_from_reader");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), reader.address(), userdata.address(), x4.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_read_from_reader ( ResourceScope scope,  Addressable x1,  Addressable reader,  Addressable userdata,  Addressable x4) {
        return heif_context_read_from_reader(SegmentAllocator.ofScope(scope), x1.address(), reader.address(), userdata.address(), x4.address());
    }
    public static MethodHandle heif_context_get_number_of_top_level_images$MH() {
        return RuntimeHelper.requireNonNull(constants$3.heif_context_get_number_of_top_level_images$MH,"heif_context_get_number_of_top_level_images");
    }
    public static int heif_context_get_number_of_top_level_images ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.heif_context_get_number_of_top_level_images$MH, "heif_context_get_number_of_top_level_images");
        try {
            return (int)mh$.invokeExact(ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_is_top_level_image_ID$MH() {
        return RuntimeHelper.requireNonNull(constants$3.heif_context_is_top_level_image_ID$MH,"heif_context_is_top_level_image_ID");
    }
    public static int heif_context_is_top_level_image_ID ( Addressable ctx,  int id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.heif_context_is_top_level_image_ID$MH, "heif_context_is_top_level_image_ID");
        try {
            return (int)mh$.invokeExact(ctx.address(), id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_get_list_of_top_level_image_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$3.heif_context_get_list_of_top_level_image_IDs$MH,"heif_context_get_list_of_top_level_image_IDs");
    }
    public static int heif_context_get_list_of_top_level_image_IDs ( Addressable ctx,  Addressable ID_array,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.heif_context_get_list_of_top_level_image_IDs$MH, "heif_context_get_list_of_top_level_image_IDs");
        try {
            return (int)mh$.invokeExact(ctx.address(), ID_array.address(), count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_get_primary_image_ID$MH() {
        return RuntimeHelper.requireNonNull(constants$3.heif_context_get_primary_image_ID$MH,"heif_context_get_primary_image_ID");
    }
    public static MemorySegment heif_context_get_primary_image_ID ( SegmentAllocator allocator,  Addressable ctx,  Addressable id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.heif_context_get_primary_image_ID$MH, "heif_context_get_primary_image_ID");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, ctx.address(), id.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_get_primary_image_ID ( ResourceScope scope,  Addressable ctx,  Addressable id) {
        return heif_context_get_primary_image_ID(SegmentAllocator.ofScope(scope), ctx.address(), id.address());
    }
    public static MethodHandle heif_context_get_primary_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$4.heif_context_get_primary_image_handle$MH,"heif_context_get_primary_image_handle");
    }
    public static MemorySegment heif_context_get_primary_image_handle ( SegmentAllocator allocator,  Addressable ctx,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.heif_context_get_primary_image_handle$MH, "heif_context_get_primary_image_handle");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, ctx.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_get_primary_image_handle ( ResourceScope scope,  Addressable ctx,  Addressable x2) {
        return heif_context_get_primary_image_handle(SegmentAllocator.ofScope(scope), ctx.address(), x2.address());
    }
    public static MethodHandle heif_context_get_primary_image_handle_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.heif_context_get_primary_image_handle_alloc$MH,"heif_context_get_primary_image_handle_alloc");
    }
    public static MemoryAddress heif_context_get_primary_image_handle_alloc ( Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.heif_context_get_primary_image_handle_alloc$MH, "heif_context_get_primary_image_handle_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_get_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$4.heif_context_get_image_handle$MH,"heif_context_get_image_handle");
    }
    public static MemorySegment heif_context_get_image_handle ( SegmentAllocator allocator,  Addressable ctx,  int id,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.heif_context_get_image_handle$MH, "heif_context_get_image_handle");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, ctx.address(), id, x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_get_image_handle ( ResourceScope scope,  Addressable ctx,  int id,  Addressable x3) {
        return heif_context_get_image_handle(SegmentAllocator.ofScope(scope), ctx.address(), id, x3.address());
    }
    public static MethodHandle heif_context_get_image_handle_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.heif_context_get_image_handle_alloc$MH,"heif_context_get_image_handle_alloc");
    }
    public static MemoryAddress heif_context_get_image_handle_alloc ( Addressable ctx,  int id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.heif_context_get_image_handle_alloc$MH, "heif_context_get_image_handle_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ctx.address(), id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_debug_dump_boxes_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$4.heif_context_debug_dump_boxes_to_file$MH,"heif_context_debug_dump_boxes_to_file");
    }
    public static void heif_context_debug_dump_boxes_to_file ( Addressable ctx,  int fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.heif_context_debug_dump_boxes_to_file$MH, "heif_context_debug_dump_boxes_to_file");
        try {
            mh$.invokeExact(ctx.address(), fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_set_maximum_image_size_limit$MH() {
        return RuntimeHelper.requireNonNull(constants$4.heif_context_set_maximum_image_size_limit$MH,"heif_context_set_maximum_image_size_limit");
    }
    public static void heif_context_set_maximum_image_size_limit ( Addressable ctx,  int maximum_width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.heif_context_set_maximum_image_size_limit$MH, "heif_context_set_maximum_image_size_limit");
        try {
            mh$.invokeExact(ctx.address(), maximum_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_set_max_decoding_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$5.heif_context_set_max_decoding_threads$MH,"heif_context_set_max_decoding_threads");
    }
    public static void heif_context_set_max_decoding_threads ( Addressable ctx,  int max_threads) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.heif_context_set_max_decoding_threads$MH, "heif_context_set_max_decoding_threads");
        try {
            mh$.invokeExact(ctx.address(), max_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_release$MH() {
        return RuntimeHelper.requireNonNull(constants$5.heif_image_handle_release$MH,"heif_image_handle_release");
    }
    public static void heif_image_handle_release ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.heif_image_handle_release$MH, "heif_image_handle_release");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_is_primary_image$MH() {
        return RuntimeHelper.requireNonNull(constants$5.heif_image_handle_is_primary_image$MH,"heif_image_handle_is_primary_image");
    }
    public static int heif_image_handle_is_primary_image ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.heif_image_handle_is_primary_image$MH, "heif_image_handle_is_primary_image");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_width$MH() {
        return RuntimeHelper.requireNonNull(constants$5.heif_image_handle_get_width$MH,"heif_image_handle_get_width");
    }
    public static int heif_image_handle_get_width ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.heif_image_handle_get_width$MH, "heif_image_handle_get_width");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_height$MH() {
        return RuntimeHelper.requireNonNull(constants$5.heif_image_handle_get_height$MH,"heif_image_handle_get_height");
    }
    public static int heif_image_handle_get_height ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.heif_image_handle_get_height$MH, "heif_image_handle_get_height");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_has_alpha_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$5.heif_image_handle_has_alpha_channel$MH,"heif_image_handle_has_alpha_channel");
    }
    public static int heif_image_handle_has_alpha_channel ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.heif_image_handle_has_alpha_channel$MH, "heif_image_handle_has_alpha_channel");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_is_premultiplied_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$6.heif_image_handle_is_premultiplied_alpha$MH,"heif_image_handle_is_premultiplied_alpha");
    }
    public static int heif_image_handle_is_premultiplied_alpha ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.heif_image_handle_is_premultiplied_alpha$MH, "heif_image_handle_is_premultiplied_alpha");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_luma_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_luma_bits_per_pixel$MH,"heif_image_handle_get_luma_bits_per_pixel");
    }
    public static int heif_image_handle_get_luma_bits_per_pixel ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_luma_bits_per_pixel$MH, "heif_image_handle_get_luma_bits_per_pixel");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_chroma_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_chroma_bits_per_pixel$MH,"heif_image_handle_get_chroma_bits_per_pixel");
    }
    public static int heif_image_handle_get_chroma_bits_per_pixel ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_chroma_bits_per_pixel$MH, "heif_image_handle_get_chroma_bits_per_pixel");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_ispe_width$MH() {
        return RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_ispe_width$MH,"heif_image_handle_get_ispe_width");
    }
    public static int heif_image_handle_get_ispe_width ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_ispe_width$MH, "heif_image_handle_get_ispe_width");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_ispe_height$MH() {
        return RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_ispe_height$MH,"heif_image_handle_get_ispe_height");
    }
    public static int heif_image_handle_get_ispe_height ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.heif_image_handle_get_ispe_height$MH, "heif_image_handle_get_ispe_height");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_has_depth_image$MH() {
        return RuntimeHelper.requireNonNull(constants$6.heif_image_handle_has_depth_image$MH,"heif_image_handle_has_depth_image");
    }
    public static int heif_image_handle_has_depth_image ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.heif_image_handle_has_depth_image$MH, "heif_image_handle_has_depth_image");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_number_of_depth_images$MH() {
        return RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_number_of_depth_images$MH,"heif_image_handle_get_number_of_depth_images");
    }
    public static int heif_image_handle_get_number_of_depth_images ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_number_of_depth_images$MH, "heif_image_handle_get_number_of_depth_images");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_list_of_depth_image_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_list_of_depth_image_IDs$MH,"heif_image_handle_get_list_of_depth_image_IDs");
    }
    public static int heif_image_handle_get_list_of_depth_image_IDs ( Addressable handle,  Addressable ids,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_list_of_depth_image_IDs$MH, "heif_image_handle_get_list_of_depth_image_IDs");
        try {
            return (int)mh$.invokeExact(handle.address(), ids.address(), count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_depth_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_depth_image_handle$MH,"heif_image_handle_get_depth_image_handle");
    }
    public static MemorySegment heif_image_handle_get_depth_image_handle ( SegmentAllocator allocator,  Addressable handle,  int depth_image_id,  Addressable out_depth_handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_depth_image_handle$MH, "heif_image_handle_get_depth_image_handle");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, handle.address(), depth_image_id, out_depth_handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_depth_image_handle ( ResourceScope scope,  Addressable handle,  int depth_image_id,  Addressable out_depth_handle) {
        return heif_image_handle_get_depth_image_handle(SegmentAllocator.ofScope(scope), handle.address(), depth_image_id, out_depth_handle.address());
    }
    public static int heif_depth_representation_type_uniform_inverse_Z() {
        return (int)0L;
    }
    public static int heif_depth_representation_type_uniform_disparity() {
        return (int)1L;
    }
    public static int heif_depth_representation_type_uniform_Z() {
        return (int)2L;
    }
    public static int heif_depth_representation_type_nonuniform_disparity() {
        return (int)3L;
    }
    public static MethodHandle heif_depth_representation_info_free$MH() {
        return RuntimeHelper.requireNonNull(constants$7.heif_depth_representation_info_free$MH,"heif_depth_representation_info_free");
    }
    public static void heif_depth_representation_info_free ( Addressable info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.heif_depth_representation_info_free$MH, "heif_depth_representation_info_free");
        try {
            mh$.invokeExact(info.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_depth_image_representation_info$MH() {
        return RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_depth_image_representation_info$MH,"heif_image_handle_get_depth_image_representation_info");
    }
    public static int heif_image_handle_get_depth_image_representation_info ( Addressable handle,  int depth_image_id,  Addressable out) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_depth_image_representation_info$MH, "heif_image_handle_get_depth_image_representation_info");
        try {
            return (int)mh$.invokeExact(handle.address(), depth_image_id, out.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_number_of_thumbnails$MH() {
        return RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_number_of_thumbnails$MH,"heif_image_handle_get_number_of_thumbnails");
    }
    public static int heif_image_handle_get_number_of_thumbnails ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.heif_image_handle_get_number_of_thumbnails$MH, "heif_image_handle_get_number_of_thumbnails");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_list_of_thumbnail_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_list_of_thumbnail_IDs$MH,"heif_image_handle_get_list_of_thumbnail_IDs");
    }
    public static int heif_image_handle_get_list_of_thumbnail_IDs ( Addressable handle,  Addressable ids,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_list_of_thumbnail_IDs$MH, "heif_image_handle_get_list_of_thumbnail_IDs");
        try {
            return (int)mh$.invokeExact(handle.address(), ids.address(), count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_thumbnail$MH() {
        return RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_thumbnail$MH,"heif_image_handle_get_thumbnail");
    }
    public static MemorySegment heif_image_handle_get_thumbnail ( SegmentAllocator allocator,  Addressable main_image_handle,  int thumbnail_id,  Addressable out_thumbnail_handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_thumbnail$MH, "heif_image_handle_get_thumbnail");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, main_image_handle.address(), thumbnail_id, out_thumbnail_handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_thumbnail ( ResourceScope scope,  Addressable main_image_handle,  int thumbnail_id,  Addressable out_thumbnail_handle) {
        return heif_image_handle_get_thumbnail(SegmentAllocator.ofScope(scope), main_image_handle.address(), thumbnail_id, out_thumbnail_handle.address());
    }
    public static MethodHandle heif_image_handle_get_number_of_auxiliary_images$MH() {
        return RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_number_of_auxiliary_images$MH,"heif_image_handle_get_number_of_auxiliary_images");
    }
    public static int heif_image_handle_get_number_of_auxiliary_images ( Addressable handle,  int aux_filter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_number_of_auxiliary_images$MH, "heif_image_handle_get_number_of_auxiliary_images");
        try {
            return (int)mh$.invokeExact(handle.address(), aux_filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_list_of_auxiliary_image_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_list_of_auxiliary_image_IDs$MH,"heif_image_handle_get_list_of_auxiliary_image_IDs");
    }
    public static int heif_image_handle_get_list_of_auxiliary_image_IDs ( Addressable handle,  int aux_filter,  Addressable ids,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_list_of_auxiliary_image_IDs$MH, "heif_image_handle_get_list_of_auxiliary_image_IDs");
        try {
            return (int)mh$.invokeExact(handle.address(), aux_filter, ids.address(), count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_auxiliary_type$MH() {
        return RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_auxiliary_type$MH,"heif_image_handle_get_auxiliary_type");
    }
    public static MemorySegment heif_image_handle_get_auxiliary_type ( SegmentAllocator allocator,  Addressable handle,  Addressable out_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.heif_image_handle_get_auxiliary_type$MH, "heif_image_handle_get_auxiliary_type");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, handle.address(), out_type.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_auxiliary_type ( ResourceScope scope,  Addressable handle,  Addressable out_type) {
        return heif_image_handle_get_auxiliary_type(SegmentAllocator.ofScope(scope), handle.address(), out_type.address());
    }
    public static MethodHandle heif_image_handle_free_auxiliary_types$MH() {
        return RuntimeHelper.requireNonNull(constants$8.heif_image_handle_free_auxiliary_types$MH,"heif_image_handle_free_auxiliary_types");
    }
    public static void heif_image_handle_free_auxiliary_types ( Addressable handle,  Addressable out_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.heif_image_handle_free_auxiliary_types$MH, "heif_image_handle_free_auxiliary_types");
        try {
            mh$.invokeExact(handle.address(), out_type.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_auxiliary_image_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_auxiliary_image_handle$MH,"heif_image_handle_get_auxiliary_image_handle");
    }
    public static MemorySegment heif_image_handle_get_auxiliary_image_handle ( SegmentAllocator allocator,  Addressable main_image_handle,  int auxiliary_id,  Addressable out_auxiliary_handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_auxiliary_image_handle$MH, "heif_image_handle_get_auxiliary_image_handle");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, main_image_handle.address(), auxiliary_id, out_auxiliary_handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_auxiliary_image_handle ( ResourceScope scope,  Addressable main_image_handle,  int auxiliary_id,  Addressable out_auxiliary_handle) {
        return heif_image_handle_get_auxiliary_image_handle(SegmentAllocator.ofScope(scope), main_image_handle.address(), auxiliary_id, out_auxiliary_handle.address());
    }
    public static MethodHandle heif_image_handle_get_number_of_metadata_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_number_of_metadata_blocks$MH,"heif_image_handle_get_number_of_metadata_blocks");
    }
    public static int heif_image_handle_get_number_of_metadata_blocks ( Addressable handle,  Addressable type_filter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_number_of_metadata_blocks$MH, "heif_image_handle_get_number_of_metadata_blocks");
        try {
            return (int)mh$.invokeExact(handle.address(), type_filter.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_list_of_metadata_block_IDs$MH() {
        return RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_list_of_metadata_block_IDs$MH,"heif_image_handle_get_list_of_metadata_block_IDs");
    }
    public static int heif_image_handle_get_list_of_metadata_block_IDs ( Addressable handle,  Addressable type_filter,  Addressable ids,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_list_of_metadata_block_IDs$MH, "heif_image_handle_get_list_of_metadata_block_IDs");
        try {
            return (int)mh$.invokeExact(handle.address(), type_filter.address(), ids.address(), count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_metadata_type$MH() {
        return RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_metadata_type$MH,"heif_image_handle_get_metadata_type");
    }
    public static MemoryAddress heif_image_handle_get_metadata_type ( Addressable handle,  int metadata_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_metadata_type$MH, "heif_image_handle_get_metadata_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(handle.address(), metadata_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_metadata_content_type$MH() {
        return RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_metadata_content_type$MH,"heif_image_handle_get_metadata_content_type");
    }
    public static MemoryAddress heif_image_handle_get_metadata_content_type ( Addressable handle,  int metadata_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_metadata_content_type$MH, "heif_image_handle_get_metadata_content_type");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(handle.address(), metadata_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_metadata_size$MH() {
        return RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_metadata_size$MH,"heif_image_handle_get_metadata_size");
    }
    public static long heif_image_handle_get_metadata_size ( Addressable handle,  int metadata_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.heif_image_handle_get_metadata_size$MH, "heif_image_handle_get_metadata_size");
        try {
            return (long)mh$.invokeExact(handle.address(), metadata_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_metadata$MH,"heif_image_handle_get_metadata");
    }
    public static MemorySegment heif_image_handle_get_metadata ( SegmentAllocator allocator,  Addressable handle,  int metadata_id,  Addressable out_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_metadata$MH, "heif_image_handle_get_metadata");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, handle.address(), metadata_id, out_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_metadata ( ResourceScope scope,  Addressable handle,  int metadata_id,  Addressable out_data) {
        return heif_image_handle_get_metadata(SegmentAllocator.ofScope(scope), handle.address(), metadata_id, out_data.address());
    }
    public static int heif_color_profile_type_not_present() {
        return (int)0L;
    }
    public static int heif_color_profile_type_nclx() {
        return (int)1852009592L;
    }
    public static int heif_color_profile_type_rICC() {
        return (int)1917403971L;
    }
    public static int heif_color_profile_type_prof() {
        return (int)1886547814L;
    }
    public static MethodHandle heif_image_handle_get_color_profile_type$MH() {
        return RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_color_profile_type$MH,"heif_image_handle_get_color_profile_type");
    }
    public static int heif_image_handle_get_color_profile_type ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_color_profile_type$MH, "heif_image_handle_get_color_profile_type");
        try {
            return (int)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_raw_color_profile_size$MH() {
        return RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_raw_color_profile_size$MH,"heif_image_handle_get_raw_color_profile_size");
    }
    public static long heif_image_handle_get_raw_color_profile_size ( Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_raw_color_profile_size$MH, "heif_image_handle_get_raw_color_profile_size");
        try {
            return (long)mh$.invokeExact(handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_handle_get_raw_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_raw_color_profile$MH,"heif_image_handle_get_raw_color_profile");
    }
    public static MemorySegment heif_image_handle_get_raw_color_profile ( SegmentAllocator allocator,  Addressable handle,  Addressable out_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_raw_color_profile$MH, "heif_image_handle_get_raw_color_profile");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, handle.address(), out_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_raw_color_profile ( ResourceScope scope,  Addressable handle,  Addressable out_data) {
        return heif_image_handle_get_raw_color_profile(SegmentAllocator.ofScope(scope), handle.address(), out_data.address());
    }
    public static int heif_color_primaries_ITU_R_BT_709_5() {
        return (int)1L;
    }
    public static int heif_color_primaries_unspecified() {
        return (int)2L;
    }
    public static int heif_color_primaries_ITU_R_BT_470_6_System_M() {
        return (int)4L;
    }
    public static int heif_color_primaries_ITU_R_BT_470_6_System_B_G() {
        return (int)5L;
    }
    public static int heif_color_primaries_ITU_R_BT_601_6() {
        return (int)6L;
    }
    public static int heif_color_primaries_SMPTE_240M() {
        return (int)7L;
    }
    public static int heif_color_primaries_generic_film() {
        return (int)8L;
    }
    public static int heif_color_primaries_ITU_R_BT_2020_2_and_2100_0() {
        return (int)9L;
    }
    public static int heif_color_primaries_SMPTE_ST_428_1() {
        return (int)10L;
    }
    public static int heif_color_primaries_SMPTE_RP_431_2() {
        return (int)11L;
    }
    public static int heif_color_primaries_SMPTE_EG_432_1() {
        return (int)12L;
    }
    public static int heif_color_primaries_EBU_Tech_3213_E() {
        return (int)22L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_709_5() {
        return (int)1L;
    }
    public static int heif_transfer_characteristic_unspecified() {
        return (int)2L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_470_6_System_M() {
        return (int)4L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_470_6_System_B_G() {
        return (int)5L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_601_6() {
        return (int)6L;
    }
    public static int heif_transfer_characteristic_SMPTE_240M() {
        return (int)7L;
    }
    public static int heif_transfer_characteristic_linear() {
        return (int)8L;
    }
    public static int heif_transfer_characteristic_logarithmic_100() {
        return (int)9L;
    }
    public static int heif_transfer_characteristic_logarithmic_100_sqrt10() {
        return (int)10L;
    }
    public static int heif_transfer_characteristic_IEC_61966_2_4() {
        return (int)11L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_1361() {
        return (int)12L;
    }
    public static int heif_transfer_characteristic_IEC_61966_2_1() {
        return (int)13L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_2020_2_10bit() {
        return (int)14L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_2020_2_12bit() {
        return (int)15L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_2100_0_PQ() {
        return (int)16L;
    }
    public static int heif_transfer_characteristic_SMPTE_ST_428_1() {
        return (int)17L;
    }
    public static int heif_transfer_characteristic_ITU_R_BT_2100_0_HLG() {
        return (int)18L;
    }
    public static int heif_matrix_coefficients_RGB_GBR() {
        return (int)0L;
    }
    public static int heif_matrix_coefficients_ITU_R_BT_709_5() {
        return (int)1L;
    }
    public static int heif_matrix_coefficients_unspecified() {
        return (int)2L;
    }
    public static int heif_matrix_coefficients_US_FCC_T47() {
        return (int)4L;
    }
    public static int heif_matrix_coefficients_ITU_R_BT_470_6_System_B_G() {
        return (int)5L;
    }
    public static int heif_matrix_coefficients_ITU_R_BT_601_6() {
        return (int)6L;
    }
    public static int heif_matrix_coefficients_SMPTE_240M() {
        return (int)7L;
    }
    public static int heif_matrix_coefficients_YCgCo() {
        return (int)8L;
    }
    public static int heif_matrix_coefficients_ITU_R_BT_2020_2_non_constant_luminance() {
        return (int)9L;
    }
    public static int heif_matrix_coefficients_ITU_R_BT_2020_2_constant_luminance() {
        return (int)10L;
    }
    public static int heif_matrix_coefficients_SMPTE_ST_2085() {
        return (int)11L;
    }
    public static int heif_matrix_coefficients_chromaticity_derived_non_constant_luminance() {
        return (int)12L;
    }
    public static int heif_matrix_coefficients_chromaticity_derived_constant_luminance() {
        return (int)13L;
    }
    public static int heif_matrix_coefficients_ICtCp() {
        return (int)14L;
    }
    public static MethodHandle heif_image_handle_get_nclx_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_nclx_color_profile$MH,"heif_image_handle_get_nclx_color_profile");
    }
    public static MemorySegment heif_image_handle_get_nclx_color_profile ( SegmentAllocator allocator,  Addressable handle,  Addressable out_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.heif_image_handle_get_nclx_color_profile$MH, "heif_image_handle_get_nclx_color_profile");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, handle.address(), out_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_handle_get_nclx_color_profile ( ResourceScope scope,  Addressable handle,  Addressable out_data) {
        return heif_image_handle_get_nclx_color_profile(SegmentAllocator.ofScope(scope), handle.address(), out_data.address());
    }
    public static MethodHandle heif_nclx_color_profile_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.heif_nclx_color_profile_alloc$MH,"heif_nclx_color_profile_alloc");
    }
    public static MemoryAddress heif_nclx_color_profile_alloc (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.heif_nclx_color_profile_alloc$MH, "heif_nclx_color_profile_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_nclx_color_profile_free$MH() {
        return RuntimeHelper.requireNonNull(constants$11.heif_nclx_color_profile_free$MH,"heif_nclx_color_profile_free");
    }
    public static void heif_nclx_color_profile_free ( Addressable nclx_profile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.heif_nclx_color_profile_free$MH, "heif_nclx_color_profile_free");
        try {
            mh$.invokeExact(nclx_profile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_color_profile_type$MH() {
        return RuntimeHelper.requireNonNull(constants$11.heif_image_get_color_profile_type$MH,"heif_image_get_color_profile_type");
    }
    public static int heif_image_get_color_profile_type ( Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.heif_image_get_color_profile_type$MH, "heif_image_get_color_profile_type");
        try {
            return (int)mh$.invokeExact(image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_raw_color_profile_size$MH() {
        return RuntimeHelper.requireNonNull(constants$11.heif_image_get_raw_color_profile_size$MH,"heif_image_get_raw_color_profile_size");
    }
    public static long heif_image_get_raw_color_profile_size ( Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.heif_image_get_raw_color_profile_size$MH, "heif_image_get_raw_color_profile_size");
        try {
            return (long)mh$.invokeExact(image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_raw_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$11.heif_image_get_raw_color_profile$MH,"heif_image_get_raw_color_profile");
    }
    public static MemorySegment heif_image_get_raw_color_profile ( SegmentAllocator allocator,  Addressable image,  Addressable out_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.heif_image_get_raw_color_profile$MH, "heif_image_get_raw_color_profile");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, image.address(), out_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_get_raw_color_profile ( ResourceScope scope,  Addressable image,  Addressable out_data) {
        return heif_image_get_raw_color_profile(SegmentAllocator.ofScope(scope), image.address(), out_data.address());
    }
    public static MethodHandle heif_image_get_nclx_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$11.heif_image_get_nclx_color_profile$MH,"heif_image_get_nclx_color_profile");
    }
    public static MemorySegment heif_image_get_nclx_color_profile ( SegmentAllocator allocator,  Addressable image,  Addressable out_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.heif_image_get_nclx_color_profile$MH, "heif_image_get_nclx_color_profile");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, image.address(), out_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_get_nclx_color_profile ( ResourceScope scope,  Addressable image,  Addressable out_data) {
        return heif_image_get_nclx_color_profile(SegmentAllocator.ofScope(scope), image.address(), out_data.address());
    }
    public static int heif_compression_undefined() {
        return (int)0L;
    }
    public static int heif_compression_HEVC() {
        return (int)1L;
    }
    public static int heif_compression_AVC() {
        return (int)2L;
    }
    public static int heif_compression_JPEG() {
        return (int)3L;
    }
    public static int heif_compression_AV1() {
        return (int)4L;
    }
    public static int heif_chroma_undefined() {
        return (int)99L;
    }
    public static int heif_chroma_monochrome() {
        return (int)0L;
    }
    public static int heif_chroma_420() {
        return (int)1L;
    }
    public static int heif_chroma_422() {
        return (int)2L;
    }
    public static int heif_chroma_444() {
        return (int)3L;
    }
    public static int heif_chroma_interleaved_RGB() {
        return (int)10L;
    }
    public static int heif_chroma_interleaved_RGBA() {
        return (int)11L;
    }
    public static int heif_chroma_interleaved_RRGGBB_BE() {
        return (int)12L;
    }
    public static int heif_chroma_interleaved_RRGGBBAA_BE() {
        return (int)13L;
    }
    public static int heif_chroma_interleaved_RRGGBB_LE() {
        return (int)14L;
    }
    public static int heif_chroma_interleaved_RRGGBBAA_LE() {
        return (int)15L;
    }
    public static int heif_colorspace_undefined() {
        return (int)99L;
    }
    public static int heif_colorspace_YCbCr() {
        return (int)0L;
    }
    public static int heif_colorspace_RGB() {
        return (int)1L;
    }
    public static int heif_colorspace_monochrome() {
        return (int)2L;
    }
    public static int heif_channel_Y() {
        return (int)0L;
    }
    public static int heif_channel_Cb() {
        return (int)1L;
    }
    public static int heif_channel_Cr() {
        return (int)2L;
    }
    public static int heif_channel_R() {
        return (int)3L;
    }
    public static int heif_channel_G() {
        return (int)4L;
    }
    public static int heif_channel_B() {
        return (int)5L;
    }
    public static int heif_channel_Alpha() {
        return (int)6L;
    }
    public static int heif_channel_interleaved() {
        return (int)10L;
    }
    public static int heif_progress_step_total() {
        return (int)0L;
    }
    public static int heif_progress_step_load_tile() {
        return (int)1L;
    }
    public static MethodHandle heif_decoding_options_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$11.heif_decoding_options_alloc$MH,"heif_decoding_options_alloc");
    }
    public static MemoryAddress heif_decoding_options_alloc (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.heif_decoding_options_alloc$MH, "heif_decoding_options_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_decoding_options_free$MH() {
        return RuntimeHelper.requireNonNull(constants$12.heif_decoding_options_free$MH,"heif_decoding_options_free");
    }
    public static void heif_decoding_options_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.heif_decoding_options_free$MH, "heif_decoding_options_free");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_decode_image$MH() {
        return RuntimeHelper.requireNonNull(constants$12.heif_decode_image$MH,"heif_decode_image");
    }
    public static MemorySegment heif_decode_image ( SegmentAllocator allocator,  Addressable in_handle,  Addressable out_img,  int colorspace,  int chroma,  Addressable options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.heif_decode_image$MH, "heif_decode_image");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, in_handle.address(), out_img.address(), colorspace, chroma, options.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_decode_image ( ResourceScope scope,  Addressable in_handle,  Addressable out_img,  int colorspace,  int chroma,  Addressable options) {
        return heif_decode_image(SegmentAllocator.ofScope(scope), in_handle.address(), out_img.address(), colorspace, chroma, options.address());
    }
    public static MethodHandle heif_decode_image_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$12.heif_decode_image_alloc$MH,"heif_decode_image_alloc");
    }
    public static MemoryAddress heif_decode_image_alloc ( Addressable in_handle,  int colorspace,  int chroma,  Addressable options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.heif_decode_image_alloc$MH, "heif_decode_image_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(in_handle.address(), colorspace, chroma, options.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_colorspace$MH() {
        return RuntimeHelper.requireNonNull(constants$12.heif_image_get_colorspace$MH,"heif_image_get_colorspace");
    }
    public static int heif_image_get_colorspace ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.heif_image_get_colorspace$MH, "heif_image_get_colorspace");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_chroma_format$MH() {
        return RuntimeHelper.requireNonNull(constants$12.heif_image_get_chroma_format$MH,"heif_image_get_chroma_format");
    }
    public static int heif_image_get_chroma_format ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.heif_image_get_chroma_format$MH, "heif_image_get_chroma_format");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_width$MH() {
        return RuntimeHelper.requireNonNull(constants$12.heif_image_get_width$MH,"heif_image_get_width");
    }
    public static int heif_image_get_width ( Addressable x0,  int channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.heif_image_get_width$MH, "heif_image_get_width");
        try {
            return (int)mh$.invokeExact(x0.address(), channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_height$MH() {
        return RuntimeHelper.requireNonNull(constants$13.heif_image_get_height$MH,"heif_image_get_height");
    }
    public static int heif_image_get_height ( Addressable x0,  int channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.heif_image_get_height$MH, "heif_image_get_height");
        try {
            return (int)mh$.invokeExact(x0.address(), channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_primary_width$MH() {
        return RuntimeHelper.requireNonNull(constants$13.heif_image_get_primary_width$MH,"heif_image_get_primary_width");
    }
    public static int heif_image_get_primary_width ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.heif_image_get_primary_width$MH, "heif_image_get_primary_width");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_primary_height$MH() {
        return RuntimeHelper.requireNonNull(constants$13.heif_image_get_primary_height$MH,"heif_image_get_primary_height");
    }
    public static int heif_image_get_primary_height ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.heif_image_get_primary_height$MH, "heif_image_get_primary_height");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_crop$MH() {
        return RuntimeHelper.requireNonNull(constants$13.heif_image_crop$MH,"heif_image_crop");
    }
    public static MemorySegment heif_image_crop ( SegmentAllocator allocator,  Addressable img,  int left,  int right,  int top,  int bottom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.heif_image_crop$MH, "heif_image_crop");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, img.address(), left, right, top, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_crop ( ResourceScope scope,  Addressable img,  int left,  int right,  int top,  int bottom) {
        return heif_image_crop(SegmentAllocator.ofScope(scope), img.address(), left, right, top, bottom);
    }
    public static MethodHandle heif_image_get_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$13.heif_image_get_bits_per_pixel$MH,"heif_image_get_bits_per_pixel");
    }
    public static int heif_image_get_bits_per_pixel ( Addressable x0,  int channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.heif_image_get_bits_per_pixel$MH, "heif_image_get_bits_per_pixel");
        try {
            return (int)mh$.invokeExact(x0.address(), channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_bits_per_pixel_range$MH() {
        return RuntimeHelper.requireNonNull(constants$13.heif_image_get_bits_per_pixel_range$MH,"heif_image_get_bits_per_pixel_range");
    }
    public static int heif_image_get_bits_per_pixel_range ( Addressable x0,  int channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.heif_image_get_bits_per_pixel_range$MH, "heif_image_get_bits_per_pixel_range");
        try {
            return (int)mh$.invokeExact(x0.address(), channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_has_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$14.heif_image_has_channel$MH,"heif_image_has_channel");
    }
    public static int heif_image_has_channel ( Addressable x0,  int channel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.heif_image_has_channel$MH, "heif_image_has_channel");
        try {
            return (int)mh$.invokeExact(x0.address(), channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_plane_readonly$MH() {
        return RuntimeHelper.requireNonNull(constants$14.heif_image_get_plane_readonly$MH,"heif_image_get_plane_readonly");
    }
    public static MemoryAddress heif_image_get_plane_readonly ( Addressable x0,  int channel,  Addressable out_stride) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.heif_image_get_plane_readonly$MH, "heif_image_get_plane_readonly");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), channel, out_stride.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_get_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$14.heif_image_get_plane$MH,"heif_image_get_plane");
    }
    public static MemoryAddress heif_image_get_plane ( Addressable x0,  int channel,  Addressable out_stride) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.heif_image_get_plane$MH, "heif_image_get_plane");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address(), channel, out_stride.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_scale_image$MH() {
        return RuntimeHelper.requireNonNull(constants$14.heif_image_scale_image$MH,"heif_image_scale_image");
    }
    public static MemorySegment heif_image_scale_image ( SegmentAllocator allocator,  Addressable input,  Addressable output,  int width,  int height,  Addressable options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.heif_image_scale_image$MH, "heif_image_scale_image");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, input.address(), output.address(), width, height, options.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_scale_image ( ResourceScope scope,  Addressable input,  Addressable output,  int width,  int height,  Addressable options) {
        return heif_image_scale_image(SegmentAllocator.ofScope(scope), input.address(), output.address(), width, height, options.address());
    }
    public static MethodHandle heif_image_set_raw_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.heif_image_set_raw_color_profile$MH,"heif_image_set_raw_color_profile");
    }
    public static MemorySegment heif_image_set_raw_color_profile ( SegmentAllocator allocator,  Addressable image,  Addressable profile_type_fourcc_string,  Addressable profile_data,  long profile_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.heif_image_set_raw_color_profile$MH, "heif_image_set_raw_color_profile");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, image.address(), profile_type_fourcc_string.address(), profile_data.address(), profile_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_set_raw_color_profile ( ResourceScope scope,  Addressable image,  Addressable profile_type_fourcc_string,  Addressable profile_data,  long profile_size) {
        return heif_image_set_raw_color_profile(SegmentAllocator.ofScope(scope), image.address(), profile_type_fourcc_string.address(), profile_data.address(), profile_size);
    }
    public static MethodHandle heif_image_set_nclx_color_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.heif_image_set_nclx_color_profile$MH,"heif_image_set_nclx_color_profile");
    }
    public static MemorySegment heif_image_set_nclx_color_profile ( SegmentAllocator allocator,  Addressable image,  Addressable color_profile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.heif_image_set_nclx_color_profile$MH, "heif_image_set_nclx_color_profile");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, image.address(), color_profile.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_set_nclx_color_profile ( ResourceScope scope,  Addressable image,  Addressable color_profile) {
        return heif_image_set_nclx_color_profile(SegmentAllocator.ofScope(scope), image.address(), color_profile.address());
    }
    public static MethodHandle heif_image_release$MH() {
        return RuntimeHelper.requireNonNull(constants$15.heif_image_release$MH,"heif_image_release");
    }
    public static void heif_image_release ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.heif_image_release$MH, "heif_image_release");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_write_to_file$MH() {
        return RuntimeHelper.requireNonNull(constants$15.heif_context_write_to_file$MH,"heif_context_write_to_file");
    }
    public static MemorySegment heif_context_write_to_file ( SegmentAllocator allocator,  Addressable x1,  Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.heif_context_write_to_file$MH, "heif_context_write_to_file");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), filename.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_write_to_file ( ResourceScope scope,  Addressable x1,  Addressable filename) {
        return heif_context_write_to_file(SegmentAllocator.ofScope(scope), x1.address(), filename.address());
    }
    public static MethodHandle heif_context_write$MH() {
        return RuntimeHelper.requireNonNull(constants$15.heif_context_write$MH,"heif_context_write");
    }
    public static MemorySegment heif_context_write ( SegmentAllocator allocator,  Addressable x1,  Addressable writer,  Addressable userdata) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.heif_context_write$MH, "heif_context_write");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), writer.address(), userdata.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_write ( ResourceScope scope,  Addressable x1,  Addressable writer,  Addressable userdata) {
        return heif_context_write(SegmentAllocator.ofScope(scope), x1.address(), writer.address(), userdata.address());
    }
    public static MethodHandle heif_context_get_encoder_descriptors$MH() {
        return RuntimeHelper.requireNonNull(constants$15.heif_context_get_encoder_descriptors$MH,"heif_context_get_encoder_descriptors");
    }
    public static int heif_context_get_encoder_descriptors ( Addressable x0,  int format_filter,  Addressable name_filter,  Addressable out_encoders,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.heif_context_get_encoder_descriptors$MH, "heif_context_get_encoder_descriptors");
        try {
            return (int)mh$.invokeExact(x0.address(), format_filter, name_filter.address(), out_encoders.address(), count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_descriptor_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$15.heif_encoder_descriptor_get_name$MH,"heif_encoder_descriptor_get_name");
    }
    public static MemoryAddress heif_encoder_descriptor_get_name ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.heif_encoder_descriptor_get_name$MH, "heif_encoder_descriptor_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_descriptor_get_id_name$MH() {
        return RuntimeHelper.requireNonNull(constants$15.heif_encoder_descriptor_get_id_name$MH,"heif_encoder_descriptor_get_id_name");
    }
    public static MemoryAddress heif_encoder_descriptor_get_id_name ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.heif_encoder_descriptor_get_id_name$MH, "heif_encoder_descriptor_get_id_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_descriptor_get_compression_format$MH() {
        return RuntimeHelper.requireNonNull(constants$16.heif_encoder_descriptor_get_compression_format$MH,"heif_encoder_descriptor_get_compression_format");
    }
    public static int heif_encoder_descriptor_get_compression_format ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.heif_encoder_descriptor_get_compression_format$MH, "heif_encoder_descriptor_get_compression_format");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_descriptor_supports_lossy_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$16.heif_encoder_descriptor_supports_lossy_compression$MH,"heif_encoder_descriptor_supports_lossy_compression");
    }
    public static int heif_encoder_descriptor_supports_lossy_compression ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.heif_encoder_descriptor_supports_lossy_compression$MH, "heif_encoder_descriptor_supports_lossy_compression");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_descriptor_supports_lossless_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$16.heif_encoder_descriptor_supports_lossless_compression$MH,"heif_encoder_descriptor_supports_lossless_compression");
    }
    public static int heif_encoder_descriptor_supports_lossless_compression ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.heif_encoder_descriptor_supports_lossless_compression$MH, "heif_encoder_descriptor_supports_lossless_compression");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_get_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$16.heif_context_get_encoder$MH,"heif_context_get_encoder");
    }
    public static MemorySegment heif_context_get_encoder ( SegmentAllocator allocator,  Addressable context,  Addressable x2,  Addressable out_encoder) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.heif_context_get_encoder$MH, "heif_context_get_encoder");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, context.address(), x2.address(), out_encoder.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_get_encoder ( ResourceScope scope,  Addressable context,  Addressable x2,  Addressable out_encoder) {
        return heif_context_get_encoder(SegmentAllocator.ofScope(scope), context.address(), x2.address(), out_encoder.address());
    }
    public static MethodHandle heif_have_decoder_for_format$MH() {
        return RuntimeHelper.requireNonNull(constants$16.heif_have_decoder_for_format$MH,"heif_have_decoder_for_format");
    }
    public static int heif_have_decoder_for_format ( int format) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.heif_have_decoder_for_format$MH, "heif_have_decoder_for_format");
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_have_encoder_for_format$MH() {
        return RuntimeHelper.requireNonNull(constants$16.heif_have_encoder_for_format$MH,"heif_have_encoder_for_format");
    }
    public static int heif_have_encoder_for_format ( int format) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.heif_have_encoder_for_format$MH, "heif_have_encoder_for_format");
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_get_encoder_for_format$MH() {
        return RuntimeHelper.requireNonNull(constants$17.heif_context_get_encoder_for_format$MH,"heif_context_get_encoder_for_format");
    }
    public static MemorySegment heif_context_get_encoder_for_format ( SegmentAllocator allocator,  Addressable context,  int format,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.heif_context_get_encoder_for_format$MH, "heif_context_get_encoder_for_format");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, context.address(), format, x3.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_get_encoder_for_format ( ResourceScope scope,  Addressable context,  int format,  Addressable x3) {
        return heif_context_get_encoder_for_format(SegmentAllocator.ofScope(scope), context.address(), format, x3.address());
    }
    public static MethodHandle heif_encoder_release$MH() {
        return RuntimeHelper.requireNonNull(constants$17.heif_encoder_release$MH,"heif_encoder_release");
    }
    public static void heif_encoder_release ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.heif_encoder_release$MH, "heif_encoder_release");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$17.heif_encoder_get_name$MH,"heif_encoder_get_name");
    }
    public static MemoryAddress heif_encoder_get_name ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.heif_encoder_get_name$MH, "heif_encoder_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_set_lossy_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$17.heif_encoder_set_lossy_quality$MH,"heif_encoder_set_lossy_quality");
    }
    public static MemorySegment heif_encoder_set_lossy_quality ( SegmentAllocator allocator,  Addressable x1,  int quality) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.heif_encoder_set_lossy_quality$MH, "heif_encoder_set_lossy_quality");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_lossy_quality ( ResourceScope scope,  Addressable x1,  int quality) {
        return heif_encoder_set_lossy_quality(SegmentAllocator.ofScope(scope), x1.address(), quality);
    }
    public static MethodHandle heif_encoder_set_lossless$MH() {
        return RuntimeHelper.requireNonNull(constants$17.heif_encoder_set_lossless$MH,"heif_encoder_set_lossless");
    }
    public static MemorySegment heif_encoder_set_lossless ( SegmentAllocator allocator,  Addressable x1,  int enable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.heif_encoder_set_lossless$MH, "heif_encoder_set_lossless");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_lossless ( ResourceScope scope,  Addressable x1,  int enable) {
        return heif_encoder_set_lossless(SegmentAllocator.ofScope(scope), x1.address(), enable);
    }
    public static MethodHandle heif_encoder_set_logging_level$MH() {
        return RuntimeHelper.requireNonNull(constants$17.heif_encoder_set_logging_level$MH,"heif_encoder_set_logging_level");
    }
    public static MemorySegment heif_encoder_set_logging_level ( SegmentAllocator allocator,  Addressable x1,  int level) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.heif_encoder_set_logging_level$MH, "heif_encoder_set_logging_level");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_logging_level ( ResourceScope scope,  Addressable x1,  int level) {
        return heif_encoder_set_logging_level(SegmentAllocator.ofScope(scope), x1.address(), level);
    }
    public static MethodHandle heif_encoder_list_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$18.heif_encoder_list_parameters$MH,"heif_encoder_list_parameters");
    }
    public static MemoryAddress heif_encoder_list_parameters ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.heif_encoder_list_parameters$MH, "heif_encoder_list_parameters");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_parameter_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_name$MH,"heif_encoder_parameter_get_name");
    }
    public static MemoryAddress heif_encoder_parameter_get_name ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_name$MH, "heif_encoder_parameter_get_name");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int heif_encoder_parameter_type_integer() {
        return (int)1L;
    }
    public static int heif_encoder_parameter_type_boolean() {
        return (int)2L;
    }
    public static int heif_encoder_parameter_type_string() {
        return (int)3L;
    }
    public static MethodHandle heif_encoder_parameter_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_type$MH,"heif_encoder_parameter_get_type");
    }
    public static int heif_encoder_parameter_get_type ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_type$MH, "heif_encoder_parameter_get_type");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_parameter_get_valid_integer_range$MH() {
        return RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_valid_integer_range$MH,"heif_encoder_parameter_get_valid_integer_range");
    }
    public static MemorySegment heif_encoder_parameter_get_valid_integer_range ( SegmentAllocator allocator,  Addressable x1,  Addressable have_minimum_maximum,  Addressable minimum,  Addressable maximum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_valid_integer_range$MH, "heif_encoder_parameter_get_valid_integer_range");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), have_minimum_maximum.address(), minimum.address(), maximum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_parameter_get_valid_integer_range ( ResourceScope scope,  Addressable x1,  Addressable have_minimum_maximum,  Addressable minimum,  Addressable maximum) {
        return heif_encoder_parameter_get_valid_integer_range(SegmentAllocator.ofScope(scope), x1.address(), have_minimum_maximum.address(), minimum.address(), maximum.address());
    }
    public static MethodHandle heif_encoder_parameter_get_valid_integer_values$MH() {
        return RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_valid_integer_values$MH,"heif_encoder_parameter_get_valid_integer_values");
    }
    public static MemorySegment heif_encoder_parameter_get_valid_integer_values ( SegmentAllocator allocator,  Addressable x1,  Addressable have_minimum,  Addressable have_maximum,  Addressable minimum,  Addressable maximum,  Addressable num_valid_values,  Addressable out_integer_array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_valid_integer_values$MH, "heif_encoder_parameter_get_valid_integer_values");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), have_minimum.address(), have_maximum.address(), minimum.address(), maximum.address(), num_valid_values.address(), out_integer_array.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_parameter_get_valid_integer_values ( ResourceScope scope,  Addressable x1,  Addressable have_minimum,  Addressable have_maximum,  Addressable minimum,  Addressable maximum,  Addressable num_valid_values,  Addressable out_integer_array) {
        return heif_encoder_parameter_get_valid_integer_values(SegmentAllocator.ofScope(scope), x1.address(), have_minimum.address(), have_maximum.address(), minimum.address(), maximum.address(), num_valid_values.address(), out_integer_array.address());
    }
    public static MethodHandle heif_encoder_parameter_get_valid_string_values$MH() {
        return RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_valid_string_values$MH,"heif_encoder_parameter_get_valid_string_values");
    }
    public static MemorySegment heif_encoder_parameter_get_valid_string_values ( SegmentAllocator allocator,  Addressable x1,  Addressable out_stringarray) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.heif_encoder_parameter_get_valid_string_values$MH, "heif_encoder_parameter_get_valid_string_values");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), out_stringarray.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_parameter_get_valid_string_values ( ResourceScope scope,  Addressable x1,  Addressable out_stringarray) {
        return heif_encoder_parameter_get_valid_string_values(SegmentAllocator.ofScope(scope), x1.address(), out_stringarray.address());
    }
    public static MethodHandle heif_encoder_set_parameter_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$19.heif_encoder_set_parameter_integer$MH,"heif_encoder_set_parameter_integer");
    }
    public static MemorySegment heif_encoder_set_parameter_integer ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.heif_encoder_set_parameter_integer$MH, "heif_encoder_set_parameter_integer");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_parameter_integer ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  int value) {
        return heif_encoder_set_parameter_integer(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value);
    }
    public static MethodHandle heif_encoder_get_parameter_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$19.heif_encoder_get_parameter_integer$MH,"heif_encoder_get_parameter_integer");
    }
    public static MemorySegment heif_encoder_get_parameter_integer ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.heif_encoder_get_parameter_integer$MH, "heif_encoder_get_parameter_integer");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_get_parameter_integer ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        return heif_encoder_get_parameter_integer(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value.address());
    }
    public static MethodHandle heif_encoder_parameter_integer_valid_range$MH() {
        return RuntimeHelper.requireNonNull(constants$19.heif_encoder_parameter_integer_valid_range$MH,"heif_encoder_parameter_integer_valid_range");
    }
    public static MemorySegment heif_encoder_parameter_integer_valid_range ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable have_minimum_maximum,  Addressable minimum,  Addressable maximum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.heif_encoder_parameter_integer_valid_range$MH, "heif_encoder_parameter_integer_valid_range");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), have_minimum_maximum.address(), minimum.address(), maximum.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_parameter_integer_valid_range ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable have_minimum_maximum,  Addressable minimum,  Addressable maximum) {
        return heif_encoder_parameter_integer_valid_range(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), have_minimum_maximum.address(), minimum.address(), maximum.address());
    }
    public static MethodHandle heif_encoder_set_parameter_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$19.heif_encoder_set_parameter_boolean$MH,"heif_encoder_set_parameter_boolean");
    }
    public static MemorySegment heif_encoder_set_parameter_boolean ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.heif_encoder_set_parameter_boolean$MH, "heif_encoder_set_parameter_boolean");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_parameter_boolean ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  int value) {
        return heif_encoder_set_parameter_boolean(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value);
    }
    public static MethodHandle heif_encoder_get_parameter_boolean$MH() {
        return RuntimeHelper.requireNonNull(constants$19.heif_encoder_get_parameter_boolean$MH,"heif_encoder_get_parameter_boolean");
    }
    public static MemorySegment heif_encoder_get_parameter_boolean ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.heif_encoder_get_parameter_boolean$MH, "heif_encoder_get_parameter_boolean");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_get_parameter_boolean ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        return heif_encoder_get_parameter_boolean(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value.address());
    }
    public static MethodHandle heif_encoder_set_parameter_string$MH() {
        return RuntimeHelper.requireNonNull(constants$19.heif_encoder_set_parameter_string$MH,"heif_encoder_set_parameter_string");
    }
    public static MemorySegment heif_encoder_set_parameter_string ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.heif_encoder_set_parameter_string$MH, "heif_encoder_set_parameter_string");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_parameter_string ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        return heif_encoder_set_parameter_string(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value.address());
    }
    public static MethodHandle heif_encoder_get_parameter_string$MH() {
        return RuntimeHelper.requireNonNull(constants$20.heif_encoder_get_parameter_string$MH,"heif_encoder_get_parameter_string");
    }
    public static MemorySegment heif_encoder_get_parameter_string ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable value,  int value_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.heif_encoder_get_parameter_string$MH, "heif_encoder_get_parameter_string");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value.address(), value_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_get_parameter_string ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable value,  int value_size) {
        return heif_encoder_get_parameter_string(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value.address(), value_size);
    }
    public static MethodHandle heif_encoder_parameter_string_valid_values$MH() {
        return RuntimeHelper.requireNonNull(constants$20.heif_encoder_parameter_string_valid_values$MH,"heif_encoder_parameter_string_valid_values");
    }
    public static MemorySegment heif_encoder_parameter_string_valid_values ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable out_stringarray) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.heif_encoder_parameter_string_valid_values$MH, "heif_encoder_parameter_string_valid_values");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), out_stringarray.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_parameter_string_valid_values ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable out_stringarray) {
        return heif_encoder_parameter_string_valid_values(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), out_stringarray.address());
    }
    public static MethodHandle heif_encoder_parameter_integer_valid_values$MH() {
        return RuntimeHelper.requireNonNull(constants$20.heif_encoder_parameter_integer_valid_values$MH,"heif_encoder_parameter_integer_valid_values");
    }
    public static MemorySegment heif_encoder_parameter_integer_valid_values ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable have_minimum,  Addressable have_maximum,  Addressable minimum,  Addressable maximum,  Addressable num_valid_values,  Addressable out_integer_array) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.heif_encoder_parameter_integer_valid_values$MH, "heif_encoder_parameter_integer_valid_values");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), have_minimum.address(), have_maximum.address(), minimum.address(), maximum.address(), num_valid_values.address(), out_integer_array.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_parameter_integer_valid_values ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable have_minimum,  Addressable have_maximum,  Addressable minimum,  Addressable maximum,  Addressable num_valid_values,  Addressable out_integer_array) {
        return heif_encoder_parameter_integer_valid_values(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), have_minimum.address(), have_maximum.address(), minimum.address(), maximum.address(), num_valid_values.address(), out_integer_array.address());
    }
    public static MethodHandle heif_encoder_set_parameter$MH() {
        return RuntimeHelper.requireNonNull(constants$20.heif_encoder_set_parameter$MH,"heif_encoder_set_parameter");
    }
    public static MemorySegment heif_encoder_set_parameter ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.heif_encoder_set_parameter$MH, "heif_encoder_set_parameter");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_set_parameter ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable value) {
        return heif_encoder_set_parameter(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value.address());
    }
    public static MethodHandle heif_encoder_get_parameter$MH() {
        return RuntimeHelper.requireNonNull(constants$20.heif_encoder_get_parameter$MH,"heif_encoder_get_parameter");
    }
    public static MemorySegment heif_encoder_get_parameter ( SegmentAllocator allocator,  Addressable x1,  Addressable parameter_name,  Addressable value_ptr,  int value_size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.heif_encoder_get_parameter$MH, "heif_encoder_get_parameter");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), parameter_name.address(), value_ptr.address(), value_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_encoder_get_parameter ( ResourceScope scope,  Addressable x1,  Addressable parameter_name,  Addressable value_ptr,  int value_size) {
        return heif_encoder_get_parameter(SegmentAllocator.ofScope(scope), x1.address(), parameter_name.address(), value_ptr.address(), value_size);
    }
    public static MethodHandle heif_encoder_has_default$MH() {
        return RuntimeHelper.requireNonNull(constants$20.heif_encoder_has_default$MH,"heif_encoder_has_default");
    }
    public static int heif_encoder_has_default ( Addressable x0,  Addressable parameter_name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.heif_encoder_has_default$MH, "heif_encoder_has_default");
        try {
            return (int)mh$.invokeExact(x0.address(), parameter_name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoding_options_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heif_encoding_options_alloc$MH,"heif_encoding_options_alloc");
    }
    public static MemoryAddress heif_encoding_options_alloc (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heif_encoding_options_alloc$MH, "heif_encoding_options_alloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoding_options_free$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heif_encoding_options_free$MH,"heif_encoding_options_free");
    }
    public static void heif_encoding_options_free ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heif_encoding_options_free$MH, "heif_encoding_options_free");
        try {
            mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_context_encode_image$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heif_context_encode_image$MH,"heif_context_encode_image");
    }
    public static MemorySegment heif_context_encode_image ( SegmentAllocator allocator,  Addressable x1,  Addressable image,  Addressable encoder,  Addressable options,  Addressable out_image_handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heif_context_encode_image$MH, "heif_context_encode_image");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), image.address(), encoder.address(), options.address(), out_image_handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_encode_image ( ResourceScope scope,  Addressable x1,  Addressable image,  Addressable encoder,  Addressable options,  Addressable out_image_handle) {
        return heif_context_encode_image(SegmentAllocator.ofScope(scope), x1.address(), image.address(), encoder.address(), options.address(), out_image_handle.address());
    }
    public static MethodHandle heif_context_set_primary_image$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heif_context_set_primary_image$MH,"heif_context_set_primary_image");
    }
    public static MemorySegment heif_context_set_primary_image ( SegmentAllocator allocator,  Addressable x1,  Addressable image_handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heif_context_set_primary_image$MH, "heif_context_set_primary_image");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), image_handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_set_primary_image ( ResourceScope scope,  Addressable x1,  Addressable image_handle) {
        return heif_context_set_primary_image(SegmentAllocator.ofScope(scope), x1.address(), image_handle.address());
    }
    public static MethodHandle heif_context_encode_thumbnail$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heif_context_encode_thumbnail$MH,"heif_context_encode_thumbnail");
    }
    public static MemorySegment heif_context_encode_thumbnail ( SegmentAllocator allocator,  Addressable x1,  Addressable image,  Addressable master_image_handle,  Addressable encoder,  Addressable options,  int bbox_size,  Addressable out_thumb_image_handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heif_context_encode_thumbnail$MH, "heif_context_encode_thumbnail");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), image.address(), master_image_handle.address(), encoder.address(), options.address(), bbox_size, out_thumb_image_handle.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_encode_thumbnail ( ResourceScope scope,  Addressable x1,  Addressable image,  Addressable master_image_handle,  Addressable encoder,  Addressable options,  int bbox_size,  Addressable out_thumb_image_handle) {
        return heif_context_encode_thumbnail(SegmentAllocator.ofScope(scope), x1.address(), image.address(), master_image_handle.address(), encoder.address(), options.address(), bbox_size, out_thumb_image_handle.address());
    }
    public static MethodHandle heif_context_assign_thumbnail$MH() {
        return RuntimeHelper.requireNonNull(constants$21.heif_context_assign_thumbnail$MH,"heif_context_assign_thumbnail");
    }
    public static MemorySegment heif_context_assign_thumbnail ( SegmentAllocator allocator,  Addressable x1,  Addressable master_image,  Addressable thumbnail_image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.heif_context_assign_thumbnail$MH, "heif_context_assign_thumbnail");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), master_image.address(), thumbnail_image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_assign_thumbnail ( ResourceScope scope,  Addressable x1,  Addressable master_image,  Addressable thumbnail_image) {
        return heif_context_assign_thumbnail(SegmentAllocator.ofScope(scope), x1.address(), master_image.address(), thumbnail_image.address());
    }
    public static MethodHandle heif_context_add_exif_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$22.heif_context_add_exif_metadata$MH,"heif_context_add_exif_metadata");
    }
    public static MemorySegment heif_context_add_exif_metadata ( SegmentAllocator allocator,  Addressable x1,  Addressable image_handle,  Addressable data,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.heif_context_add_exif_metadata$MH, "heif_context_add_exif_metadata");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), image_handle.address(), data.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_add_exif_metadata ( ResourceScope scope,  Addressable x1,  Addressable image_handle,  Addressable data,  int size) {
        return heif_context_add_exif_metadata(SegmentAllocator.ofScope(scope), x1.address(), image_handle.address(), data.address(), size);
    }
    public static MethodHandle heif_context_add_XMP_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$22.heif_context_add_XMP_metadata$MH,"heif_context_add_XMP_metadata");
    }
    public static MemorySegment heif_context_add_XMP_metadata ( SegmentAllocator allocator,  Addressable x1,  Addressable image_handle,  Addressable data,  int size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.heif_context_add_XMP_metadata$MH, "heif_context_add_XMP_metadata");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address(), image_handle.address(), data.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_add_XMP_metadata ( ResourceScope scope,  Addressable x1,  Addressable image_handle,  Addressable data,  int size) {
        return heif_context_add_XMP_metadata(SegmentAllocator.ofScope(scope), x1.address(), image_handle.address(), data.address(), size);
    }
    public static MethodHandle heif_context_add_generic_metadata$MH() {
        return RuntimeHelper.requireNonNull(constants$22.heif_context_add_generic_metadata$MH,"heif_context_add_generic_metadata");
    }
    public static MemorySegment heif_context_add_generic_metadata ( SegmentAllocator allocator,  Addressable ctx,  Addressable image_handle,  Addressable data,  int size,  Addressable item_type,  Addressable content_type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.heif_context_add_generic_metadata$MH, "heif_context_add_generic_metadata");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, ctx.address(), image_handle.address(), data.address(), size, item_type.address(), content_type.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_context_add_generic_metadata ( ResourceScope scope,  Addressable ctx,  Addressable image_handle,  Addressable data,  int size,  Addressable item_type,  Addressable content_type) {
        return heif_context_add_generic_metadata(SegmentAllocator.ofScope(scope), ctx.address(), image_handle.address(), data.address(), size, item_type.address(), content_type.address());
    }
    public static MethodHandle heif_image_create$MH() {
        return RuntimeHelper.requireNonNull(constants$22.heif_image_create$MH,"heif_image_create");
    }
    public static MemorySegment heif_image_create ( SegmentAllocator allocator,  int width,  int height,  int colorspace,  int chroma,  Addressable out_image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.heif_image_create$MH, "heif_image_create");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, width, height, colorspace, chroma, out_image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_create ( ResourceScope scope,  int width,  int height,  int colorspace,  int chroma,  Addressable out_image) {
        return heif_image_create(SegmentAllocator.ofScope(scope), width, height, colorspace, chroma, out_image.address());
    }
    public static MethodHandle heif_image_add_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$22.heif_image_add_plane$MH,"heif_image_add_plane");
    }
    public static MemorySegment heif_image_add_plane ( SegmentAllocator allocator,  Addressable image,  int channel,  int width,  int height,  int bit_depth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.heif_image_add_plane$MH, "heif_image_add_plane");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, image.address(), channel, width, height, bit_depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_image_add_plane ( ResourceScope scope,  Addressable image,  int channel,  int width,  int height,  int bit_depth) {
        return heif_image_add_plane(SegmentAllocator.ofScope(scope), image.address(), channel, width, height, bit_depth);
    }
    public static MethodHandle heif_image_set_premultiplied_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$22.heif_image_set_premultiplied_alpha$MH,"heif_image_set_premultiplied_alpha");
    }
    public static void heif_image_set_premultiplied_alpha ( Addressable image,  int is_premultiplied_alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.heif_image_set_premultiplied_alpha$MH, "heif_image_set_premultiplied_alpha");
        try {
            mh$.invokeExact(image.address(), is_premultiplied_alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_image_is_premultiplied_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$23.heif_image_is_premultiplied_alpha$MH,"heif_image_is_premultiplied_alpha");
    }
    public static int heif_image_is_premultiplied_alpha ( Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.heif_image_is_premultiplied_alpha$MH, "heif_image_is_premultiplied_alpha");
        try {
            return (int)mh$.invokeExact(image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_register_decoder$MH() {
        return RuntimeHelper.requireNonNull(constants$23.heif_register_decoder$MH,"heif_register_decoder");
    }
    public static MemorySegment heif_register_decoder ( SegmentAllocator allocator,  Addressable heif,  Addressable x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.heif_register_decoder$MH, "heif_register_decoder");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, heif.address(), x2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_register_decoder ( ResourceScope scope,  Addressable heif,  Addressable x2) {
        return heif_register_decoder(SegmentAllocator.ofScope(scope), heif.address(), x2.address());
    }
    public static MethodHandle heif_register_decoder_plugin$MH() {
        return RuntimeHelper.requireNonNull(constants$23.heif_register_decoder_plugin$MH,"heif_register_decoder_plugin");
    }
    public static MemorySegment heif_register_decoder_plugin ( SegmentAllocator allocator,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.heif_register_decoder_plugin$MH, "heif_register_decoder_plugin");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_register_decoder_plugin ( ResourceScope scope,  Addressable x1) {
        return heif_register_decoder_plugin(SegmentAllocator.ofScope(scope), x1.address());
    }
    public static MethodHandle heif_register_encoder_plugin$MH() {
        return RuntimeHelper.requireNonNull(constants$23.heif_register_encoder_plugin$MH,"heif_register_encoder_plugin");
    }
    public static MemorySegment heif_register_encoder_plugin ( SegmentAllocator allocator,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.heif_register_encoder_plugin$MH, "heif_register_encoder_plugin");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment heif_register_encoder_plugin ( ResourceScope scope,  Addressable x1) {
        return heif_register_encoder_plugin(SegmentAllocator.ofScope(scope), x1.address());
    }
    public static MethodHandle heif_encoder_descriptor_supportes_lossy_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$23.heif_encoder_descriptor_supportes_lossy_compression$MH,"heif_encoder_descriptor_supportes_lossy_compression");
    }
    public static int heif_encoder_descriptor_supportes_lossy_compression ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.heif_encoder_descriptor_supportes_lossy_compression$MH, "heif_encoder_descriptor_supportes_lossy_compression");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle heif_encoder_descriptor_supportes_lossless_compression$MH() {
        return RuntimeHelper.requireNonNull(constants$23.heif_encoder_descriptor_supportes_lossless_compression$MH,"heif_encoder_descriptor_supportes_lossless_compression");
    }
    public static int heif_encoder_descriptor_supportes_lossless_compression ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.heif_encoder_descriptor_supportes_lossless_compression$MH, "heif_encoder_descriptor_supportes_lossless_compression");
        try {
            return (int)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long LIBHEIF_AUX_IMAGE_FILTER_OMIT_ALPHA() {
        return 2L;
    }
    public static long LIBHEIF_AUX_IMAGE_FILTER_OMIT_DEPTH() {
        return 4L;
    }
    public static int heif_chroma_interleaved_24bit() {
        return (int)10L;
    }
    public static int heif_chroma_interleaved_32bit() {
        return (int)11L;
    }
}


