// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct heif_writer {
 *     int writer_api_version;
 *     struct heif_error (*write)(struct heif_context*,void*,unsigned long long,void*);
 * };
 * }
 */
public class heif_writer {

    public static MemoryLayout $LAYOUT() {
        return constants$29.const$1;
    }
    public static VarHandle writer_api_version$VH() {
        return constants$29.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int writer_api_version;
     * }
     */
    public static int writer_api_version$get(MemorySegment seg) {
        return (int)constants$29.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int writer_api_version;
     * }
     */
    public static void writer_api_version$set(MemorySegment seg, int x) {
        constants$29.const$2.set(seg, x);
    }
    public static int writer_api_version$get(MemorySegment seg, long index) {
        return (int)constants$29.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void writer_api_version$set(MemorySegment seg, long index, int x) {
        constants$29.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * struct heif_error (*write)(struct heif_context*,void*,unsigned long long,void*);
     * }
     */
    public interface write {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(write fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$29.const$3, fi, constants$7.const$4, scope);
        }
        static write ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$29.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct heif_error (*write)(struct heif_context*,void*,unsigned long long,void*);
     * }
     */
    public static MemorySegment write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct heif_error (*write)(struct heif_context*,void*,unsigned long long,void*);
     * }
     */
    public static void write$set(MemorySegment seg, MemorySegment x) {
        constants$29.const$5.set(seg, x);
    }
    public static MemorySegment write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void write$set(MemorySegment seg, long index, MemorySegment x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static write write(MemorySegment segment, Arena scope) {
        return write.ofAddress(write$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


