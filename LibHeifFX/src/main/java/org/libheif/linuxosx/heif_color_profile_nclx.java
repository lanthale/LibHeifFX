// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class heif_color_profile_nclx {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("version"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_INT$LAYOUT.withName("color_primaries"),
        Constants$root.C_INT$LAYOUT.withName("transfer_characteristics"),
        Constants$root.C_INT$LAYOUT.withName("matrix_coefficients"),
        Constants$root.C_CHAR$LAYOUT.withName("full_range_flag"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_red_x"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_red_y"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_green_x"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_green_y"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_blue_x"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_blue_y"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_white_x"),
        Constants$root.C_FLOAT$LAYOUT.withName("color_primary_white_y")
    ).withName("heif_color_profile_nclx");
    public static MemoryLayout $LAYOUT() {
        return heif_color_profile_nclx.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return heif_color_profile_nclx.version$VH;
    }
    public static byte version$get(MemorySegment seg) {
        return (byte)heif_color_profile_nclx.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, byte x) {
        heif_color_profile_nclx.version$VH.set(seg, x);
    }
    public static byte version$get(MemorySegment seg, long index) {
        return (byte)heif_color_profile_nclx.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, byte x) {
        heif_color_profile_nclx.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primaries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primaries"));
    public static VarHandle color_primaries$VH() {
        return heif_color_profile_nclx.color_primaries$VH;
    }
    public static int color_primaries$get(MemorySegment seg) {
        return (int)heif_color_profile_nclx.color_primaries$VH.get(seg);
    }
    public static void color_primaries$set( MemorySegment seg, int x) {
        heif_color_profile_nclx.color_primaries$VH.set(seg, x);
    }
    public static int color_primaries$get(MemorySegment seg, long index) {
        return (int)heif_color_profile_nclx.color_primaries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, int x) {
        heif_color_profile_nclx.color_primaries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle transfer_characteristics$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("transfer_characteristics"));
    public static VarHandle transfer_characteristics$VH() {
        return heif_color_profile_nclx.transfer_characteristics$VH;
    }
    public static int transfer_characteristics$get(MemorySegment seg) {
        return (int)heif_color_profile_nclx.transfer_characteristics$VH.get(seg);
    }
    public static void transfer_characteristics$set( MemorySegment seg, int x) {
        heif_color_profile_nclx.transfer_characteristics$VH.set(seg, x);
    }
    public static int transfer_characteristics$get(MemorySegment seg, long index) {
        return (int)heif_color_profile_nclx.transfer_characteristics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transfer_characteristics$set(MemorySegment seg, long index, int x) {
        heif_color_profile_nclx.transfer_characteristics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle matrix_coefficients$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("matrix_coefficients"));
    public static VarHandle matrix_coefficients$VH() {
        return heif_color_profile_nclx.matrix_coefficients$VH;
    }
    public static int matrix_coefficients$get(MemorySegment seg) {
        return (int)heif_color_profile_nclx.matrix_coefficients$VH.get(seg);
    }
    public static void matrix_coefficients$set( MemorySegment seg, int x) {
        heif_color_profile_nclx.matrix_coefficients$VH.set(seg, x);
    }
    public static int matrix_coefficients$get(MemorySegment seg, long index) {
        return (int)heif_color_profile_nclx.matrix_coefficients$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void matrix_coefficients$set(MemorySegment seg, long index, int x) {
        heif_color_profile_nclx.matrix_coefficients$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle full_range_flag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("full_range_flag"));
    public static VarHandle full_range_flag$VH() {
        return heif_color_profile_nclx.full_range_flag$VH;
    }
    public static byte full_range_flag$get(MemorySegment seg) {
        return (byte)heif_color_profile_nclx.full_range_flag$VH.get(seg);
    }
    public static void full_range_flag$set( MemorySegment seg, byte x) {
        heif_color_profile_nclx.full_range_flag$VH.set(seg, x);
    }
    public static byte full_range_flag$get(MemorySegment seg, long index) {
        return (byte)heif_color_profile_nclx.full_range_flag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void full_range_flag$set(MemorySegment seg, long index, byte x) {
        heif_color_profile_nclx.full_range_flag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_red_x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_red_x"));
    public static VarHandle color_primary_red_x$VH() {
        return heif_color_profile_nclx.color_primary_red_x$VH;
    }
    public static float color_primary_red_x$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_red_x$VH.get(seg);
    }
    public static void color_primary_red_x$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_red_x$VH.set(seg, x);
    }
    public static float color_primary_red_x$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_red_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_red_x$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_red_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_red_y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_red_y"));
    public static VarHandle color_primary_red_y$VH() {
        return heif_color_profile_nclx.color_primary_red_y$VH;
    }
    public static float color_primary_red_y$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_red_y$VH.get(seg);
    }
    public static void color_primary_red_y$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_red_y$VH.set(seg, x);
    }
    public static float color_primary_red_y$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_red_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_red_y$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_red_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_green_x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_green_x"));
    public static VarHandle color_primary_green_x$VH() {
        return heif_color_profile_nclx.color_primary_green_x$VH;
    }
    public static float color_primary_green_x$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_green_x$VH.get(seg);
    }
    public static void color_primary_green_x$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_green_x$VH.set(seg, x);
    }
    public static float color_primary_green_x$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_green_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_green_x$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_green_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_green_y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_green_y"));
    public static VarHandle color_primary_green_y$VH() {
        return heif_color_profile_nclx.color_primary_green_y$VH;
    }
    public static float color_primary_green_y$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_green_y$VH.get(seg);
    }
    public static void color_primary_green_y$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_green_y$VH.set(seg, x);
    }
    public static float color_primary_green_y$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_green_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_green_y$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_green_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_blue_x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_blue_x"));
    public static VarHandle color_primary_blue_x$VH() {
        return heif_color_profile_nclx.color_primary_blue_x$VH;
    }
    public static float color_primary_blue_x$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_blue_x$VH.get(seg);
    }
    public static void color_primary_blue_x$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_blue_x$VH.set(seg, x);
    }
    public static float color_primary_blue_x$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_blue_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_blue_x$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_blue_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_blue_y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_blue_y"));
    public static VarHandle color_primary_blue_y$VH() {
        return heif_color_profile_nclx.color_primary_blue_y$VH;
    }
    public static float color_primary_blue_y$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_blue_y$VH.get(seg);
    }
    public static void color_primary_blue_y$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_blue_y$VH.set(seg, x);
    }
    public static float color_primary_blue_y$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_blue_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_blue_y$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_blue_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_white_x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_white_x"));
    public static VarHandle color_primary_white_x$VH() {
        return heif_color_profile_nclx.color_primary_white_x$VH;
    }
    public static float color_primary_white_x$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_white_x$VH.get(seg);
    }
    public static void color_primary_white_x$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_white_x$VH.set(seg, x);
    }
    public static float color_primary_white_x$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_white_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_white_x$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_white_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle color_primary_white_y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_primary_white_y"));
    public static VarHandle color_primary_white_y$VH() {
        return heif_color_profile_nclx.color_primary_white_y$VH;
    }
    public static float color_primary_white_y$get(MemorySegment seg) {
        return (float)heif_color_profile_nclx.color_primary_white_y$VH.get(seg);
    }
    public static void color_primary_white_y$set( MemorySegment seg, float x) {
        heif_color_profile_nclx.color_primary_white_y$VH.set(seg, x);
    }
    public static float color_primary_white_y$get(MemorySegment seg, long index) {
        return (float)heif_color_profile_nclx.color_primary_white_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primary_white_y$set(MemorySegment seg, long index, float x) {
        heif_color_profile_nclx.color_primary_white_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


