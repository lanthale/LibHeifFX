// Generated by jextract

package org.libheif.linuxosx;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$18 {

    static final FunctionDescriptor heif_encoder_list_parameters$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_list_parameters$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_list_parameters",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$18.heif_encoder_list_parameters$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_parameter_get_name$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_parameter_get_name$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_parameter_get_name",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$18.heif_encoder_parameter_get_name$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_parameter_get_type$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle heif_encoder_parameter_get_type$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_parameter_get_type",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$18.heif_encoder_parameter_get_type$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_parameter_get_valid_integer_range$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_INT.withName("code"),
        C_INT.withName("subcode"),
        C_POINTER.withName("message")
    ).withName("heif_error"),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_parameter_get_valid_integer_range$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_parameter_get_valid_integer_range",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$18.heif_encoder_parameter_get_valid_integer_range$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_parameter_get_valid_integer_values$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_INT.withName("code"),
        C_INT.withName("subcode"),
        C_POINTER.withName("message")
    ).withName("heif_error"),
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_parameter_get_valid_integer_values$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_parameter_get_valid_integer_values",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$18.heif_encoder_parameter_get_valid_integer_values$FUNC, false
    );
    static final FunctionDescriptor heif_encoder_parameter_get_valid_string_values$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(
        C_INT.withName("code"),
        C_INT.withName("subcode"),
        C_POINTER.withName("message")
    ).withName("heif_error"),
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle heif_encoder_parameter_get_valid_string_values$MH = RuntimeHelper.downcallHandle(
        heif_h.LIBRARIES, "heif_encoder_parameter_get_valid_string_values",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
        constants$18.heif_encoder_parameter_get_valid_string_values$FUNC, false
    );
}


